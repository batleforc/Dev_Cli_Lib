#![allow(clippy::redundant_closure_call)]
#![allow(clippy::needless_lifetimes)]
#![allow(clippy::match_single_binding)]
#![allow(clippy::clone_on_copy)]

#[doc = r" Error types."]
pub mod error {
    #[doc = r" Error from a `TryFrom` or `FromStr` implementation."]
    pub struct ConversionError(::std::borrow::Cow<'static, str>);
    impl ::std::error::Error for ConversionError {}
    impl ::std::fmt::Display for ConversionError {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> Result<(), ::std::fmt::Error> {
            ::std::fmt::Display::fmt(&self.0, f)
        }
    }
    impl ::std::fmt::Debug for ConversionError {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> Result<(), ::std::fmt::Error> {
            ::std::fmt::Debug::fmt(&self.0, f)
        }
    }
    impl From<&'static str> for ConversionError {
        fn from(value: &'static str) -> Self {
            Self(value.into())
        }
    }
    impl From<String> for ConversionError {
        fn from(value: String) -> Self {
            Self(value.into())
        }
    }
}
#[doc = "Devfile describes the structure of a cloud-native devworkspace and development environment."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"Devfile schema - Version 2.2.2\","]
#[doc = "  \"description\": \"Devfile describes the structure of a cloud-native devworkspace and development environment.\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"schemaVersion\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"attributes\": {"]
#[doc = "      \"description\": \"Map of implementation-dependant free-form YAML attributes.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": true"]
#[doc = "    },"]
#[doc = "    \"commands\": {"]
#[doc = "      \"description\": \"Predefined, ready-to-use, devworkspace-related commands\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"object\","]
#[doc = "        \"oneOf\": ["]
#[doc = "          {"]
#[doc = "            \"required\": ["]
#[doc = "              \"exec\""]
#[doc = "            ]"]
#[doc = "          },"]
#[doc = "          {"]
#[doc = "            \"required\": ["]
#[doc = "              \"apply\""]
#[doc = "            ]"]
#[doc = "          },"]
#[doc = "          {"]
#[doc = "            \"required\": ["]
#[doc = "              \"composite\""]
#[doc = "            ]"]
#[doc = "          }"]
#[doc = "        ],"]
#[doc = "        \"required\": ["]
#[doc = "          \"id\""]
#[doc = "        ],"]
#[doc = "        \"properties\": {"]
#[doc = "          \"apply\": {"]
#[doc = "            \"description\": \"Command that consists in applying a given component definition, typically bound to a devworkspace event.\\n\\nFor example, when an `apply` command is bound to a `preStart` event, and references a `container` component, it will start the container as a K8S initContainer in the devworkspace POD, unless the component has its `dedicatedPod` field set to `true`.\\n\\nWhen no `apply` command exist for a given component, it is assumed the component will be applied at devworkspace start by default, unless `deployByDefault` for that component is set to false.\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"required\": ["]
#[doc = "              \"component\""]
#[doc = "            ],"]
#[doc = "            \"properties\": {"]
#[doc = "              \"component\": {"]
#[doc = "                \"description\": \"Describes component that will be applied\","]
#[doc = "                \"type\": \"string\""]
#[doc = "              },"]
#[doc = "              \"group\": {"]
#[doc = "                \"description\": \"Defines the group this command is part of\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"required\": ["]
#[doc = "                  \"kind\""]
#[doc = "                ],"]
#[doc = "                \"properties\": {"]
#[doc = "                  \"isDefault\": {"]
#[doc = "                    \"description\": \"Identifies the default command for a given group kind\","]
#[doc = "                    \"type\": \"boolean\""]
#[doc = "                  },"]
#[doc = "                  \"kind\": {"]
#[doc = "                    \"description\": \"Kind of group the command is part of\","]
#[doc = "                    \"type\": \"string\","]
#[doc = "                    \"enum\": ["]
#[doc = "                      \"build\","]
#[doc = "                      \"run\","]
#[doc = "                      \"test\","]
#[doc = "                      \"debug\","]
#[doc = "                      \"deploy\""]
#[doc = "                    ]"]
#[doc = "                  }"]
#[doc = "                },"]
#[doc = "                \"additionalProperties\": false"]
#[doc = "              },"]
#[doc = "              \"label\": {"]
#[doc = "                \"description\": \"Optional label that provides a label for this command to be used in Editor UI menus for example\","]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"additionalProperties\": false"]
#[doc = "          },"]
#[doc = "          \"attributes\": {"]
#[doc = "            \"description\": \"Map of implementation-dependant free-form YAML attributes.\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"additionalProperties\": true"]
#[doc = "          },"]
#[doc = "          \"composite\": {"]
#[doc = "            \"description\": \"Composite command that allows executing several sub-commands either sequentially or concurrently\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"properties\": {"]
#[doc = "              \"commands\": {"]
#[doc = "                \"description\": \"The commands that comprise this composite command\","]
#[doc = "                \"type\": \"array\","]
#[doc = "                \"items\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"group\": {"]
#[doc = "                \"description\": \"Defines the group this command is part of\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"required\": ["]
#[doc = "                  \"kind\""]
#[doc = "                ],"]
#[doc = "                \"properties\": {"]
#[doc = "                  \"isDefault\": {"]
#[doc = "                    \"description\": \"Identifies the default command for a given group kind\","]
#[doc = "                    \"type\": \"boolean\""]
#[doc = "                  },"]
#[doc = "                  \"kind\": {"]
#[doc = "                    \"description\": \"Kind of group the command is part of\","]
#[doc = "                    \"type\": \"string\","]
#[doc = "                    \"enum\": ["]
#[doc = "                      \"build\","]
#[doc = "                      \"run\","]
#[doc = "                      \"test\","]
#[doc = "                      \"debug\","]
#[doc = "                      \"deploy\""]
#[doc = "                    ]"]
#[doc = "                  }"]
#[doc = "                },"]
#[doc = "                \"additionalProperties\": false"]
#[doc = "              },"]
#[doc = "              \"label\": {"]
#[doc = "                \"description\": \"Optional label that provides a label for this command to be used in Editor UI menus for example\","]
#[doc = "                \"type\": \"string\""]
#[doc = "              },"]
#[doc = "              \"parallel\": {"]
#[doc = "                \"description\": \"Indicates if the sub-commands should be executed concurrently\","]
#[doc = "                \"type\": \"boolean\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"additionalProperties\": false"]
#[doc = "          },"]
#[doc = "          \"exec\": {"]
#[doc = "            \"description\": \"CLI Command executed in an existing component container\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"required\": ["]
#[doc = "              \"commandLine\","]
#[doc = "              \"component\""]
#[doc = "            ],"]
#[doc = "            \"properties\": {"]
#[doc = "              \"commandLine\": {"]
#[doc = "                \"description\": \"The actual command-line string\\n\\nSpecial variables that can be used:\\n\\n - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping.\\n\\n - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one.\","]
#[doc = "                \"type\": \"string\""]
#[doc = "              },"]
#[doc = "              \"component\": {"]
#[doc = "                \"description\": \"Describes component to which given action relates\","]
#[doc = "                \"type\": \"string\""]
#[doc = "              },"]
#[doc = "              \"env\": {"]
#[doc = "                \"description\": \"Optional list of environment variables that have to be set before running the command\","]
#[doc = "                \"type\": \"array\","]
#[doc = "                \"items\": {"]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"name\","]
#[doc = "                    \"value\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"name\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"value\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"group\": {"]
#[doc = "                \"description\": \"Defines the group this command is part of\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"required\": ["]
#[doc = "                  \"kind\""]
#[doc = "                ],"]
#[doc = "                \"properties\": {"]
#[doc = "                  \"isDefault\": {"]
#[doc = "                    \"description\": \"Identifies the default command for a given group kind\","]
#[doc = "                    \"type\": \"boolean\""]
#[doc = "                  },"]
#[doc = "                  \"kind\": {"]
#[doc = "                    \"description\": \"Kind of group the command is part of\","]
#[doc = "                    \"type\": \"string\","]
#[doc = "                    \"enum\": ["]
#[doc = "                      \"build\","]
#[doc = "                      \"run\","]
#[doc = "                      \"test\","]
#[doc = "                      \"debug\","]
#[doc = "                      \"deploy\""]
#[doc = "                    ]"]
#[doc = "                  }"]
#[doc = "                },"]
#[doc = "                \"additionalProperties\": false"]
#[doc = "              },"]
#[doc = "              \"hotReloadCapable\": {"]
#[doc = "                \"description\": \"Specify whether the command is restarted or not when the source code changes. If set to `true` the command won't be restarted. A *hotReloadCapable* `run` or `debug` command is expected to handle file changes on its own and won't be restarted. A *hotReloadCapable* `build` command is expected to be executed only once and won't be executed again. This field is taken into account only for commands `build`, `run` and `debug` with `isDefault` set to `true`.\\n\\nDefault value is `false`\","]
#[doc = "                \"type\": \"boolean\""]
#[doc = "              },"]
#[doc = "              \"label\": {"]
#[doc = "                \"description\": \"Optional label that provides a label for this command to be used in Editor UI menus for example\","]
#[doc = "                \"type\": \"string\""]
#[doc = "              },"]
#[doc = "              \"workingDir\": {"]
#[doc = "                \"description\": \"Working directory where the command should be executed\\n\\nSpecial variables that can be used:\\n\\n - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping.\\n\\n - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one.\","]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"additionalProperties\": false"]
#[doc = "          },"]
#[doc = "          \"id\": {"]
#[doc = "            \"description\": \"Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.\","]
#[doc = "            \"type\": \"string\","]
#[doc = "            \"maxLength\": 63,"]
#[doc = "            \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"additionalProperties\": false"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"components\": {"]
#[doc = "      \"description\": \"List of the devworkspace components, such as editor and plugins, user-provided containers, or other types of components\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"object\","]
#[doc = "        \"oneOf\": ["]
#[doc = "          {"]
#[doc = "            \"required\": ["]
#[doc = "              \"container\""]
#[doc = "            ]"]
#[doc = "          },"]
#[doc = "          {"]
#[doc = "            \"required\": ["]
#[doc = "              \"kubernetes\""]
#[doc = "            ]"]
#[doc = "          },"]
#[doc = "          {"]
#[doc = "            \"required\": ["]
#[doc = "              \"openshift\""]
#[doc = "            ]"]
#[doc = "          },"]
#[doc = "          {"]
#[doc = "            \"required\": ["]
#[doc = "              \"volume\""]
#[doc = "            ]"]
#[doc = "          },"]
#[doc = "          {"]
#[doc = "            \"required\": ["]
#[doc = "              \"image\""]
#[doc = "            ]"]
#[doc = "          }"]
#[doc = "        ],"]
#[doc = "        \"required\": ["]
#[doc = "          \"name\""]
#[doc = "        ],"]
#[doc = "        \"properties\": {"]
#[doc = "          \"attributes\": {"]
#[doc = "            \"description\": \"Map of implementation-dependant free-form YAML attributes.\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"additionalProperties\": true"]
#[doc = "          },"]
#[doc = "          \"container\": {"]
#[doc = "            \"description\": \"Allows adding and configuring devworkspace-related containers\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"required\": ["]
#[doc = "              \"image\""]
#[doc = "            ],"]
#[doc = "            \"properties\": {"]
#[doc = "              \"annotation\": {"]
#[doc = "                \"description\": \"Annotations that should be added to specific resources for this container\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"properties\": {"]
#[doc = "                  \"deployment\": {"]
#[doc = "                    \"description\": \"Annotations to be added to deployment\","]
#[doc = "                    \"type\": \"object\","]
#[doc = "                    \"additionalProperties\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"service\": {"]
#[doc = "                    \"description\": \"Annotations to be added to service\","]
#[doc = "                    \"type\": \"object\","]
#[doc = "                    \"additionalProperties\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  }"]
#[doc = "                },"]
#[doc = "                \"additionalProperties\": false"]
#[doc = "              },"]
#[doc = "              \"args\": {"]
#[doc = "                \"description\": \"The arguments to supply to the command running the dockerimage component. The arguments are supplied either to the default command provided in the image or to the overridden command.\\n\\nDefaults to an empty array, meaning use whatever is defined in the image.\","]
#[doc = "                \"type\": \"array\","]
#[doc = "                \"items\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"command\": {"]
#[doc = "                \"description\": \"The command to run in the dockerimage component instead of the default one provided in the image.\\n\\nDefaults to an empty array, meaning use whatever is defined in the image.\","]
#[doc = "                \"type\": \"array\","]
#[doc = "                \"items\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"cpuLimit\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              },"]
#[doc = "              \"cpuRequest\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              },"]
#[doc = "              \"dedicatedPod\": {"]
#[doc = "                \"description\": \"Specify if a container should run in its own separated pod, instead of running as part of the main development environment pod.\\n\\nDefault value is `false`\","]
#[doc = "                \"type\": \"boolean\""]
#[doc = "              },"]
#[doc = "              \"endpoints\": {"]
#[doc = "                \"type\": \"array\","]
#[doc = "                \"items\": {"]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"name\","]
#[doc = "                    \"targetPort\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"annotation\": {"]
#[doc = "                      \"description\": \"Annotations to be added to Kubernetes Ingress or Openshift Route\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"additionalProperties\": {"]
#[doc = "                        \"type\": \"string\""]
#[doc = "                      }"]
#[doc = "                    },"]
#[doc = "                    \"attributes\": {"]
#[doc = "                      \"description\": \"Map of implementation-dependant string-based free-form attributes.\\n\\nExamples of Che-specific attributes:\\n- cookiesAuthEnabled: \\\"true\\\" / \\\"false\\\",\\n- type: \\\"terminal\\\" / \\\"ide\\\" / \\\"ide-dev\\\",\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"additionalProperties\": true"]
#[doc = "                    },"]
#[doc = "                    \"exposure\": {"]
#[doc = "                      \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "                      \"default\": \"public\","]
#[doc = "                      \"type\": \"string\","]
#[doc = "                      \"enum\": ["]
#[doc = "                        \"public\","]
#[doc = "                        \"internal\","]
#[doc = "                        \"none\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"name\": {"]
#[doc = "                      \"type\": \"string\","]
#[doc = "                      \"maxLength\": 15,"]
#[doc = "                      \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "                    },"]
#[doc = "                    \"path\": {"]
#[doc = "                      \"description\": \"Path of the endpoint URL\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"protocol\": {"]
#[doc = "                      \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "                      \"default\": \"http\","]
#[doc = "                      \"type\": \"string\","]
#[doc = "                      \"enum\": ["]
#[doc = "                        \"http\","]
#[doc = "                        \"https\","]
#[doc = "                        \"ws\","]
#[doc = "                        \"wss\","]
#[doc = "                        \"tcp\","]
#[doc = "                        \"udp\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"secure\": {"]
#[doc = "                      \"description\": \"Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.\","]
#[doc = "                      \"type\": \"boolean\""]
#[doc = "                    },"]
#[doc = "                    \"targetPort\": {"]
#[doc = "                      \"description\": \"Port number to be used within the container component. The same port cannot be used by two different container components.\","]
#[doc = "                      \"type\": \"integer\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"env\": {"]
#[doc = "                \"description\": \"Environment variables used in this container.\\n\\nThe following variables are reserved and cannot be overridden via env:\\n\\n - `$PROJECTS_ROOT`\\n\\n - `$PROJECT_SOURCE`\","]
#[doc = "                \"type\": \"array\","]
#[doc = "                \"items\": {"]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"name\","]
#[doc = "                    \"value\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"name\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"value\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"image\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              },"]
#[doc = "              \"memoryLimit\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              },"]
#[doc = "              \"memoryRequest\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              },"]
#[doc = "              \"mountSources\": {"]
#[doc = "                \"description\": \"Toggles whether or not the project source code should be mounted in the component.\\n\\nDefaults to true for all component types except plugins and components that set `dedicatedPod` to true.\","]
#[doc = "                \"type\": \"boolean\""]
#[doc = "              },"]
#[doc = "              \"sourceMapping\": {"]
#[doc = "                \"description\": \"Optional specification of the path in the container where project sources should be transferred/mounted when `mountSources` is `true`. When omitted, the default value of /projects is used.\","]
#[doc = "                \"default\": \"/projects\","]
#[doc = "                \"type\": \"string\""]
#[doc = "              },"]
#[doc = "              \"volumeMounts\": {"]
#[doc = "                \"description\": \"List of volumes mounts that should be mounted is this container.\","]
#[doc = "                \"type\": \"array\","]
#[doc = "                \"items\": {"]
#[doc = "                  \"description\": \"Volume that should be mounted to a component container\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"name\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"name\": {"]
#[doc = "                      \"description\": \"The volume mount name is the name of an existing `Volume` component. If several containers mount the same volume name then they will reuse the same volume and will be able to access to the same files.\","]
#[doc = "                      \"type\": \"string\","]
#[doc = "                      \"maxLength\": 63,"]
#[doc = "                      \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "                    },"]
#[doc = "                    \"path\": {"]
#[doc = "                      \"description\": \"The path in the component container where the volume should be mounted. If not path is mentioned, default path is the is `/<name>`.\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                }"]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"additionalProperties\": false"]
#[doc = "          },"]
#[doc = "          \"image\": {"]
#[doc = "            \"description\": \"Allows specifying the definition of an image for outer loop builds\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"oneOf\": ["]
#[doc = "              {"]
#[doc = "                \"required\": ["]
#[doc = "                  \"dockerfile\""]
#[doc = "                ]"]
#[doc = "              }"]
#[doc = "            ],"]
#[doc = "            \"required\": ["]
#[doc = "              \"imageName\""]
#[doc = "            ],"]
#[doc = "            \"properties\": {"]
#[doc = "              \"autoBuild\": {"]
#[doc = "                \"description\": \"Defines if the image should be built during startup.\\n\\nDefault value is `false`\","]
#[doc = "                \"type\": \"boolean\""]
#[doc = "              },"]
#[doc = "              \"dockerfile\": {"]
#[doc = "                \"description\": \"Allows specifying dockerfile type build\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"oneOf\": ["]
#[doc = "                  {"]
#[doc = "                    \"required\": ["]
#[doc = "                      \"uri\""]
#[doc = "                    ]"]
#[doc = "                  },"]
#[doc = "                  {"]
#[doc = "                    \"required\": ["]
#[doc = "                      \"devfileRegistry\""]
#[doc = "                    ]"]
#[doc = "                  },"]
#[doc = "                  {"]
#[doc = "                    \"required\": ["]
#[doc = "                      \"git\""]
#[doc = "                    ]"]
#[doc = "                  }"]
#[doc = "                ],"]
#[doc = "                \"properties\": {"]
#[doc = "                  \"args\": {"]
#[doc = "                    \"description\": \"The arguments to supply to the dockerfile build.\","]
#[doc = "                    \"type\": \"array\","]
#[doc = "                    \"items\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"buildContext\": {"]
#[doc = "                    \"description\": \"Path of source directory to establish build context. Defaults to ${PROJECT_SOURCE} in the container\","]
#[doc = "                    \"type\": \"string\""]
#[doc = "                  },"]
#[doc = "                  \"devfileRegistry\": {"]
#[doc = "                    \"description\": \"Dockerfile's Devfile Registry source\","]
#[doc = "                    \"type\": \"object\","]
#[doc = "                    \"required\": ["]
#[doc = "                      \"id\""]
#[doc = "                    ],"]
#[doc = "                    \"properties\": {"]
#[doc = "                      \"id\": {"]
#[doc = "                        \"description\": \"Id in a devfile registry that contains a Dockerfile. The src in the OCI registry required for the Dockerfile build will be downloaded for building the image.\","]
#[doc = "                        \"type\": \"string\""]
#[doc = "                      },"]
#[doc = "                      \"registryUrl\": {"]
#[doc = "                        \"description\": \"Devfile Registry URL to pull the Dockerfile from when using the Devfile Registry as Dockerfile src. To ensure the Dockerfile gets resolved consistently in different environments, it is recommended to always specify the `devfileRegistryUrl` when `Id` is used.\","]
#[doc = "                        \"type\": \"string\""]
#[doc = "                      }"]
#[doc = "                    },"]
#[doc = "                    \"additionalProperties\": false"]
#[doc = "                  },"]
#[doc = "                  \"git\": {"]
#[doc = "                    \"description\": \"Dockerfile's Git source\","]
#[doc = "                    \"type\": \"object\","]
#[doc = "                    \"required\": ["]
#[doc = "                      \"remotes\""]
#[doc = "                    ],"]
#[doc = "                    \"properties\": {"]
#[doc = "                      \"checkoutFrom\": {"]
#[doc = "                        \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "                        \"type\": \"object\","]
#[doc = "                        \"properties\": {"]
#[doc = "                          \"remote\": {"]
#[doc = "                            \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "                            \"type\": \"string\""]
#[doc = "                          },"]
#[doc = "                          \"revision\": {"]
#[doc = "                            \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "                            \"type\": \"string\""]
#[doc = "                          }"]
#[doc = "                        },"]
#[doc = "                        \"additionalProperties\": false"]
#[doc = "                      },"]
#[doc = "                      \"fileLocation\": {"]
#[doc = "                        \"description\": \"Location of the Dockerfile in the Git repository when using git as Dockerfile src. Defaults to Dockerfile.\","]
#[doc = "                        \"type\": \"string\""]
#[doc = "                      },"]
#[doc = "                      \"remotes\": {"]
#[doc = "                        \"description\": \"The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.\","]
#[doc = "                        \"type\": \"object\","]
#[doc = "                        \"additionalProperties\": {"]
#[doc = "                          \"type\": \"string\""]
#[doc = "                        }"]
#[doc = "                      }"]
#[doc = "                    },"]
#[doc = "                    \"additionalProperties\": false"]
#[doc = "                  },"]
#[doc = "                  \"rootRequired\": {"]
#[doc = "                    \"description\": \"Specify if a privileged builder pod is required.\\n\\nDefault value is `false`\","]
#[doc = "                    \"type\": \"boolean\""]
#[doc = "                  },"]
#[doc = "                  \"uri\": {"]
#[doc = "                    \"description\": \"URI Reference of a Dockerfile. It can be a full URL or a relative URI from the current devfile as the base URI.\","]
#[doc = "                    \"type\": \"string\""]
#[doc = "                  }"]
#[doc = "                },"]
#[doc = "                \"additionalProperties\": false"]
#[doc = "              },"]
#[doc = "              \"imageName\": {"]
#[doc = "                \"description\": \"Name of the image for the resulting outerloop build\","]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"additionalProperties\": false"]
#[doc = "          },"]
#[doc = "          \"kubernetes\": {"]
#[doc = "            \"description\": \"Allows importing into the devworkspace the Kubernetes resources defined in a given manifest. For example this allows reusing the Kubernetes definitions used to deploy some runtime components in production.\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"oneOf\": ["]
#[doc = "              {"]
#[doc = "                \"required\": ["]
#[doc = "                  \"uri\""]
#[doc = "                ]"]
#[doc = "              },"]
#[doc = "              {"]
#[doc = "                \"required\": ["]
#[doc = "                  \"inlined\""]
#[doc = "                ]"]
#[doc = "              }"]
#[doc = "            ],"]
#[doc = "            \"properties\": {"]
#[doc = "              \"deployByDefault\": {"]
#[doc = "                \"description\": \"Defines if the component should be deployed during startup.\\n\\nDefault value is `false`\","]
#[doc = "                \"type\": \"boolean\""]
#[doc = "              },"]
#[doc = "              \"endpoints\": {"]
#[doc = "                \"type\": \"array\","]
#[doc = "                \"items\": {"]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"name\","]
#[doc = "                    \"targetPort\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"annotation\": {"]
#[doc = "                      \"description\": \"Annotations to be added to Kubernetes Ingress or Openshift Route\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"additionalProperties\": {"]
#[doc = "                        \"type\": \"string\""]
#[doc = "                      }"]
#[doc = "                    },"]
#[doc = "                    \"attributes\": {"]
#[doc = "                      \"description\": \"Map of implementation-dependant string-based free-form attributes.\\n\\nExamples of Che-specific attributes:\\n- cookiesAuthEnabled: \\\"true\\\" / \\\"false\\\",\\n- type: \\\"terminal\\\" / \\\"ide\\\" / \\\"ide-dev\\\",\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"additionalProperties\": true"]
#[doc = "                    },"]
#[doc = "                    \"exposure\": {"]
#[doc = "                      \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "                      \"default\": \"public\","]
#[doc = "                      \"type\": \"string\","]
#[doc = "                      \"enum\": ["]
#[doc = "                        \"public\","]
#[doc = "                        \"internal\","]
#[doc = "                        \"none\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"name\": {"]
#[doc = "                      \"type\": \"string\","]
#[doc = "                      \"maxLength\": 15,"]
#[doc = "                      \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "                    },"]
#[doc = "                    \"path\": {"]
#[doc = "                      \"description\": \"Path of the endpoint URL\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"protocol\": {"]
#[doc = "                      \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "                      \"default\": \"http\","]
#[doc = "                      \"type\": \"string\","]
#[doc = "                      \"enum\": ["]
#[doc = "                        \"http\","]
#[doc = "                        \"https\","]
#[doc = "                        \"ws\","]
#[doc = "                        \"wss\","]
#[doc = "                        \"tcp\","]
#[doc = "                        \"udp\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"secure\": {"]
#[doc = "                      \"description\": \"Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.\","]
#[doc = "                      \"type\": \"boolean\""]
#[doc = "                    },"]
#[doc = "                    \"targetPort\": {"]
#[doc = "                      \"description\": \"Port number to be used within the container component. The same port cannot be used by two different container components.\","]
#[doc = "                      \"type\": \"integer\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"inlined\": {"]
#[doc = "                \"description\": \"Inlined manifest\","]
#[doc = "                \"type\": \"string\""]
#[doc = "              },"]
#[doc = "              \"uri\": {"]
#[doc = "                \"description\": \"Location in a file fetched from a uri.\","]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"additionalProperties\": false"]
#[doc = "          },"]
#[doc = "          \"name\": {"]
#[doc = "            \"description\": \"Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin.\","]
#[doc = "            \"type\": \"string\","]
#[doc = "            \"maxLength\": 63,"]
#[doc = "            \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "          },"]
#[doc = "          \"openshift\": {"]
#[doc = "            \"description\": \"Allows importing into the devworkspace the OpenShift resources defined in a given manifest. For example this allows reusing the OpenShift definitions used to deploy some runtime components in production.\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"oneOf\": ["]
#[doc = "              {"]
#[doc = "                \"required\": ["]
#[doc = "                  \"uri\""]
#[doc = "                ]"]
#[doc = "              },"]
#[doc = "              {"]
#[doc = "                \"required\": ["]
#[doc = "                  \"inlined\""]
#[doc = "                ]"]
#[doc = "              }"]
#[doc = "            ],"]
#[doc = "            \"properties\": {"]
#[doc = "              \"deployByDefault\": {"]
#[doc = "                \"description\": \"Defines if the component should be deployed during startup.\\n\\nDefault value is `false`\","]
#[doc = "                \"type\": \"boolean\""]
#[doc = "              },"]
#[doc = "              \"endpoints\": {"]
#[doc = "                \"type\": \"array\","]
#[doc = "                \"items\": {"]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"name\","]
#[doc = "                    \"targetPort\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"annotation\": {"]
#[doc = "                      \"description\": \"Annotations to be added to Kubernetes Ingress or Openshift Route\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"additionalProperties\": {"]
#[doc = "                        \"type\": \"string\""]
#[doc = "                      }"]
#[doc = "                    },"]
#[doc = "                    \"attributes\": {"]
#[doc = "                      \"description\": \"Map of implementation-dependant string-based free-form attributes.\\n\\nExamples of Che-specific attributes:\\n- cookiesAuthEnabled: \\\"true\\\" / \\\"false\\\",\\n- type: \\\"terminal\\\" / \\\"ide\\\" / \\\"ide-dev\\\",\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"additionalProperties\": true"]
#[doc = "                    },"]
#[doc = "                    \"exposure\": {"]
#[doc = "                      \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "                      \"default\": \"public\","]
#[doc = "                      \"type\": \"string\","]
#[doc = "                      \"enum\": ["]
#[doc = "                        \"public\","]
#[doc = "                        \"internal\","]
#[doc = "                        \"none\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"name\": {"]
#[doc = "                      \"type\": \"string\","]
#[doc = "                      \"maxLength\": 15,"]
#[doc = "                      \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "                    },"]
#[doc = "                    \"path\": {"]
#[doc = "                      \"description\": \"Path of the endpoint URL\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"protocol\": {"]
#[doc = "                      \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "                      \"default\": \"http\","]
#[doc = "                      \"type\": \"string\","]
#[doc = "                      \"enum\": ["]
#[doc = "                        \"http\","]
#[doc = "                        \"https\","]
#[doc = "                        \"ws\","]
#[doc = "                        \"wss\","]
#[doc = "                        \"tcp\","]
#[doc = "                        \"udp\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"secure\": {"]
#[doc = "                      \"description\": \"Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.\","]
#[doc = "                      \"type\": \"boolean\""]
#[doc = "                    },"]
#[doc = "                    \"targetPort\": {"]
#[doc = "                      \"description\": \"Port number to be used within the container component. The same port cannot be used by two different container components.\","]
#[doc = "                      \"type\": \"integer\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"inlined\": {"]
#[doc = "                \"description\": \"Inlined manifest\","]
#[doc = "                \"type\": \"string\""]
#[doc = "              },"]
#[doc = "              \"uri\": {"]
#[doc = "                \"description\": \"Location in a file fetched from a uri.\","]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"additionalProperties\": false"]
#[doc = "          },"]
#[doc = "          \"volume\": {"]
#[doc = "            \"description\": \"Allows specifying the definition of a volume shared by several other components\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"properties\": {"]
#[doc = "              \"ephemeral\": {"]
#[doc = "                \"description\": \"Ephemeral volumes are not stored persistently across restarts. Defaults to false\","]
#[doc = "                \"type\": \"boolean\""]
#[doc = "              },"]
#[doc = "              \"size\": {"]
#[doc = "                \"description\": \"Size of the volume\","]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"additionalProperties\": false"]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"additionalProperties\": false"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"dependentProjects\": {"]
#[doc = "      \"description\": \"Additional projects related to the main project in the devfile, contianing names and sources locations\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"object\","]
#[doc = "        \"oneOf\": ["]
#[doc = "          {"]
#[doc = "            \"required\": ["]
#[doc = "              \"git\""]
#[doc = "            ]"]
#[doc = "          },"]
#[doc = "          {"]
#[doc = "            \"required\": ["]
#[doc = "              \"zip\""]
#[doc = "            ]"]
#[doc = "          }"]
#[doc = "        ],"]
#[doc = "        \"required\": ["]
#[doc = "          \"name\""]
#[doc = "        ],"]
#[doc = "        \"properties\": {"]
#[doc = "          \"attributes\": {"]
#[doc = "            \"description\": \"Map of implementation-dependant free-form YAML attributes.\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"additionalProperties\": true"]
#[doc = "          },"]
#[doc = "          \"clonePath\": {"]
#[doc = "            \"description\": \"Path relative to the root of the projects to which this project should be cloned into. This is a unix-style relative path (i.e. uses forward slashes). The path is invalid if it is absolute or tries to escape the project root through the usage of '..'. If not specified, defaults to the project name.\","]
#[doc = "            \"type\": \"string\""]
#[doc = "          },"]
#[doc = "          \"git\": {"]
#[doc = "            \"description\": \"Project's Git source\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"required\": ["]
#[doc = "              \"remotes\""]
#[doc = "            ],"]
#[doc = "            \"properties\": {"]
#[doc = "              \"checkoutFrom\": {"]
#[doc = "                \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"properties\": {"]
#[doc = "                  \"remote\": {"]
#[doc = "                    \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "                    \"type\": \"string\""]
#[doc = "                  },"]
#[doc = "                  \"revision\": {"]
#[doc = "                    \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "                    \"type\": \"string\""]
#[doc = "                  }"]
#[doc = "                },"]
#[doc = "                \"additionalProperties\": false"]
#[doc = "              },"]
#[doc = "              \"remotes\": {"]
#[doc = "                \"description\": \"The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"additionalProperties\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"additionalProperties\": false"]
#[doc = "          },"]
#[doc = "          \"name\": {"]
#[doc = "            \"description\": \"Project name\","]
#[doc = "            \"type\": \"string\","]
#[doc = "            \"maxLength\": 63,"]
#[doc = "            \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "          },"]
#[doc = "          \"zip\": {"]
#[doc = "            \"description\": \"Project's Zip source\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"properties\": {"]
#[doc = "              \"location\": {"]
#[doc = "                \"description\": \"Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH\","]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"additionalProperties\": false"]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"additionalProperties\": false"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"events\": {"]
#[doc = "      \"description\": \"Bindings of commands to events. Each command is referred-to by its name.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"postStart\": {"]
#[doc = "          \"description\": \"IDs of commands that should be executed after the devworkspace is completely started. In the case of Che-Theia, these commands should be executed after all plugins and extensions have started, including project cloning. This means that those commands are not triggered until the user opens the IDE in his browser.\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"postStop\": {"]
#[doc = "          \"description\": \"IDs of commands that should be executed after stopping the devworkspace.\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"preStart\": {"]
#[doc = "          \"description\": \"IDs of commands that should be executed before the devworkspace start. Kubernetes-wise, these commands would typically be executed in init containers of the devworkspace POD.\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"preStop\": {"]
#[doc = "          \"description\": \"IDs of commands that should be executed before stopping the devworkspace.\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"metadata\": {"]
#[doc = "      \"description\": \"Optional metadata\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"architectures\": {"]
#[doc = "          \"description\": \"Optional list of processor architectures that the devfile supports, empty list suggests that the devfile can be used on any architecture\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"description\": \"Architecture describes the architecture type\","]
#[doc = "            \"type\": \"string\","]
#[doc = "            \"enum\": ["]
#[doc = "              \"amd64\","]
#[doc = "              \"arm64\","]
#[doc = "              \"ppc64le\","]
#[doc = "              \"s390x\""]
#[doc = "            ]"]
#[doc = "          },"]
#[doc = "          \"uniqueItems\": true"]
#[doc = "        },"]
#[doc = "        \"attributes\": {"]
#[doc = "          \"description\": \"Map of implementation-dependant free-form YAML attributes. Deprecated, use the top-level attributes field instead.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"additionalProperties\": true"]
#[doc = "        },"]
#[doc = "        \"description\": {"]
#[doc = "          \"description\": \"Optional devfile description\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"displayName\": {"]
#[doc = "          \"description\": \"Optional devfile display name\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"globalMemoryLimit\": {"]
#[doc = "          \"description\": \"Optional devfile global memory limit\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"icon\": {"]
#[doc = "          \"description\": \"Optional devfile icon, can be a URI or a relative path in the project\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"language\": {"]
#[doc = "          \"description\": \"Optional devfile language\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"name\": {"]
#[doc = "          \"description\": \"Optional devfile name\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"projectType\": {"]
#[doc = "          \"description\": \"Optional devfile project type\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"provider\": {"]
#[doc = "          \"description\": \"Optional devfile provider information\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"supportUrl\": {"]
#[doc = "          \"description\": \"Optional link to a page that provides support information\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"tags\": {"]
#[doc = "          \"description\": \"Optional devfile tags\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"version\": {"]
#[doc = "          \"description\": \"Optional semver-compatible version\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"pattern\": \"^([0-9]+)\\\\.([0-9]+)\\\\.([0-9]+)(\\\\-[0-9a-z-]+(\\\\.[0-9a-z-]+)*)?(\\\\+[0-9A-Za-z-]+(\\\\.[0-9A-Za-z-]+)*)?$\""]
#[doc = "        },"]
#[doc = "        \"website\": {"]
#[doc = "          \"description\": \"Optional devfile website\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": true"]
#[doc = "    },"]
#[doc = "    \"parent\": {"]
#[doc = "      \"description\": \"Parent devworkspace template\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"required\": ["]
#[doc = "            \"uri\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"required\": ["]
#[doc = "            \"id\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"required\": ["]
#[doc = "            \"kubernetes\""]
#[doc = "          ]"]
#[doc = "        }"]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"attributes\": {"]
#[doc = "          \"description\": \"Overrides of attributes encapsulated in a parent devfile. Overriding is done according to K8S strategic merge patch standard rules.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"additionalProperties\": true"]
#[doc = "        },"]
#[doc = "        \"commands\": {"]
#[doc = "          \"description\": \"Overrides of commands encapsulated in a parent devfile or a plugin. Overriding is done according to K8S strategic merge patch standard rules.\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"oneOf\": ["]
#[doc = "              {"]
#[doc = "                \"required\": ["]
#[doc = "                  \"exec\""]
#[doc = "                ]"]
#[doc = "              },"]
#[doc = "              {"]
#[doc = "                \"required\": ["]
#[doc = "                  \"apply\""]
#[doc = "                ]"]
#[doc = "              },"]
#[doc = "              {"]
#[doc = "                \"required\": ["]
#[doc = "                  \"composite\""]
#[doc = "                ]"]
#[doc = "              }"]
#[doc = "            ],"]
#[doc = "            \"required\": ["]
#[doc = "              \"id\""]
#[doc = "            ],"]
#[doc = "            \"properties\": {"]
#[doc = "              \"apply\": {"]
#[doc = "                \"description\": \"Command that consists in applying a given component definition, typically bound to a devworkspace event.\\n\\nFor example, when an `apply` command is bound to a `preStart` event, and references a `container` component, it will start the container as a K8S initContainer in the devworkspace POD, unless the component has its `dedicatedPod` field set to `true`.\\n\\nWhen no `apply` command exist for a given component, it is assumed the component will be applied at devworkspace start by default, unless `deployByDefault` for that component is set to false.\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"properties\": {"]
#[doc = "                  \"component\": {"]
#[doc = "                    \"description\": \"Describes component that will be applied\","]
#[doc = "                    \"type\": \"string\""]
#[doc = "                  },"]
#[doc = "                  \"group\": {"]
#[doc = "                    \"description\": \"Defines the group this command is part of\","]
#[doc = "                    \"type\": \"object\","]
#[doc = "                    \"properties\": {"]
#[doc = "                      \"isDefault\": {"]
#[doc = "                        \"description\": \"Identifies the default command for a given group kind\","]
#[doc = "                        \"type\": \"boolean\""]
#[doc = "                      },"]
#[doc = "                      \"kind\": {"]
#[doc = "                        \"description\": \"Kind of group the command is part of\","]
#[doc = "                        \"type\": \"string\","]
#[doc = "                        \"enum\": ["]
#[doc = "                          \"build\","]
#[doc = "                          \"run\","]
#[doc = "                          \"test\","]
#[doc = "                          \"debug\","]
#[doc = "                          \"deploy\""]
#[doc = "                        ]"]
#[doc = "                      }"]
#[doc = "                    },"]
#[doc = "                    \"additionalProperties\": false"]
#[doc = "                  },"]
#[doc = "                  \"label\": {"]
#[doc = "                    \"description\": \"Optional label that provides a label for this command to be used in Editor UI menus for example\","]
#[doc = "                    \"type\": \"string\""]
#[doc = "                  }"]
#[doc = "                },"]
#[doc = "                \"additionalProperties\": false"]
#[doc = "              },"]
#[doc = "              \"attributes\": {"]
#[doc = "                \"description\": \"Map of implementation-dependant free-form YAML attributes.\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"additionalProperties\": true"]
#[doc = "              },"]
#[doc = "              \"composite\": {"]
#[doc = "                \"description\": \"Composite command that allows executing several sub-commands either sequentially or concurrently\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"properties\": {"]
#[doc = "                  \"commands\": {"]
#[doc = "                    \"description\": \"The commands that comprise this composite command\","]
#[doc = "                    \"type\": \"array\","]
#[doc = "                    \"items\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"group\": {"]
#[doc = "                    \"description\": \"Defines the group this command is part of\","]
#[doc = "                    \"type\": \"object\","]
#[doc = "                    \"properties\": {"]
#[doc = "                      \"isDefault\": {"]
#[doc = "                        \"description\": \"Identifies the default command for a given group kind\","]
#[doc = "                        \"type\": \"boolean\""]
#[doc = "                      },"]
#[doc = "                      \"kind\": {"]
#[doc = "                        \"description\": \"Kind of group the command is part of\","]
#[doc = "                        \"type\": \"string\","]
#[doc = "                        \"enum\": ["]
#[doc = "                          \"build\","]
#[doc = "                          \"run\","]
#[doc = "                          \"test\","]
#[doc = "                          \"debug\","]
#[doc = "                          \"deploy\""]
#[doc = "                        ]"]
#[doc = "                      }"]
#[doc = "                    },"]
#[doc = "                    \"additionalProperties\": false"]
#[doc = "                  },"]
#[doc = "                  \"label\": {"]
#[doc = "                    \"description\": \"Optional label that provides a label for this command to be used in Editor UI menus for example\","]
#[doc = "                    \"type\": \"string\""]
#[doc = "                  },"]
#[doc = "                  \"parallel\": {"]
#[doc = "                    \"description\": \"Indicates if the sub-commands should be executed concurrently\","]
#[doc = "                    \"type\": \"boolean\""]
#[doc = "                  }"]
#[doc = "                },"]
#[doc = "                \"additionalProperties\": false"]
#[doc = "              },"]
#[doc = "              \"exec\": {"]
#[doc = "                \"description\": \"CLI Command executed in an existing component container\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"properties\": {"]
#[doc = "                  \"commandLine\": {"]
#[doc = "                    \"description\": \"The actual command-line string\\n\\nSpecial variables that can be used:\\n\\n - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping.\\n\\n - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one.\","]
#[doc = "                    \"type\": \"string\""]
#[doc = "                  },"]
#[doc = "                  \"component\": {"]
#[doc = "                    \"description\": \"Describes component to which given action relates\","]
#[doc = "                    \"type\": \"string\""]
#[doc = "                  },"]
#[doc = "                  \"env\": {"]
#[doc = "                    \"description\": \"Optional list of environment variables that have to be set before running the command\","]
#[doc = "                    \"type\": \"array\","]
#[doc = "                    \"items\": {"]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"name\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"name\": {"]
#[doc = "                          \"type\": \"string\""]
#[doc = "                        },"]
#[doc = "                        \"value\": {"]
#[doc = "                          \"type\": \"string\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"group\": {"]
#[doc = "                    \"description\": \"Defines the group this command is part of\","]
#[doc = "                    \"type\": \"object\","]
#[doc = "                    \"properties\": {"]
#[doc = "                      \"isDefault\": {"]
#[doc = "                        \"description\": \"Identifies the default command for a given group kind\","]
#[doc = "                        \"type\": \"boolean\""]
#[doc = "                      },"]
#[doc = "                      \"kind\": {"]
#[doc = "                        \"description\": \"Kind of group the command is part of\","]
#[doc = "                        \"type\": \"string\","]
#[doc = "                        \"enum\": ["]
#[doc = "                          \"build\","]
#[doc = "                          \"run\","]
#[doc = "                          \"test\","]
#[doc = "                          \"debug\","]
#[doc = "                          \"deploy\""]
#[doc = "                        ]"]
#[doc = "                      }"]
#[doc = "                    },"]
#[doc = "                    \"additionalProperties\": false"]
#[doc = "                  },"]
#[doc = "                  \"hotReloadCapable\": {"]
#[doc = "                    \"description\": \"Specify whether the command is restarted or not when the source code changes. If set to `true` the command won't be restarted. A *hotReloadCapable* `run` or `debug` command is expected to handle file changes on its own and won't be restarted. A *hotReloadCapable* `build` command is expected to be executed only once and won't be executed again. This field is taken into account only for commands `build`, `run` and `debug` with `isDefault` set to `true`.\\n\\nDefault value is `false`\","]
#[doc = "                    \"type\": \"boolean\""]
#[doc = "                  },"]
#[doc = "                  \"label\": {"]
#[doc = "                    \"description\": \"Optional label that provides a label for this command to be used in Editor UI menus for example\","]
#[doc = "                    \"type\": \"string\""]
#[doc = "                  },"]
#[doc = "                  \"workingDir\": {"]
#[doc = "                    \"description\": \"Working directory where the command should be executed\\n\\nSpecial variables that can be used:\\n\\n - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping.\\n\\n - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one.\","]
#[doc = "                    \"type\": \"string\""]
#[doc = "                  }"]
#[doc = "                },"]
#[doc = "                \"additionalProperties\": false"]
#[doc = "              },"]
#[doc = "              \"id\": {"]
#[doc = "                \"description\": \"Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.\","]
#[doc = "                \"type\": \"string\","]
#[doc = "                \"maxLength\": 63,"]
#[doc = "                \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"additionalProperties\": false"]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"components\": {"]
#[doc = "          \"description\": \"Overrides of components encapsulated in a parent devfile or a plugin. Overriding is done according to K8S strategic merge patch standard rules.\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"oneOf\": ["]
#[doc = "              {"]
#[doc = "                \"required\": ["]
#[doc = "                  \"container\""]
#[doc = "                ]"]
#[doc = "              },"]
#[doc = "              {"]
#[doc = "                \"required\": ["]
#[doc = "                  \"kubernetes\""]
#[doc = "                ]"]
#[doc = "              },"]
#[doc = "              {"]
#[doc = "                \"required\": ["]
#[doc = "                  \"openshift\""]
#[doc = "                ]"]
#[doc = "              },"]
#[doc = "              {"]
#[doc = "                \"required\": ["]
#[doc = "                  \"volume\""]
#[doc = "                ]"]
#[doc = "              },"]
#[doc = "              {"]
#[doc = "                \"required\": ["]
#[doc = "                  \"image\""]
#[doc = "                ]"]
#[doc = "              }"]
#[doc = "            ],"]
#[doc = "            \"required\": ["]
#[doc = "              \"name\""]
#[doc = "            ],"]
#[doc = "            \"properties\": {"]
#[doc = "              \"attributes\": {"]
#[doc = "                \"description\": \"Map of implementation-dependant free-form YAML attributes.\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"additionalProperties\": true"]
#[doc = "              },"]
#[doc = "              \"container\": {"]
#[doc = "                \"description\": \"Allows adding and configuring devworkspace-related containers\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"properties\": {"]
#[doc = "                  \"annotation\": {"]
#[doc = "                    \"description\": \"Annotations that should be added to specific resources for this container\","]
#[doc = "                    \"type\": \"object\","]
#[doc = "                    \"properties\": {"]
#[doc = "                      \"deployment\": {"]
#[doc = "                        \"description\": \"Annotations to be added to deployment\","]
#[doc = "                        \"type\": \"object\","]
#[doc = "                        \"additionalProperties\": {"]
#[doc = "                          \"type\": \"string\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"service\": {"]
#[doc = "                        \"description\": \"Annotations to be added to service\","]
#[doc = "                        \"type\": \"object\","]
#[doc = "                        \"additionalProperties\": {"]
#[doc = "                          \"type\": \"string\""]
#[doc = "                        }"]
#[doc = "                      }"]
#[doc = "                    },"]
#[doc = "                    \"additionalProperties\": false"]
#[doc = "                  },"]
#[doc = "                  \"args\": {"]
#[doc = "                    \"description\": \"The arguments to supply to the command running the dockerimage component. The arguments are supplied either to the default command provided in the image or to the overridden command.\\n\\nDefaults to an empty array, meaning use whatever is defined in the image.\","]
#[doc = "                    \"type\": \"array\","]
#[doc = "                    \"items\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"command\": {"]
#[doc = "                    \"description\": \"The command to run in the dockerimage component instead of the default one provided in the image.\\n\\nDefaults to an empty array, meaning use whatever is defined in the image.\","]
#[doc = "                    \"type\": \"array\","]
#[doc = "                    \"items\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"cpuLimit\": {"]
#[doc = "                    \"type\": \"string\""]
#[doc = "                  },"]
#[doc = "                  \"cpuRequest\": {"]
#[doc = "                    \"type\": \"string\""]
#[doc = "                  },"]
#[doc = "                  \"dedicatedPod\": {"]
#[doc = "                    \"description\": \"Specify if a container should run in its own separated pod, instead of running as part of the main development environment pod.\\n\\nDefault value is `false`\","]
#[doc = "                    \"type\": \"boolean\""]
#[doc = "                  },"]
#[doc = "                  \"endpoints\": {"]
#[doc = "                    \"type\": \"array\","]
#[doc = "                    \"items\": {"]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"name\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"annotation\": {"]
#[doc = "                          \"description\": \"Annotations to be added to Kubernetes Ingress or Openshift Route\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"additionalProperties\": {"]
#[doc = "                            \"type\": \"string\""]
#[doc = "                          }"]
#[doc = "                        },"]
#[doc = "                        \"attributes\": {"]
#[doc = "                          \"description\": \"Map of implementation-dependant string-based free-form attributes.\\n\\nExamples of Che-specific attributes:\\n- cookiesAuthEnabled: \\\"true\\\" / \\\"false\\\",\\n- type: \\\"terminal\\\" / \\\"ide\\\" / \\\"ide-dev\\\",\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"additionalProperties\": true"]
#[doc = "                        },"]
#[doc = "                        \"exposure\": {"]
#[doc = "                          \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "                          \"type\": \"string\","]
#[doc = "                          \"enum\": ["]
#[doc = "                            \"public\","]
#[doc = "                            \"internal\","]
#[doc = "                            \"none\""]
#[doc = "                          ]"]
#[doc = "                        },"]
#[doc = "                        \"name\": {"]
#[doc = "                          \"type\": \"string\","]
#[doc = "                          \"maxLength\": 15,"]
#[doc = "                          \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "                        },"]
#[doc = "                        \"path\": {"]
#[doc = "                          \"description\": \"Path of the endpoint URL\","]
#[doc = "                          \"type\": \"string\""]
#[doc = "                        },"]
#[doc = "                        \"protocol\": {"]
#[doc = "                          \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "                          \"type\": \"string\","]
#[doc = "                          \"enum\": ["]
#[doc = "                            \"http\","]
#[doc = "                            \"https\","]
#[doc = "                            \"ws\","]
#[doc = "                            \"wss\","]
#[doc = "                            \"tcp\","]
#[doc = "                            \"udp\""]
#[doc = "                          ]"]
#[doc = "                        },"]
#[doc = "                        \"secure\": {"]
#[doc = "                          \"description\": \"Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.\","]
#[doc = "                          \"type\": \"boolean\""]
#[doc = "                        },"]
#[doc = "                        \"targetPort\": {"]
#[doc = "                          \"description\": \"Port number to be used within the container component. The same port cannot be used by two different container components.\","]
#[doc = "                          \"type\": \"integer\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"env\": {"]
#[doc = "                    \"description\": \"Environment variables used in this container.\\n\\nThe following variables are reserved and cannot be overridden via env:\\n\\n - `$PROJECTS_ROOT`\\n\\n - `$PROJECT_SOURCE`\","]
#[doc = "                    \"type\": \"array\","]
#[doc = "                    \"items\": {"]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"name\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"name\": {"]
#[doc = "                          \"type\": \"string\""]
#[doc = "                        },"]
#[doc = "                        \"value\": {"]
#[doc = "                          \"type\": \"string\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"image\": {"]
#[doc = "                    \"type\": \"string\""]
#[doc = "                  },"]
#[doc = "                  \"memoryLimit\": {"]
#[doc = "                    \"type\": \"string\""]
#[doc = "                  },"]
#[doc = "                  \"memoryRequest\": {"]
#[doc = "                    \"type\": \"string\""]
#[doc = "                  },"]
#[doc = "                  \"mountSources\": {"]
#[doc = "                    \"description\": \"Toggles whether or not the project source code should be mounted in the component.\\n\\nDefaults to true for all component types except plugins and components that set `dedicatedPod` to true.\","]
#[doc = "                    \"type\": \"boolean\""]
#[doc = "                  },"]
#[doc = "                  \"sourceMapping\": {"]
#[doc = "                    \"description\": \"Optional specification of the path in the container where project sources should be transferred/mounted when `mountSources` is `true`. When omitted, the default value of /projects is used.\","]
#[doc = "                    \"type\": \"string\""]
#[doc = "                  },"]
#[doc = "                  \"volumeMounts\": {"]
#[doc = "                    \"description\": \"List of volumes mounts that should be mounted is this container.\","]
#[doc = "                    \"type\": \"array\","]
#[doc = "                    \"items\": {"]
#[doc = "                      \"description\": \"Volume that should be mounted to a component container\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"name\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"name\": {"]
#[doc = "                          \"description\": \"The volume mount name is the name of an existing `Volume` component. If several containers mount the same volume name then they will reuse the same volume and will be able to access to the same files.\","]
#[doc = "                          \"type\": \"string\","]
#[doc = "                          \"maxLength\": 63,"]
#[doc = "                          \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "                        },"]
#[doc = "                        \"path\": {"]
#[doc = "                          \"description\": \"The path in the component container where the volume should be mounted. If not path is mentioned, default path is the is `/<name>`.\","]
#[doc = "                          \"type\": \"string\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    }"]
#[doc = "                  }"]
#[doc = "                },"]
#[doc = "                \"additionalProperties\": false"]
#[doc = "              },"]
#[doc = "              \"image\": {"]
#[doc = "                \"description\": \"Allows specifying the definition of an image for outer loop builds\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"oneOf\": ["]
#[doc = "                  {"]
#[doc = "                    \"required\": ["]
#[doc = "                      \"dockerfile\""]
#[doc = "                    ]"]
#[doc = "                  },"]
#[doc = "                  {"]
#[doc = "                    \"required\": ["]
#[doc = "                      \"autoBuild\""]
#[doc = "                    ]"]
#[doc = "                  }"]
#[doc = "                ],"]
#[doc = "                \"properties\": {"]
#[doc = "                  \"autoBuild\": {"]
#[doc = "                    \"description\": \"Defines if the image should be built during startup.\\n\\nDefault value is `false`\","]
#[doc = "                    \"type\": \"boolean\""]
#[doc = "                  },"]
#[doc = "                  \"dockerfile\": {"]
#[doc = "                    \"description\": \"Allows specifying dockerfile type build\","]
#[doc = "                    \"type\": \"object\","]
#[doc = "                    \"oneOf\": ["]
#[doc = "                      {"]
#[doc = "                        \"required\": ["]
#[doc = "                          \"uri\""]
#[doc = "                        ]"]
#[doc = "                      },"]
#[doc = "                      {"]
#[doc = "                        \"required\": ["]
#[doc = "                          \"devfileRegistry\""]
#[doc = "                        ]"]
#[doc = "                      },"]
#[doc = "                      {"]
#[doc = "                        \"required\": ["]
#[doc = "                          \"git\""]
#[doc = "                        ]"]
#[doc = "                      }"]
#[doc = "                    ],"]
#[doc = "                    \"properties\": {"]
#[doc = "                      \"args\": {"]
#[doc = "                        \"description\": \"The arguments to supply to the dockerfile build.\","]
#[doc = "                        \"type\": \"array\","]
#[doc = "                        \"items\": {"]
#[doc = "                          \"type\": \"string\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"buildContext\": {"]
#[doc = "                        \"description\": \"Path of source directory to establish build context. Defaults to ${PROJECT_SOURCE} in the container\","]
#[doc = "                        \"type\": \"string\""]
#[doc = "                      },"]
#[doc = "                      \"devfileRegistry\": {"]
#[doc = "                        \"description\": \"Dockerfile's Devfile Registry source\","]
#[doc = "                        \"type\": \"object\","]
#[doc = "                        \"properties\": {"]
#[doc = "                          \"id\": {"]
#[doc = "                            \"description\": \"Id in a devfile registry that contains a Dockerfile. The src in the OCI registry required for the Dockerfile build will be downloaded for building the image.\","]
#[doc = "                            \"type\": \"string\""]
#[doc = "                          },"]
#[doc = "                          \"registryUrl\": {"]
#[doc = "                            \"description\": \"Devfile Registry URL to pull the Dockerfile from when using the Devfile Registry as Dockerfile src. To ensure the Dockerfile gets resolved consistently in different environments, it is recommended to always specify the `devfileRegistryUrl` when `Id` is used.\","]
#[doc = "                            \"type\": \"string\""]
#[doc = "                          }"]
#[doc = "                        },"]
#[doc = "                        \"additionalProperties\": false"]
#[doc = "                      },"]
#[doc = "                      \"git\": {"]
#[doc = "                        \"description\": \"Dockerfile's Git source\","]
#[doc = "                        \"type\": \"object\","]
#[doc = "                        \"properties\": {"]
#[doc = "                          \"checkoutFrom\": {"]
#[doc = "                            \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "                            \"type\": \"object\","]
#[doc = "                            \"properties\": {"]
#[doc = "                              \"remote\": {"]
#[doc = "                                \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "                                \"type\": \"string\""]
#[doc = "                              },"]
#[doc = "                              \"revision\": {"]
#[doc = "                                \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "                                \"type\": \"string\""]
#[doc = "                              }"]
#[doc = "                            },"]
#[doc = "                            \"additionalProperties\": false"]
#[doc = "                          },"]
#[doc = "                          \"fileLocation\": {"]
#[doc = "                            \"description\": \"Location of the Dockerfile in the Git repository when using git as Dockerfile src. Defaults to Dockerfile.\","]
#[doc = "                            \"type\": \"string\""]
#[doc = "                          },"]
#[doc = "                          \"remotes\": {"]
#[doc = "                            \"description\": \"The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.\","]
#[doc = "                            \"type\": \"object\","]
#[doc = "                            \"additionalProperties\": {"]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            }"]
#[doc = "                          }"]
#[doc = "                        },"]
#[doc = "                        \"additionalProperties\": false"]
#[doc = "                      },"]
#[doc = "                      \"rootRequired\": {"]
#[doc = "                        \"description\": \"Specify if a privileged builder pod is required.\\n\\nDefault value is `false`\","]
#[doc = "                        \"type\": \"boolean\""]
#[doc = "                      },"]
#[doc = "                      \"uri\": {"]
#[doc = "                        \"description\": \"URI Reference of a Dockerfile. It can be a full URL or a relative URI from the current devfile as the base URI.\","]
#[doc = "                        \"type\": \"string\""]
#[doc = "                      }"]
#[doc = "                    },"]
#[doc = "                    \"additionalProperties\": false"]
#[doc = "                  },"]
#[doc = "                  \"imageName\": {"]
#[doc = "                    \"description\": \"Name of the image for the resulting outerloop build\","]
#[doc = "                    \"type\": \"string\""]
#[doc = "                  }"]
#[doc = "                },"]
#[doc = "                \"additionalProperties\": false"]
#[doc = "              },"]
#[doc = "              \"kubernetes\": {"]
#[doc = "                \"description\": \"Allows importing into the devworkspace the Kubernetes resources defined in a given manifest. For example this allows reusing the Kubernetes definitions used to deploy some runtime components in production.\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"oneOf\": ["]
#[doc = "                  {"]
#[doc = "                    \"required\": ["]
#[doc = "                      \"uri\""]
#[doc = "                    ]"]
#[doc = "                  },"]
#[doc = "                  {"]
#[doc = "                    \"required\": ["]
#[doc = "                      \"inlined\""]
#[doc = "                    ]"]
#[doc = "                  }"]
#[doc = "                ],"]
#[doc = "                \"properties\": {"]
#[doc = "                  \"deployByDefault\": {"]
#[doc = "                    \"description\": \"Defines if the component should be deployed during startup.\\n\\nDefault value is `false`\","]
#[doc = "                    \"type\": \"boolean\""]
#[doc = "                  },"]
#[doc = "                  \"endpoints\": {"]
#[doc = "                    \"type\": \"array\","]
#[doc = "                    \"items\": {"]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"name\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"annotation\": {"]
#[doc = "                          \"description\": \"Annotations to be added to Kubernetes Ingress or Openshift Route\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"additionalProperties\": {"]
#[doc = "                            \"type\": \"string\""]
#[doc = "                          }"]
#[doc = "                        },"]
#[doc = "                        \"attributes\": {"]
#[doc = "                          \"description\": \"Map of implementation-dependant string-based free-form attributes.\\n\\nExamples of Che-specific attributes:\\n- cookiesAuthEnabled: \\\"true\\\" / \\\"false\\\",\\n- type: \\\"terminal\\\" / \\\"ide\\\" / \\\"ide-dev\\\",\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"additionalProperties\": true"]
#[doc = "                        },"]
#[doc = "                        \"exposure\": {"]
#[doc = "                          \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "                          \"type\": \"string\","]
#[doc = "                          \"enum\": ["]
#[doc = "                            \"public\","]
#[doc = "                            \"internal\","]
#[doc = "                            \"none\""]
#[doc = "                          ]"]
#[doc = "                        },"]
#[doc = "                        \"name\": {"]
#[doc = "                          \"type\": \"string\","]
#[doc = "                          \"maxLength\": 15,"]
#[doc = "                          \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "                        },"]
#[doc = "                        \"path\": {"]
#[doc = "                          \"description\": \"Path of the endpoint URL\","]
#[doc = "                          \"type\": \"string\""]
#[doc = "                        },"]
#[doc = "                        \"protocol\": {"]
#[doc = "                          \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "                          \"type\": \"string\","]
#[doc = "                          \"enum\": ["]
#[doc = "                            \"http\","]
#[doc = "                            \"https\","]
#[doc = "                            \"ws\","]
#[doc = "                            \"wss\","]
#[doc = "                            \"tcp\","]
#[doc = "                            \"udp\""]
#[doc = "                          ]"]
#[doc = "                        },"]
#[doc = "                        \"secure\": {"]
#[doc = "                          \"description\": \"Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.\","]
#[doc = "                          \"type\": \"boolean\""]
#[doc = "                        },"]
#[doc = "                        \"targetPort\": {"]
#[doc = "                          \"description\": \"Port number to be used within the container component. The same port cannot be used by two different container components.\","]
#[doc = "                          \"type\": \"integer\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"inlined\": {"]
#[doc = "                    \"description\": \"Inlined manifest\","]
#[doc = "                    \"type\": \"string\""]
#[doc = "                  },"]
#[doc = "                  \"uri\": {"]
#[doc = "                    \"description\": \"Location in a file fetched from a uri.\","]
#[doc = "                    \"type\": \"string\""]
#[doc = "                  }"]
#[doc = "                },"]
#[doc = "                \"additionalProperties\": false"]
#[doc = "              },"]
#[doc = "              \"name\": {"]
#[doc = "                \"description\": \"Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin.\","]
#[doc = "                \"type\": \"string\","]
#[doc = "                \"maxLength\": 63,"]
#[doc = "                \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "              },"]
#[doc = "              \"openshift\": {"]
#[doc = "                \"description\": \"Allows importing into the devworkspace the OpenShift resources defined in a given manifest. For example this allows reusing the OpenShift definitions used to deploy some runtime components in production.\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"oneOf\": ["]
#[doc = "                  {"]
#[doc = "                    \"required\": ["]
#[doc = "                      \"uri\""]
#[doc = "                    ]"]
#[doc = "                  },"]
#[doc = "                  {"]
#[doc = "                    \"required\": ["]
#[doc = "                      \"inlined\""]
#[doc = "                    ]"]
#[doc = "                  }"]
#[doc = "                ],"]
#[doc = "                \"properties\": {"]
#[doc = "                  \"deployByDefault\": {"]
#[doc = "                    \"description\": \"Defines if the component should be deployed during startup.\\n\\nDefault value is `false`\","]
#[doc = "                    \"type\": \"boolean\""]
#[doc = "                  },"]
#[doc = "                  \"endpoints\": {"]
#[doc = "                    \"type\": \"array\","]
#[doc = "                    \"items\": {"]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"name\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"annotation\": {"]
#[doc = "                          \"description\": \"Annotations to be added to Kubernetes Ingress or Openshift Route\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"additionalProperties\": {"]
#[doc = "                            \"type\": \"string\""]
#[doc = "                          }"]
#[doc = "                        },"]
#[doc = "                        \"attributes\": {"]
#[doc = "                          \"description\": \"Map of implementation-dependant string-based free-form attributes.\\n\\nExamples of Che-specific attributes:\\n- cookiesAuthEnabled: \\\"true\\\" / \\\"false\\\",\\n- type: \\\"terminal\\\" / \\\"ide\\\" / \\\"ide-dev\\\",\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"additionalProperties\": true"]
#[doc = "                        },"]
#[doc = "                        \"exposure\": {"]
#[doc = "                          \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "                          \"type\": \"string\","]
#[doc = "                          \"enum\": ["]
#[doc = "                            \"public\","]
#[doc = "                            \"internal\","]
#[doc = "                            \"none\""]
#[doc = "                          ]"]
#[doc = "                        },"]
#[doc = "                        \"name\": {"]
#[doc = "                          \"type\": \"string\","]
#[doc = "                          \"maxLength\": 15,"]
#[doc = "                          \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "                        },"]
#[doc = "                        \"path\": {"]
#[doc = "                          \"description\": \"Path of the endpoint URL\","]
#[doc = "                          \"type\": \"string\""]
#[doc = "                        },"]
#[doc = "                        \"protocol\": {"]
#[doc = "                          \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "                          \"type\": \"string\","]
#[doc = "                          \"enum\": ["]
#[doc = "                            \"http\","]
#[doc = "                            \"https\","]
#[doc = "                            \"ws\","]
#[doc = "                            \"wss\","]
#[doc = "                            \"tcp\","]
#[doc = "                            \"udp\""]
#[doc = "                          ]"]
#[doc = "                        },"]
#[doc = "                        \"secure\": {"]
#[doc = "                          \"description\": \"Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.\","]
#[doc = "                          \"type\": \"boolean\""]
#[doc = "                        },"]
#[doc = "                        \"targetPort\": {"]
#[doc = "                          \"description\": \"Port number to be used within the container component. The same port cannot be used by two different container components.\","]
#[doc = "                          \"type\": \"integer\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"inlined\": {"]
#[doc = "                    \"description\": \"Inlined manifest\","]
#[doc = "                    \"type\": \"string\""]
#[doc = "                  },"]
#[doc = "                  \"uri\": {"]
#[doc = "                    \"description\": \"Location in a file fetched from a uri.\","]
#[doc = "                    \"type\": \"string\""]
#[doc = "                  }"]
#[doc = "                },"]
#[doc = "                \"additionalProperties\": false"]
#[doc = "              },"]
#[doc = "              \"volume\": {"]
#[doc = "                \"description\": \"Allows specifying the definition of a volume shared by several other components\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"properties\": {"]
#[doc = "                  \"ephemeral\": {"]
#[doc = "                    \"description\": \"Ephemeral volumes are not stored persistently across restarts. Defaults to false\","]
#[doc = "                    \"type\": \"boolean\""]
#[doc = "                  },"]
#[doc = "                  \"size\": {"]
#[doc = "                    \"description\": \"Size of the volume\","]
#[doc = "                    \"type\": \"string\""]
#[doc = "                  }"]
#[doc = "                },"]
#[doc = "                \"additionalProperties\": false"]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"additionalProperties\": false"]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"dependentProjects\": {"]
#[doc = "          \"description\": \"Overrides of dependentProjects encapsulated in a parent devfile. Overriding is done according to K8S strategic merge patch standard rules.\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"oneOf\": ["]
#[doc = "              {"]
#[doc = "                \"required\": ["]
#[doc = "                  \"git\""]
#[doc = "                ]"]
#[doc = "              },"]
#[doc = "              {"]
#[doc = "                \"required\": ["]
#[doc = "                  \"zip\""]
#[doc = "                ]"]
#[doc = "              }"]
#[doc = "            ],"]
#[doc = "            \"required\": ["]
#[doc = "              \"name\""]
#[doc = "            ],"]
#[doc = "            \"properties\": {"]
#[doc = "              \"attributes\": {"]
#[doc = "                \"description\": \"Map of implementation-dependant free-form YAML attributes.\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"additionalProperties\": true"]
#[doc = "              },"]
#[doc = "              \"clonePath\": {"]
#[doc = "                \"description\": \"Path relative to the root of the projects to which this project should be cloned into. This is a unix-style relative path (i.e. uses forward slashes). The path is invalid if it is absolute or tries to escape the project root through the usage of '..'. If not specified, defaults to the project name.\","]
#[doc = "                \"type\": \"string\""]
#[doc = "              },"]
#[doc = "              \"git\": {"]
#[doc = "                \"description\": \"Project's Git source\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"properties\": {"]
#[doc = "                  \"checkoutFrom\": {"]
#[doc = "                    \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "                    \"type\": \"object\","]
#[doc = "                    \"properties\": {"]
#[doc = "                      \"remote\": {"]
#[doc = "                        \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "                        \"type\": \"string\""]
#[doc = "                      },"]
#[doc = "                      \"revision\": {"]
#[doc = "                        \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "                        \"type\": \"string\""]
#[doc = "                      }"]
#[doc = "                    },"]
#[doc = "                    \"additionalProperties\": false"]
#[doc = "                  },"]
#[doc = "                  \"remotes\": {"]
#[doc = "                    \"description\": \"The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.\","]
#[doc = "                    \"type\": \"object\","]
#[doc = "                    \"additionalProperties\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  }"]
#[doc = "                },"]
#[doc = "                \"additionalProperties\": false"]
#[doc = "              },"]
#[doc = "              \"name\": {"]
#[doc = "                \"description\": \"Project name\","]
#[doc = "                \"type\": \"string\","]
#[doc = "                \"maxLength\": 63,"]
#[doc = "                \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "              },"]
#[doc = "              \"zip\": {"]
#[doc = "                \"description\": \"Project's Zip source\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"properties\": {"]
#[doc = "                  \"location\": {"]
#[doc = "                    \"description\": \"Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH\","]
#[doc = "                    \"type\": \"string\""]
#[doc = "                  }"]
#[doc = "                },"]
#[doc = "                \"additionalProperties\": false"]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"additionalProperties\": false"]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"id\": {"]
#[doc = "          \"description\": \"Id in a registry that contains a Devfile yaml file\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"kubernetes\": {"]
#[doc = "          \"description\": \"Reference to a Kubernetes CRD of type DevWorkspaceTemplate\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"name\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"name\": {"]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"namespace\": {"]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"projects\": {"]
#[doc = "          \"description\": \"Overrides of projects encapsulated in a parent devfile. Overriding is done according to K8S strategic merge patch standard rules.\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"oneOf\": ["]
#[doc = "              {"]
#[doc = "                \"required\": ["]
#[doc = "                  \"git\""]
#[doc = "                ]"]
#[doc = "              },"]
#[doc = "              {"]
#[doc = "                \"required\": ["]
#[doc = "                  \"zip\""]
#[doc = "                ]"]
#[doc = "              }"]
#[doc = "            ],"]
#[doc = "            \"required\": ["]
#[doc = "              \"name\""]
#[doc = "            ],"]
#[doc = "            \"properties\": {"]
#[doc = "              \"attributes\": {"]
#[doc = "                \"description\": \"Map of implementation-dependant free-form YAML attributes.\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"additionalProperties\": true"]
#[doc = "              },"]
#[doc = "              \"clonePath\": {"]
#[doc = "                \"description\": \"Path relative to the root of the projects to which this project should be cloned into. This is a unix-style relative path (i.e. uses forward slashes). The path is invalid if it is absolute or tries to escape the project root through the usage of '..'. If not specified, defaults to the project name.\","]
#[doc = "                \"type\": \"string\""]
#[doc = "              },"]
#[doc = "              \"git\": {"]
#[doc = "                \"description\": \"Project's Git source\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"properties\": {"]
#[doc = "                  \"checkoutFrom\": {"]
#[doc = "                    \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "                    \"type\": \"object\","]
#[doc = "                    \"properties\": {"]
#[doc = "                      \"remote\": {"]
#[doc = "                        \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "                        \"type\": \"string\""]
#[doc = "                      },"]
#[doc = "                      \"revision\": {"]
#[doc = "                        \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "                        \"type\": \"string\""]
#[doc = "                      }"]
#[doc = "                    },"]
#[doc = "                    \"additionalProperties\": false"]
#[doc = "                  },"]
#[doc = "                  \"remotes\": {"]
#[doc = "                    \"description\": \"The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.\","]
#[doc = "                    \"type\": \"object\","]
#[doc = "                    \"additionalProperties\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  }"]
#[doc = "                },"]
#[doc = "                \"additionalProperties\": false"]
#[doc = "              },"]
#[doc = "              \"name\": {"]
#[doc = "                \"description\": \"Project name\","]
#[doc = "                \"type\": \"string\","]
#[doc = "                \"maxLength\": 63,"]
#[doc = "                \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "              },"]
#[doc = "              \"zip\": {"]
#[doc = "                \"description\": \"Project's Zip source\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"properties\": {"]
#[doc = "                  \"location\": {"]
#[doc = "                    \"description\": \"Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH\","]
#[doc = "                    \"type\": \"string\""]
#[doc = "                  }"]
#[doc = "                },"]
#[doc = "                \"additionalProperties\": false"]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"additionalProperties\": false"]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"registryUrl\": {"]
#[doc = "          \"description\": \"Registry URL to pull the parent devfile from when using id in the parent reference. To ensure the parent devfile gets resolved consistently in different environments, it is recommended to always specify the `registryUrl` when `id` is used.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"starterProjects\": {"]
#[doc = "          \"description\": \"Overrides of starterProjects encapsulated in a parent devfile. Overriding is done according to K8S strategic merge patch standard rules.\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"oneOf\": ["]
#[doc = "              {"]
#[doc = "                \"required\": ["]
#[doc = "                  \"git\""]
#[doc = "                ]"]
#[doc = "              },"]
#[doc = "              {"]
#[doc = "                \"required\": ["]
#[doc = "                  \"zip\""]
#[doc = "                ]"]
#[doc = "              }"]
#[doc = "            ],"]
#[doc = "            \"required\": ["]
#[doc = "              \"name\""]
#[doc = "            ],"]
#[doc = "            \"properties\": {"]
#[doc = "              \"attributes\": {"]
#[doc = "                \"description\": \"Map of implementation-dependant free-form YAML attributes.\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"additionalProperties\": true"]
#[doc = "              },"]
#[doc = "              \"description\": {"]
#[doc = "                \"description\": \"Description of a starter project\","]
#[doc = "                \"type\": \"string\""]
#[doc = "              },"]
#[doc = "              \"git\": {"]
#[doc = "                \"description\": \"Project's Git source\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"properties\": {"]
#[doc = "                  \"checkoutFrom\": {"]
#[doc = "                    \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "                    \"type\": \"object\","]
#[doc = "                    \"properties\": {"]
#[doc = "                      \"remote\": {"]
#[doc = "                        \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "                        \"type\": \"string\""]
#[doc = "                      },"]
#[doc = "                      \"revision\": {"]
#[doc = "                        \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "                        \"type\": \"string\""]
#[doc = "                      }"]
#[doc = "                    },"]
#[doc = "                    \"additionalProperties\": false"]
#[doc = "                  },"]
#[doc = "                  \"remotes\": {"]
#[doc = "                    \"description\": \"The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.\","]
#[doc = "                    \"type\": \"object\","]
#[doc = "                    \"additionalProperties\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  }"]
#[doc = "                },"]
#[doc = "                \"additionalProperties\": false"]
#[doc = "              },"]
#[doc = "              \"name\": {"]
#[doc = "                \"description\": \"Project name\","]
#[doc = "                \"type\": \"string\","]
#[doc = "                \"maxLength\": 63,"]
#[doc = "                \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "              },"]
#[doc = "              \"subDir\": {"]
#[doc = "                \"description\": \"Sub-directory from a starter project to be used as root for starter project.\","]
#[doc = "                \"type\": \"string\""]
#[doc = "              },"]
#[doc = "              \"zip\": {"]
#[doc = "                \"description\": \"Project's Zip source\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"properties\": {"]
#[doc = "                  \"location\": {"]
#[doc = "                    \"description\": \"Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH\","]
#[doc = "                    \"type\": \"string\""]
#[doc = "                  }"]
#[doc = "                },"]
#[doc = "                \"additionalProperties\": false"]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"additionalProperties\": false"]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"uri\": {"]
#[doc = "          \"description\": \"URI Reference of a parent devfile YAML file. It can be a full URL or a relative URI with the current devfile as the base URI.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"variables\": {"]
#[doc = "          \"description\": \"Overrides of variables encapsulated in a parent devfile. Overriding is done according to K8S strategic merge patch standard rules.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"additionalProperties\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"version\": {"]
#[doc = "          \"description\": \"Specific stack/sample version to pull the parent devfile from, when using id in the parent reference. To specify `version`, `id` must be defined and used as the import reference source. `version` can be either a specific stack version, or `latest`. If no `version` specified, default version will be used.\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"pattern\": \"^(latest)|(([1-9])\\\\.([0-9]+)\\\\.([0-9]+)(\\\\-[0-9a-z-]+(\\\\.[0-9a-z-]+)*)?(\\\\+[0-9A-Za-z-]+(\\\\.[0-9A-Za-z-]+)*)?)$\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"projects\": {"]
#[doc = "      \"description\": \"Projects worked on in the devworkspace, containing names and sources locations\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"object\","]
#[doc = "        \"oneOf\": ["]
#[doc = "          {"]
#[doc = "            \"required\": ["]
#[doc = "              \"git\""]
#[doc = "            ]"]
#[doc = "          },"]
#[doc = "          {"]
#[doc = "            \"required\": ["]
#[doc = "              \"zip\""]
#[doc = "            ]"]
#[doc = "          }"]
#[doc = "        ],"]
#[doc = "        \"required\": ["]
#[doc = "          \"name\""]
#[doc = "        ],"]
#[doc = "        \"properties\": {"]
#[doc = "          \"attributes\": {"]
#[doc = "            \"description\": \"Map of implementation-dependant free-form YAML attributes.\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"additionalProperties\": true"]
#[doc = "          },"]
#[doc = "          \"clonePath\": {"]
#[doc = "            \"description\": \"Path relative to the root of the projects to which this project should be cloned into. This is a unix-style relative path (i.e. uses forward slashes). The path is invalid if it is absolute or tries to escape the project root through the usage of '..'. If not specified, defaults to the project name.\","]
#[doc = "            \"type\": \"string\""]
#[doc = "          },"]
#[doc = "          \"git\": {"]
#[doc = "            \"description\": \"Project's Git source\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"required\": ["]
#[doc = "              \"remotes\""]
#[doc = "            ],"]
#[doc = "            \"properties\": {"]
#[doc = "              \"checkoutFrom\": {"]
#[doc = "                \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"properties\": {"]
#[doc = "                  \"remote\": {"]
#[doc = "                    \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "                    \"type\": \"string\""]
#[doc = "                  },"]
#[doc = "                  \"revision\": {"]
#[doc = "                    \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "                    \"type\": \"string\""]
#[doc = "                  }"]
#[doc = "                },"]
#[doc = "                \"additionalProperties\": false"]
#[doc = "              },"]
#[doc = "              \"remotes\": {"]
#[doc = "                \"description\": \"The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"additionalProperties\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"additionalProperties\": false"]
#[doc = "          },"]
#[doc = "          \"name\": {"]
#[doc = "            \"description\": \"Project name\","]
#[doc = "            \"type\": \"string\","]
#[doc = "            \"maxLength\": 63,"]
#[doc = "            \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "          },"]
#[doc = "          \"zip\": {"]
#[doc = "            \"description\": \"Project's Zip source\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"properties\": {"]
#[doc = "              \"location\": {"]
#[doc = "                \"description\": \"Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH\","]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"additionalProperties\": false"]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"additionalProperties\": false"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"schemaVersion\": {"]
#[doc = "      \"description\": \"Devfile schema version\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"pattern\": \"^([2-9])\\\\.([0-9]+)\\\\.([0-9]+)(\\\\-[0-9a-z-]+(\\\\.[0-9a-z-]+)*)?(\\\\+[0-9A-Za-z-]+(\\\\.[0-9A-Za-z-]+)*)?$\""]
#[doc = "    },"]
#[doc = "    \"starterProjects\": {"]
#[doc = "      \"description\": \"StarterProjects is a project that can be used as a starting point when bootstrapping new projects\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"object\","]
#[doc = "        \"oneOf\": ["]
#[doc = "          {"]
#[doc = "            \"required\": ["]
#[doc = "              \"git\""]
#[doc = "            ]"]
#[doc = "          },"]
#[doc = "          {"]
#[doc = "            \"required\": ["]
#[doc = "              \"zip\""]
#[doc = "            ]"]
#[doc = "          }"]
#[doc = "        ],"]
#[doc = "        \"required\": ["]
#[doc = "          \"name\""]
#[doc = "        ],"]
#[doc = "        \"properties\": {"]
#[doc = "          \"attributes\": {"]
#[doc = "            \"description\": \"Map of implementation-dependant free-form YAML attributes.\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"additionalProperties\": true"]
#[doc = "          },"]
#[doc = "          \"description\": {"]
#[doc = "            \"description\": \"Description of a starter project\","]
#[doc = "            \"type\": \"string\""]
#[doc = "          },"]
#[doc = "          \"git\": {"]
#[doc = "            \"description\": \"Project's Git source\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"required\": ["]
#[doc = "              \"remotes\""]
#[doc = "            ],"]
#[doc = "            \"properties\": {"]
#[doc = "              \"checkoutFrom\": {"]
#[doc = "                \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"properties\": {"]
#[doc = "                  \"remote\": {"]
#[doc = "                    \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "                    \"type\": \"string\""]
#[doc = "                  },"]
#[doc = "                  \"revision\": {"]
#[doc = "                    \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "                    \"type\": \"string\""]
#[doc = "                  }"]
#[doc = "                },"]
#[doc = "                \"additionalProperties\": false"]
#[doc = "              },"]
#[doc = "              \"remotes\": {"]
#[doc = "                \"description\": \"The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"additionalProperties\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"additionalProperties\": false"]
#[doc = "          },"]
#[doc = "          \"name\": {"]
#[doc = "            \"description\": \"Project name\","]
#[doc = "            \"type\": \"string\","]
#[doc = "            \"maxLength\": 63,"]
#[doc = "            \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "          },"]
#[doc = "          \"subDir\": {"]
#[doc = "            \"description\": \"Sub-directory from a starter project to be used as root for starter project.\","]
#[doc = "            \"type\": \"string\""]
#[doc = "          },"]
#[doc = "          \"zip\": {"]
#[doc = "            \"description\": \"Project's Zip source\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"properties\": {"]
#[doc = "              \"location\": {"]
#[doc = "                \"description\": \"Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH\","]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"additionalProperties\": false"]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"additionalProperties\": false"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"variables\": {"]
#[doc = "      \"description\": \"Map of key-value variables used for string replacement in the devfile. Values can be referenced via {{variable-key}} to replace the corresponding value in string fields in the devfile. Replacement cannot be used for\\n\\n - schemaVersion, metadata, parent source\\n\\n - element identifiers, e.g. command id, component name, endpoint name, project name\\n\\n - references to identifiers, e.g. in events, a command's component, container's volume mount name\\n\\n - string enums, e.g. command group kind, endpoint exposure\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
pub struct DevfileSchemaVersion222 {
    #[doc = "Map of implementation-dependant free-form YAML attributes."]
    #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
    pub attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
    #[doc = "Predefined, ready-to-use, devworkspace-related commands"]
    #[serde(default, skip_serializing_if = "::std::vec::Vec::is_empty")]
    pub commands: ::std::vec::Vec<DevfileSchemaVersion222CommandsItem>,
    #[doc = "List of the devworkspace components, such as editor and plugins, user-provided containers, or other types of components"]
    #[serde(default, skip_serializing_if = "::std::vec::Vec::is_empty")]
    pub components: ::std::vec::Vec<DevfileSchemaVersion222ComponentsItem>,
    #[doc = "Additional projects related to the main project in the devfile, contianing names and sources locations"]
    #[serde(
        rename = "dependentProjects",
        default,
        skip_serializing_if = "::std::vec::Vec::is_empty"
    )]
    pub dependent_projects: ::std::vec::Vec<DevfileSchemaVersion222DependentProjectsItem>,
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub events: ::std::option::Option<DevfileSchemaVersion222Events>,
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub metadata: ::std::option::Option<DevfileSchemaVersion222Metadata>,
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub parent: ::std::option::Option<DevfileSchemaVersion222Parent>,
    #[doc = "Projects worked on in the devworkspace, containing names and sources locations"]
    #[serde(default, skip_serializing_if = "::std::vec::Vec::is_empty")]
    pub projects: ::std::vec::Vec<DevfileSchemaVersion222ProjectsItem>,
    #[doc = "Devfile schema version"]
    #[serde(rename = "schemaVersion")]
    pub schema_version: DevfileSchemaVersion222SchemaVersion,
    #[doc = "StarterProjects is a project that can be used as a starting point when bootstrapping new projects"]
    #[serde(
        rename = "starterProjects",
        default,
        skip_serializing_if = "::std::vec::Vec::is_empty"
    )]
    pub starter_projects: ::std::vec::Vec<DevfileSchemaVersion222StarterProjectsItem>,
    #[doc = "Map of key-value variables used for string replacement in the devfile. Values can be referenced via {{variable-key}} to replace the corresponding value in string fields in the devfile. Replacement cannot be used for\n\n - schemaVersion, metadata, parent source\n\n - element identifiers, e.g. command id, component name, endpoint name, project name\n\n - references to identifiers, e.g. in events, a command's component, container's volume mount name\n\n - string enums, e.g. command group kind, endpoint exposure"]
    #[serde(
        default,
        skip_serializing_if = ":: std :: collections :: HashMap::is_empty"
    )]
    pub variables: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
}
impl ::std::convert::From<&DevfileSchemaVersion222> for DevfileSchemaVersion222 {
    fn from(value: &DevfileSchemaVersion222) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222 {
    pub fn builder() -> builder::DevfileSchemaVersion222 {
        Default::default()
    }
}
#[doc = "`DevfileSchemaVersion222CommandsItem`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"exec\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"apply\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"composite\""]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  ],"]
#[doc = "  \"required\": ["]
#[doc = "    \"id\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"apply\": {"]
#[doc = "      \"description\": \"Command that consists in applying a given component definition, typically bound to a devworkspace event.\\n\\nFor example, when an `apply` command is bound to a `preStart` event, and references a `container` component, it will start the container as a K8S initContainer in the devworkspace POD, unless the component has its `dedicatedPod` field set to `true`.\\n\\nWhen no `apply` command exist for a given component, it is assumed the component will be applied at devworkspace start by default, unless `deployByDefault` for that component is set to false.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"component\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"component\": {"]
#[doc = "          \"description\": \"Describes component that will be applied\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"group\": {"]
#[doc = "          \"description\": \"Defines the group this command is part of\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"kind\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"isDefault\": {"]
#[doc = "              \"description\": \"Identifies the default command for a given group kind\","]
#[doc = "              \"type\": \"boolean\""]
#[doc = "            },"]
#[doc = "            \"kind\": {"]
#[doc = "              \"description\": \"Kind of group the command is part of\","]
#[doc = "              \"type\": \"string\","]
#[doc = "              \"enum\": ["]
#[doc = "                \"build\","]
#[doc = "                \"run\","]
#[doc = "                \"test\","]
#[doc = "                \"debug\","]
#[doc = "                \"deploy\""]
#[doc = "              ]"]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"label\": {"]
#[doc = "          \"description\": \"Optional label that provides a label for this command to be used in Editor UI menus for example\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"attributes\": {"]
#[doc = "      \"description\": \"Map of implementation-dependant free-form YAML attributes.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": true"]
#[doc = "    },"]
#[doc = "    \"composite\": {"]
#[doc = "      \"description\": \"Composite command that allows executing several sub-commands either sequentially or concurrently\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"commands\": {"]
#[doc = "          \"description\": \"The commands that comprise this composite command\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"group\": {"]
#[doc = "          \"description\": \"Defines the group this command is part of\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"kind\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"isDefault\": {"]
#[doc = "              \"description\": \"Identifies the default command for a given group kind\","]
#[doc = "              \"type\": \"boolean\""]
#[doc = "            },"]
#[doc = "            \"kind\": {"]
#[doc = "              \"description\": \"Kind of group the command is part of\","]
#[doc = "              \"type\": \"string\","]
#[doc = "              \"enum\": ["]
#[doc = "                \"build\","]
#[doc = "                \"run\","]
#[doc = "                \"test\","]
#[doc = "                \"debug\","]
#[doc = "                \"deploy\""]
#[doc = "              ]"]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"label\": {"]
#[doc = "          \"description\": \"Optional label that provides a label for this command to be used in Editor UI menus for example\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"parallel\": {"]
#[doc = "          \"description\": \"Indicates if the sub-commands should be executed concurrently\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"exec\": {"]
#[doc = "      \"description\": \"CLI Command executed in an existing component container\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"commandLine\","]
#[doc = "        \"component\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"commandLine\": {"]
#[doc = "          \"description\": \"The actual command-line string\\n\\nSpecial variables that can be used:\\n\\n - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping.\\n\\n - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"component\": {"]
#[doc = "          \"description\": \"Describes component to which given action relates\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"env\": {"]
#[doc = "          \"description\": \"Optional list of environment variables that have to be set before running the command\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"required\": ["]
#[doc = "              \"name\","]
#[doc = "              \"value\""]
#[doc = "            ],"]
#[doc = "            \"properties\": {"]
#[doc = "              \"name\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              },"]
#[doc = "              \"value\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"additionalProperties\": false"]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"group\": {"]
#[doc = "          \"description\": \"Defines the group this command is part of\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"kind\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"isDefault\": {"]
#[doc = "              \"description\": \"Identifies the default command for a given group kind\","]
#[doc = "              \"type\": \"boolean\""]
#[doc = "            },"]
#[doc = "            \"kind\": {"]
#[doc = "              \"description\": \"Kind of group the command is part of\","]
#[doc = "              \"type\": \"string\","]
#[doc = "              \"enum\": ["]
#[doc = "                \"build\","]
#[doc = "                \"run\","]
#[doc = "                \"test\","]
#[doc = "                \"debug\","]
#[doc = "                \"deploy\""]
#[doc = "              ]"]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"hotReloadCapable\": {"]
#[doc = "          \"description\": \"Specify whether the command is restarted or not when the source code changes. If set to `true` the command won't be restarted. A *hotReloadCapable* `run` or `debug` command is expected to handle file changes on its own and won't be restarted. A *hotReloadCapable* `build` command is expected to be executed only once and won't be executed again. This field is taken into account only for commands `build`, `run` and `debug` with `isDefault` set to `true`.\\n\\nDefault value is `false`\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"label\": {"]
#[doc = "          \"description\": \"Optional label that provides a label for this command to be used in Editor UI menus for example\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"workingDir\": {"]
#[doc = "          \"description\": \"Working directory where the command should be executed\\n\\nSpecial variables that can be used:\\n\\n - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping.\\n\\n - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"description\": \"Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"maxLength\": 63,"]
#[doc = "      \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged, deny_unknown_fields)]
pub enum DevfileSchemaVersion222CommandsItem {
    Variant0 {
        #[doc = "Map of implementation-dependant free-form YAML attributes."]
        #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
        attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
        exec: DevfileSchemaVersion222CommandsItemVariant0Exec,
        #[doc = "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events."]
        id: DevfileSchemaVersion222CommandsItemVariant0Id,
    },
    Variant1 {
        apply: DevfileSchemaVersion222CommandsItemVariant1Apply,
        #[doc = "Map of implementation-dependant free-form YAML attributes."]
        #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
        attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
        #[doc = "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events."]
        id: DevfileSchemaVersion222CommandsItemVariant1Id,
    },
    Variant2 {
        #[doc = "Map of implementation-dependant free-form YAML attributes."]
        #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
        attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
        composite: DevfileSchemaVersion222CommandsItemVariant2Composite,
        #[doc = "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events."]
        id: DevfileSchemaVersion222CommandsItemVariant2Id,
    },
}
impl ::std::convert::From<&Self> for DevfileSchemaVersion222CommandsItem {
    fn from(value: &DevfileSchemaVersion222CommandsItem) -> Self {
        value.clone()
    }
}
#[doc = "CLI Command executed in an existing component container"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"CLI Command executed in an existing component container\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"commandLine\","]
#[doc = "    \"component\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"commandLine\": {"]
#[doc = "      \"description\": \"The actual command-line string\\n\\nSpecial variables that can be used:\\n\\n - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping.\\n\\n - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"component\": {"]
#[doc = "      \"description\": \"Describes component to which given action relates\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"env\": {"]
#[doc = "      \"description\": \"Optional list of environment variables that have to be set before running the command\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"object\","]
#[doc = "        \"required\": ["]
#[doc = "          \"name\","]
#[doc = "          \"value\""]
#[doc = "        ],"]
#[doc = "        \"properties\": {"]
#[doc = "          \"name\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          },"]
#[doc = "          \"value\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"additionalProperties\": false"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"group\": {"]
#[doc = "      \"description\": \"Defines the group this command is part of\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"kind\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"isDefault\": {"]
#[doc = "          \"description\": \"Identifies the default command for a given group kind\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"kind\": {"]
#[doc = "          \"description\": \"Kind of group the command is part of\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"enum\": ["]
#[doc = "            \"build\","]
#[doc = "            \"run\","]
#[doc = "            \"test\","]
#[doc = "            \"debug\","]
#[doc = "            \"deploy\""]
#[doc = "          ]"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"hotReloadCapable\": {"]
#[doc = "      \"description\": \"Specify whether the command is restarted or not when the source code changes. If set to `true` the command won't be restarted. A *hotReloadCapable* `run` or `debug` command is expected to handle file changes on its own and won't be restarted. A *hotReloadCapable* `build` command is expected to be executed only once and won't be executed again. This field is taken into account only for commands `build`, `run` and `debug` with `isDefault` set to `true`.\\n\\nDefault value is `false`\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"label\": {"]
#[doc = "      \"description\": \"Optional label that provides a label for this command to be used in Editor UI menus for example\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"workingDir\": {"]
#[doc = "      \"description\": \"Working directory where the command should be executed\\n\\nSpecial variables that can be used:\\n\\n - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping.\\n\\n - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
pub struct DevfileSchemaVersion222CommandsItemVariant0Exec {
    #[doc = "The actual command-line string\n\nSpecial variables that can be used:\n\n - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping.\n\n - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one."]
    #[serde(rename = "commandLine")]
    pub command_line: ::std::string::String,
    #[doc = "Describes component to which given action relates"]
    pub component: ::std::string::String,
    #[doc = "Optional list of environment variables that have to be set before running the command"]
    #[serde(default, skip_serializing_if = "::std::vec::Vec::is_empty")]
    pub env: ::std::vec::Vec<DevfileSchemaVersion222CommandsItemVariant0ExecEnvItem>,
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub group: ::std::option::Option<DevfileSchemaVersion222CommandsItemVariant0ExecGroup>,
    #[doc = "Specify whether the command is restarted or not when the source code changes. If set to `true` the command won't be restarted. A *hotReloadCapable* `run` or `debug` command is expected to handle file changes on its own and won't be restarted. A *hotReloadCapable* `build` command is expected to be executed only once and won't be executed again. This field is taken into account only for commands `build`, `run` and `debug` with `isDefault` set to `true`.\n\nDefault value is `false`"]
    #[serde(
        rename = "hotReloadCapable",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub hot_reload_capable: ::std::option::Option<bool>,
    #[doc = "Optional label that provides a label for this command to be used in Editor UI menus for example"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub label: ::std::option::Option<::std::string::String>,
    #[doc = "Working directory where the command should be executed\n\nSpecial variables that can be used:\n\n - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping.\n\n - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one."]
    #[serde(
        rename = "workingDir",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub working_dir: ::std::option::Option<::std::string::String>,
}
impl ::std::convert::From<&DevfileSchemaVersion222CommandsItemVariant0Exec>
    for DevfileSchemaVersion222CommandsItemVariant0Exec
{
    fn from(value: &DevfileSchemaVersion222CommandsItemVariant0Exec) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222CommandsItemVariant0Exec {
    pub fn builder() -> builder::DevfileSchemaVersion222CommandsItemVariant0Exec {
        Default::default()
    }
}
#[doc = "`DevfileSchemaVersion222CommandsItemVariant0ExecEnvItem`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"name\","]
#[doc = "    \"value\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"name\": {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"value\": {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
pub struct DevfileSchemaVersion222CommandsItemVariant0ExecEnvItem {
    pub name: ::std::string::String,
    pub value: ::std::string::String,
}
impl ::std::convert::From<&DevfileSchemaVersion222CommandsItemVariant0ExecEnvItem>
    for DevfileSchemaVersion222CommandsItemVariant0ExecEnvItem
{
    fn from(value: &DevfileSchemaVersion222CommandsItemVariant0ExecEnvItem) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222CommandsItemVariant0ExecEnvItem {
    pub fn builder() -> builder::DevfileSchemaVersion222CommandsItemVariant0ExecEnvItem {
        Default::default()
    }
}
#[doc = "Defines the group this command is part of"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Defines the group this command is part of\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"kind\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"isDefault\": {"]
#[doc = "      \"description\": \"Identifies the default command for a given group kind\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"kind\": {"]
#[doc = "      \"description\": \"Kind of group the command is part of\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"build\","]
#[doc = "        \"run\","]
#[doc = "        \"test\","]
#[doc = "        \"debug\","]
#[doc = "        \"deploy\""]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
pub struct DevfileSchemaVersion222CommandsItemVariant0ExecGroup {
    #[doc = "Identifies the default command for a given group kind"]
    #[serde(
        rename = "isDefault",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub is_default: ::std::option::Option<bool>,
    #[doc = "Kind of group the command is part of"]
    pub kind: DevfileSchemaVersion222CommandsItemVariant0ExecGroupKind,
}
impl ::std::convert::From<&DevfileSchemaVersion222CommandsItemVariant0ExecGroup>
    for DevfileSchemaVersion222CommandsItemVariant0ExecGroup
{
    fn from(value: &DevfileSchemaVersion222CommandsItemVariant0ExecGroup) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222CommandsItemVariant0ExecGroup {
    pub fn builder() -> builder::DevfileSchemaVersion222CommandsItemVariant0ExecGroup {
        Default::default()
    }
}
#[doc = "Kind of group the command is part of"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Kind of group the command is part of\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"build\","]
#[doc = "    \"run\","]
#[doc = "    \"test\","]
#[doc = "    \"debug\","]
#[doc = "    \"deploy\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DevfileSchemaVersion222CommandsItemVariant0ExecGroupKind {
    #[serde(rename = "build")]
    Build,
    #[serde(rename = "run")]
    Run,
    #[serde(rename = "test")]
    Test,
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "deploy")]
    Deploy,
}
impl ::std::convert::From<&Self> for DevfileSchemaVersion222CommandsItemVariant0ExecGroupKind {
    fn from(value: &DevfileSchemaVersion222CommandsItemVariant0ExecGroupKind) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for DevfileSchemaVersion222CommandsItemVariant0ExecGroupKind {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Build => f.write_str("build"),
            Self::Run => f.write_str("run"),
            Self::Test => f.write_str("test"),
            Self::Debug => f.write_str("debug"),
            Self::Deploy => f.write_str("deploy"),
        }
    }
}
impl ::std::str::FromStr for DevfileSchemaVersion222CommandsItemVariant0ExecGroupKind {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        match value {
            "build" => Ok(Self::Build),
            "run" => Ok(Self::Run),
            "test" => Ok(Self::Test),
            "debug" => Ok(Self::Debug),
            "deploy" => Ok(Self::Deploy),
            _ => Err("invalid value".into()),
        }
    }
}
impl ::std::convert::TryFrom<&str> for DevfileSchemaVersion222CommandsItemVariant0ExecGroupKind {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222CommandsItemVariant0ExecGroupKind
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222CommandsItemVariant0ExecGroupKind
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222CommandsItemVariant0Id(::std::string::String);
impl ::std::ops::Deref for DevfileSchemaVersion222CommandsItemVariant0Id {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222CommandsItemVariant0Id> for ::std::string::String {
    fn from(value: DevfileSchemaVersion222CommandsItemVariant0Id) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222CommandsItemVariant0Id>
    for DevfileSchemaVersion222CommandsItemVariant0Id
{
    fn from(value: &DevfileSchemaVersion222CommandsItemVariant0Id) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for DevfileSchemaVersion222CommandsItemVariant0Id {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str> for DevfileSchemaVersion222CommandsItemVariant0Id {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222CommandsItemVariant0Id
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222CommandsItemVariant0Id
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de> for DevfileSchemaVersion222CommandsItemVariant0Id {
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Command that consists in applying a given component definition, typically bound to a devworkspace event.\n\nFor example, when an `apply` command is bound to a `preStart` event, and references a `container` component, it will start the container as a K8S initContainer in the devworkspace POD, unless the component has its `dedicatedPod` field set to `true`.\n\nWhen no `apply` command exist for a given component, it is assumed the component will be applied at devworkspace start by default, unless `deployByDefault` for that component is set to false."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Command that consists in applying a given component definition, typically bound to a devworkspace event.\\n\\nFor example, when an `apply` command is bound to a `preStart` event, and references a `container` component, it will start the container as a K8S initContainer in the devworkspace POD, unless the component has its `dedicatedPod` field set to `true`.\\n\\nWhen no `apply` command exist for a given component, it is assumed the component will be applied at devworkspace start by default, unless `deployByDefault` for that component is set to false.\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"component\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"component\": {"]
#[doc = "      \"description\": \"Describes component that will be applied\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"group\": {"]
#[doc = "      \"description\": \"Defines the group this command is part of\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"kind\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"isDefault\": {"]
#[doc = "          \"description\": \"Identifies the default command for a given group kind\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"kind\": {"]
#[doc = "          \"description\": \"Kind of group the command is part of\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"enum\": ["]
#[doc = "            \"build\","]
#[doc = "            \"run\","]
#[doc = "            \"test\","]
#[doc = "            \"debug\","]
#[doc = "            \"deploy\""]
#[doc = "          ]"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"label\": {"]
#[doc = "      \"description\": \"Optional label that provides a label for this command to be used in Editor UI menus for example\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
pub struct DevfileSchemaVersion222CommandsItemVariant1Apply {
    #[doc = "Describes component that will be applied"]
    pub component: ::std::string::String,
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub group: ::std::option::Option<DevfileSchemaVersion222CommandsItemVariant1ApplyGroup>,
    #[doc = "Optional label that provides a label for this command to be used in Editor UI menus for example"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub label: ::std::option::Option<::std::string::String>,
}
impl ::std::convert::From<&DevfileSchemaVersion222CommandsItemVariant1Apply>
    for DevfileSchemaVersion222CommandsItemVariant1Apply
{
    fn from(value: &DevfileSchemaVersion222CommandsItemVariant1Apply) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222CommandsItemVariant1Apply {
    pub fn builder() -> builder::DevfileSchemaVersion222CommandsItemVariant1Apply {
        Default::default()
    }
}
#[doc = "Defines the group this command is part of"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Defines the group this command is part of\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"kind\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"isDefault\": {"]
#[doc = "      \"description\": \"Identifies the default command for a given group kind\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"kind\": {"]
#[doc = "      \"description\": \"Kind of group the command is part of\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"build\","]
#[doc = "        \"run\","]
#[doc = "        \"test\","]
#[doc = "        \"debug\","]
#[doc = "        \"deploy\""]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
pub struct DevfileSchemaVersion222CommandsItemVariant1ApplyGroup {
    #[doc = "Identifies the default command for a given group kind"]
    #[serde(
        rename = "isDefault",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub is_default: ::std::option::Option<bool>,
    #[doc = "Kind of group the command is part of"]
    pub kind: DevfileSchemaVersion222CommandsItemVariant1ApplyGroupKind,
}
impl ::std::convert::From<&DevfileSchemaVersion222CommandsItemVariant1ApplyGroup>
    for DevfileSchemaVersion222CommandsItemVariant1ApplyGroup
{
    fn from(value: &DevfileSchemaVersion222CommandsItemVariant1ApplyGroup) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222CommandsItemVariant1ApplyGroup {
    pub fn builder() -> builder::DevfileSchemaVersion222CommandsItemVariant1ApplyGroup {
        Default::default()
    }
}
#[doc = "Kind of group the command is part of"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Kind of group the command is part of\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"build\","]
#[doc = "    \"run\","]
#[doc = "    \"test\","]
#[doc = "    \"debug\","]
#[doc = "    \"deploy\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DevfileSchemaVersion222CommandsItemVariant1ApplyGroupKind {
    #[serde(rename = "build")]
    Build,
    #[serde(rename = "run")]
    Run,
    #[serde(rename = "test")]
    Test,
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "deploy")]
    Deploy,
}
impl ::std::convert::From<&Self> for DevfileSchemaVersion222CommandsItemVariant1ApplyGroupKind {
    fn from(value: &DevfileSchemaVersion222CommandsItemVariant1ApplyGroupKind) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for DevfileSchemaVersion222CommandsItemVariant1ApplyGroupKind {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Build => f.write_str("build"),
            Self::Run => f.write_str("run"),
            Self::Test => f.write_str("test"),
            Self::Debug => f.write_str("debug"),
            Self::Deploy => f.write_str("deploy"),
        }
    }
}
impl ::std::str::FromStr for DevfileSchemaVersion222CommandsItemVariant1ApplyGroupKind {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        match value {
            "build" => Ok(Self::Build),
            "run" => Ok(Self::Run),
            "test" => Ok(Self::Test),
            "debug" => Ok(Self::Debug),
            "deploy" => Ok(Self::Deploy),
            _ => Err("invalid value".into()),
        }
    }
}
impl ::std::convert::TryFrom<&str> for DevfileSchemaVersion222CommandsItemVariant1ApplyGroupKind {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222CommandsItemVariant1ApplyGroupKind
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222CommandsItemVariant1ApplyGroupKind
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222CommandsItemVariant1Id(::std::string::String);
impl ::std::ops::Deref for DevfileSchemaVersion222CommandsItemVariant1Id {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222CommandsItemVariant1Id> for ::std::string::String {
    fn from(value: DevfileSchemaVersion222CommandsItemVariant1Id) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222CommandsItemVariant1Id>
    for DevfileSchemaVersion222CommandsItemVariant1Id
{
    fn from(value: &DevfileSchemaVersion222CommandsItemVariant1Id) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for DevfileSchemaVersion222CommandsItemVariant1Id {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str> for DevfileSchemaVersion222CommandsItemVariant1Id {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222CommandsItemVariant1Id
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222CommandsItemVariant1Id
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de> for DevfileSchemaVersion222CommandsItemVariant1Id {
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Composite command that allows executing several sub-commands either sequentially or concurrently"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Composite command that allows executing several sub-commands either sequentially or concurrently\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"commands\": {"]
#[doc = "      \"description\": \"The commands that comprise this composite command\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"group\": {"]
#[doc = "      \"description\": \"Defines the group this command is part of\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"kind\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"isDefault\": {"]
#[doc = "          \"description\": \"Identifies the default command for a given group kind\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"kind\": {"]
#[doc = "          \"description\": \"Kind of group the command is part of\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"enum\": ["]
#[doc = "            \"build\","]
#[doc = "            \"run\","]
#[doc = "            \"test\","]
#[doc = "            \"debug\","]
#[doc = "            \"deploy\""]
#[doc = "          ]"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"label\": {"]
#[doc = "      \"description\": \"Optional label that provides a label for this command to be used in Editor UI menus for example\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"parallel\": {"]
#[doc = "      \"description\": \"Indicates if the sub-commands should be executed concurrently\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222CommandsItemVariant2Composite {
    #[doc = "The commands that comprise this composite command"]
    #[serde(default, skip_serializing_if = "::std::vec::Vec::is_empty")]
    pub commands: ::std::vec::Vec<::std::string::String>,
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub group: ::std::option::Option<DevfileSchemaVersion222CommandsItemVariant2CompositeGroup>,
    #[doc = "Optional label that provides a label for this command to be used in Editor UI menus for example"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub label: ::std::option::Option<::std::string::String>,
    #[doc = "Indicates if the sub-commands should be executed concurrently"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub parallel: ::std::option::Option<bool>,
}
impl ::std::convert::From<&DevfileSchemaVersion222CommandsItemVariant2Composite>
    for DevfileSchemaVersion222CommandsItemVariant2Composite
{
    fn from(value: &DevfileSchemaVersion222CommandsItemVariant2Composite) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222CommandsItemVariant2Composite {
    pub fn builder() -> builder::DevfileSchemaVersion222CommandsItemVariant2Composite {
        Default::default()
    }
}
#[doc = "Defines the group this command is part of"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Defines the group this command is part of\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"kind\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"isDefault\": {"]
#[doc = "      \"description\": \"Identifies the default command for a given group kind\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"kind\": {"]
#[doc = "      \"description\": \"Kind of group the command is part of\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"build\","]
#[doc = "        \"run\","]
#[doc = "        \"test\","]
#[doc = "        \"debug\","]
#[doc = "        \"deploy\""]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
pub struct DevfileSchemaVersion222CommandsItemVariant2CompositeGroup {
    #[doc = "Identifies the default command for a given group kind"]
    #[serde(
        rename = "isDefault",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub is_default: ::std::option::Option<bool>,
    #[doc = "Kind of group the command is part of"]
    pub kind: DevfileSchemaVersion222CommandsItemVariant2CompositeGroupKind,
}
impl ::std::convert::From<&DevfileSchemaVersion222CommandsItemVariant2CompositeGroup>
    for DevfileSchemaVersion222CommandsItemVariant2CompositeGroup
{
    fn from(value: &DevfileSchemaVersion222CommandsItemVariant2CompositeGroup) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222CommandsItemVariant2CompositeGroup {
    pub fn builder() -> builder::DevfileSchemaVersion222CommandsItemVariant2CompositeGroup {
        Default::default()
    }
}
#[doc = "Kind of group the command is part of"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Kind of group the command is part of\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"build\","]
#[doc = "    \"run\","]
#[doc = "    \"test\","]
#[doc = "    \"debug\","]
#[doc = "    \"deploy\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DevfileSchemaVersion222CommandsItemVariant2CompositeGroupKind {
    #[serde(rename = "build")]
    Build,
    #[serde(rename = "run")]
    Run,
    #[serde(rename = "test")]
    Test,
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "deploy")]
    Deploy,
}
impl ::std::convert::From<&Self> for DevfileSchemaVersion222CommandsItemVariant2CompositeGroupKind {
    fn from(value: &DevfileSchemaVersion222CommandsItemVariant2CompositeGroupKind) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for DevfileSchemaVersion222CommandsItemVariant2CompositeGroupKind {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Build => f.write_str("build"),
            Self::Run => f.write_str("run"),
            Self::Test => f.write_str("test"),
            Self::Debug => f.write_str("debug"),
            Self::Deploy => f.write_str("deploy"),
        }
    }
}
impl ::std::str::FromStr for DevfileSchemaVersion222CommandsItemVariant2CompositeGroupKind {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        match value {
            "build" => Ok(Self::Build),
            "run" => Ok(Self::Run),
            "test" => Ok(Self::Test),
            "debug" => Ok(Self::Debug),
            "deploy" => Ok(Self::Deploy),
            _ => Err("invalid value".into()),
        }
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222CommandsItemVariant2CompositeGroupKind
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222CommandsItemVariant2CompositeGroupKind
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222CommandsItemVariant2CompositeGroupKind
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222CommandsItemVariant2Id(::std::string::String);
impl ::std::ops::Deref for DevfileSchemaVersion222CommandsItemVariant2Id {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222CommandsItemVariant2Id> for ::std::string::String {
    fn from(value: DevfileSchemaVersion222CommandsItemVariant2Id) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222CommandsItemVariant2Id>
    for DevfileSchemaVersion222CommandsItemVariant2Id
{
    fn from(value: &DevfileSchemaVersion222CommandsItemVariant2Id) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for DevfileSchemaVersion222CommandsItemVariant2Id {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str> for DevfileSchemaVersion222CommandsItemVariant2Id {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222CommandsItemVariant2Id
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222CommandsItemVariant2Id
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de> for DevfileSchemaVersion222CommandsItemVariant2Id {
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "`DevfileSchemaVersion222ComponentsItem`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"container\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"kubernetes\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"openshift\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"volume\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"image\""]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  ],"]
#[doc = "  \"required\": ["]
#[doc = "    \"name\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"attributes\": {"]
#[doc = "      \"description\": \"Map of implementation-dependant free-form YAML attributes.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": true"]
#[doc = "    },"]
#[doc = "    \"container\": {"]
#[doc = "      \"description\": \"Allows adding and configuring devworkspace-related containers\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"image\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"annotation\": {"]
#[doc = "          \"description\": \"Annotations that should be added to specific resources for this container\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"properties\": {"]
#[doc = "            \"deployment\": {"]
#[doc = "              \"description\": \"Annotations to be added to deployment\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"additionalProperties\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"service\": {"]
#[doc = "              \"description\": \"Annotations to be added to service\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"additionalProperties\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"args\": {"]
#[doc = "          \"description\": \"The arguments to supply to the command running the dockerimage component. The arguments are supplied either to the default command provided in the image or to the overridden command.\\n\\nDefaults to an empty array, meaning use whatever is defined in the image.\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"command\": {"]
#[doc = "          \"description\": \"The command to run in the dockerimage component instead of the default one provided in the image.\\n\\nDefaults to an empty array, meaning use whatever is defined in the image.\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"cpuLimit\": {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"cpuRequest\": {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"dedicatedPod\": {"]
#[doc = "          \"description\": \"Specify if a container should run in its own separated pod, instead of running as part of the main development environment pod.\\n\\nDefault value is `false`\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"endpoints\": {"]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"required\": ["]
#[doc = "              \"name\","]
#[doc = "              \"targetPort\""]
#[doc = "            ],"]
#[doc = "            \"properties\": {"]
#[doc = "              \"annotation\": {"]
#[doc = "                \"description\": \"Annotations to be added to Kubernetes Ingress or Openshift Route\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"additionalProperties\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"attributes\": {"]
#[doc = "                \"description\": \"Map of implementation-dependant string-based free-form attributes.\\n\\nExamples of Che-specific attributes:\\n- cookiesAuthEnabled: \\\"true\\\" / \\\"false\\\",\\n- type: \\\"terminal\\\" / \\\"ide\\\" / \\\"ide-dev\\\",\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"additionalProperties\": true"]
#[doc = "              },"]
#[doc = "              \"exposure\": {"]
#[doc = "                \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "                \"default\": \"public\","]
#[doc = "                \"type\": \"string\","]
#[doc = "                \"enum\": ["]
#[doc = "                  \"public\","]
#[doc = "                  \"internal\","]
#[doc = "                  \"none\""]
#[doc = "                ]"]
#[doc = "              },"]
#[doc = "              \"name\": {"]
#[doc = "                \"type\": \"string\","]
#[doc = "                \"maxLength\": 15,"]
#[doc = "                \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "              },"]
#[doc = "              \"path\": {"]
#[doc = "                \"description\": \"Path of the endpoint URL\","]
#[doc = "                \"type\": \"string\""]
#[doc = "              },"]
#[doc = "              \"protocol\": {"]
#[doc = "                \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "                \"default\": \"http\","]
#[doc = "                \"type\": \"string\","]
#[doc = "                \"enum\": ["]
#[doc = "                  \"http\","]
#[doc = "                  \"https\","]
#[doc = "                  \"ws\","]
#[doc = "                  \"wss\","]
#[doc = "                  \"tcp\","]
#[doc = "                  \"udp\""]
#[doc = "                ]"]
#[doc = "              },"]
#[doc = "              \"secure\": {"]
#[doc = "                \"description\": \"Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.\","]
#[doc = "                \"type\": \"boolean\""]
#[doc = "              },"]
#[doc = "              \"targetPort\": {"]
#[doc = "                \"description\": \"Port number to be used within the container component. The same port cannot be used by two different container components.\","]
#[doc = "                \"type\": \"integer\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"additionalProperties\": false"]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"env\": {"]
#[doc = "          \"description\": \"Environment variables used in this container.\\n\\nThe following variables are reserved and cannot be overridden via env:\\n\\n - `$PROJECTS_ROOT`\\n\\n - `$PROJECT_SOURCE`\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"required\": ["]
#[doc = "              \"name\","]
#[doc = "              \"value\""]
#[doc = "            ],"]
#[doc = "            \"properties\": {"]
#[doc = "              \"name\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              },"]
#[doc = "              \"value\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"additionalProperties\": false"]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"image\": {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"memoryLimit\": {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"memoryRequest\": {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"mountSources\": {"]
#[doc = "          \"description\": \"Toggles whether or not the project source code should be mounted in the component.\\n\\nDefaults to true for all component types except plugins and components that set `dedicatedPod` to true.\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"sourceMapping\": {"]
#[doc = "          \"description\": \"Optional specification of the path in the container where project sources should be transferred/mounted when `mountSources` is `true`. When omitted, the default value of /projects is used.\","]
#[doc = "          \"default\": \"/projects\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"volumeMounts\": {"]
#[doc = "          \"description\": \"List of volumes mounts that should be mounted is this container.\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"description\": \"Volume that should be mounted to a component container\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"required\": ["]
#[doc = "              \"name\""]
#[doc = "            ],"]
#[doc = "            \"properties\": {"]
#[doc = "              \"name\": {"]
#[doc = "                \"description\": \"The volume mount name is the name of an existing `Volume` component. If several containers mount the same volume name then they will reuse the same volume and will be able to access to the same files.\","]
#[doc = "                \"type\": \"string\","]
#[doc = "                \"maxLength\": 63,"]
#[doc = "                \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "              },"]
#[doc = "              \"path\": {"]
#[doc = "                \"description\": \"The path in the component container where the volume should be mounted. If not path is mentioned, default path is the is `/<name>`.\","]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"additionalProperties\": false"]
#[doc = "          }"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"image\": {"]
#[doc = "      \"description\": \"Allows specifying the definition of an image for outer loop builds\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"required\": ["]
#[doc = "            \"dockerfile\""]
#[doc = "          ]"]
#[doc = "        }"]
#[doc = "      ],"]
#[doc = "      \"required\": ["]
#[doc = "        \"imageName\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"autoBuild\": {"]
#[doc = "          \"description\": \"Defines if the image should be built during startup.\\n\\nDefault value is `false`\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"dockerfile\": {"]
#[doc = "          \"description\": \"Allows specifying dockerfile type build\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"required\": ["]
#[doc = "                \"uri\""]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"required\": ["]
#[doc = "                \"devfileRegistry\""]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"required\": ["]
#[doc = "                \"git\""]
#[doc = "              ]"]
#[doc = "            }"]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"args\": {"]
#[doc = "              \"description\": \"The arguments to supply to the dockerfile build.\","]
#[doc = "              \"type\": \"array\","]
#[doc = "              \"items\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"buildContext\": {"]
#[doc = "              \"description\": \"Path of source directory to establish build context. Defaults to ${PROJECT_SOURCE} in the container\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"devfileRegistry\": {"]
#[doc = "              \"description\": \"Dockerfile's Devfile Registry source\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"id\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"id\": {"]
#[doc = "                  \"description\": \"Id in a devfile registry that contains a Dockerfile. The src in the OCI registry required for the Dockerfile build will be downloaded for building the image.\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                },"]
#[doc = "                \"registryUrl\": {"]
#[doc = "                  \"description\": \"Devfile Registry URL to pull the Dockerfile from when using the Devfile Registry as Dockerfile src. To ensure the Dockerfile gets resolved consistently in different environments, it is recommended to always specify the `devfileRegistryUrl` when `Id` is used.\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            },"]
#[doc = "            \"git\": {"]
#[doc = "              \"description\": \"Dockerfile's Git source\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"remotes\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"checkoutFrom\": {"]
#[doc = "                  \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"remote\": {"]
#[doc = "                      \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"revision\": {"]
#[doc = "                      \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                },"]
#[doc = "                \"fileLocation\": {"]
#[doc = "                  \"description\": \"Location of the Dockerfile in the Git repository when using git as Dockerfile src. Defaults to Dockerfile.\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                },"]
#[doc = "                \"remotes\": {"]
#[doc = "                  \"description\": \"The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"additionalProperties\": {"]
#[doc = "                    \"type\": \"string\""]
#[doc = "                  }"]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            },"]
#[doc = "            \"rootRequired\": {"]
#[doc = "              \"description\": \"Specify if a privileged builder pod is required.\\n\\nDefault value is `false`\","]
#[doc = "              \"type\": \"boolean\""]
#[doc = "            },"]
#[doc = "            \"uri\": {"]
#[doc = "              \"description\": \"URI Reference of a Dockerfile. It can be a full URL or a relative URI from the current devfile as the base URI.\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"imageName\": {"]
#[doc = "          \"description\": \"Name of the image for the resulting outerloop build\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"kubernetes\": {"]
#[doc = "      \"description\": \"Allows importing into the devworkspace the Kubernetes resources defined in a given manifest. For example this allows reusing the Kubernetes definitions used to deploy some runtime components in production.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"required\": ["]
#[doc = "            \"uri\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"required\": ["]
#[doc = "            \"inlined\""]
#[doc = "          ]"]
#[doc = "        }"]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"deployByDefault\": {"]
#[doc = "          \"description\": \"Defines if the component should be deployed during startup.\\n\\nDefault value is `false`\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"endpoints\": {"]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"required\": ["]
#[doc = "              \"name\","]
#[doc = "              \"targetPort\""]
#[doc = "            ],"]
#[doc = "            \"properties\": {"]
#[doc = "              \"annotation\": {"]
#[doc = "                \"description\": \"Annotations to be added to Kubernetes Ingress or Openshift Route\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"additionalProperties\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"attributes\": {"]
#[doc = "                \"description\": \"Map of implementation-dependant string-based free-form attributes.\\n\\nExamples of Che-specific attributes:\\n- cookiesAuthEnabled: \\\"true\\\" / \\\"false\\\",\\n- type: \\\"terminal\\\" / \\\"ide\\\" / \\\"ide-dev\\\",\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"additionalProperties\": true"]
#[doc = "              },"]
#[doc = "              \"exposure\": {"]
#[doc = "                \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "                \"default\": \"public\","]
#[doc = "                \"type\": \"string\","]
#[doc = "                \"enum\": ["]
#[doc = "                  \"public\","]
#[doc = "                  \"internal\","]
#[doc = "                  \"none\""]
#[doc = "                ]"]
#[doc = "              },"]
#[doc = "              \"name\": {"]
#[doc = "                \"type\": \"string\","]
#[doc = "                \"maxLength\": 15,"]
#[doc = "                \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "              },"]
#[doc = "              \"path\": {"]
#[doc = "                \"description\": \"Path of the endpoint URL\","]
#[doc = "                \"type\": \"string\""]
#[doc = "              },"]
#[doc = "              \"protocol\": {"]
#[doc = "                \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "                \"default\": \"http\","]
#[doc = "                \"type\": \"string\","]
#[doc = "                \"enum\": ["]
#[doc = "                  \"http\","]
#[doc = "                  \"https\","]
#[doc = "                  \"ws\","]
#[doc = "                  \"wss\","]
#[doc = "                  \"tcp\","]
#[doc = "                  \"udp\""]
#[doc = "                ]"]
#[doc = "              },"]
#[doc = "              \"secure\": {"]
#[doc = "                \"description\": \"Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.\","]
#[doc = "                \"type\": \"boolean\""]
#[doc = "              },"]
#[doc = "              \"targetPort\": {"]
#[doc = "                \"description\": \"Port number to be used within the container component. The same port cannot be used by two different container components.\","]
#[doc = "                \"type\": \"integer\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"additionalProperties\": false"]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"inlined\": {"]
#[doc = "          \"description\": \"Inlined manifest\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"uri\": {"]
#[doc = "          \"description\": \"Location in a file fetched from a uri.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"description\": \"Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin.\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"maxLength\": 63,"]
#[doc = "      \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "    },"]
#[doc = "    \"openshift\": {"]
#[doc = "      \"description\": \"Allows importing into the devworkspace the OpenShift resources defined in a given manifest. For example this allows reusing the OpenShift definitions used to deploy some runtime components in production.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"required\": ["]
#[doc = "            \"uri\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"required\": ["]
#[doc = "            \"inlined\""]
#[doc = "          ]"]
#[doc = "        }"]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"deployByDefault\": {"]
#[doc = "          \"description\": \"Defines if the component should be deployed during startup.\\n\\nDefault value is `false`\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"endpoints\": {"]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"required\": ["]
#[doc = "              \"name\","]
#[doc = "              \"targetPort\""]
#[doc = "            ],"]
#[doc = "            \"properties\": {"]
#[doc = "              \"annotation\": {"]
#[doc = "                \"description\": \"Annotations to be added to Kubernetes Ingress or Openshift Route\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"additionalProperties\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"attributes\": {"]
#[doc = "                \"description\": \"Map of implementation-dependant string-based free-form attributes.\\n\\nExamples of Che-specific attributes:\\n- cookiesAuthEnabled: \\\"true\\\" / \\\"false\\\",\\n- type: \\\"terminal\\\" / \\\"ide\\\" / \\\"ide-dev\\\",\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"additionalProperties\": true"]
#[doc = "              },"]
#[doc = "              \"exposure\": {"]
#[doc = "                \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "                \"default\": \"public\","]
#[doc = "                \"type\": \"string\","]
#[doc = "                \"enum\": ["]
#[doc = "                  \"public\","]
#[doc = "                  \"internal\","]
#[doc = "                  \"none\""]
#[doc = "                ]"]
#[doc = "              },"]
#[doc = "              \"name\": {"]
#[doc = "                \"type\": \"string\","]
#[doc = "                \"maxLength\": 15,"]
#[doc = "                \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "              },"]
#[doc = "              \"path\": {"]
#[doc = "                \"description\": \"Path of the endpoint URL\","]
#[doc = "                \"type\": \"string\""]
#[doc = "              },"]
#[doc = "              \"protocol\": {"]
#[doc = "                \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "                \"default\": \"http\","]
#[doc = "                \"type\": \"string\","]
#[doc = "                \"enum\": ["]
#[doc = "                  \"http\","]
#[doc = "                  \"https\","]
#[doc = "                  \"ws\","]
#[doc = "                  \"wss\","]
#[doc = "                  \"tcp\","]
#[doc = "                  \"udp\""]
#[doc = "                ]"]
#[doc = "              },"]
#[doc = "              \"secure\": {"]
#[doc = "                \"description\": \"Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.\","]
#[doc = "                \"type\": \"boolean\""]
#[doc = "              },"]
#[doc = "              \"targetPort\": {"]
#[doc = "                \"description\": \"Port number to be used within the container component. The same port cannot be used by two different container components.\","]
#[doc = "                \"type\": \"integer\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"additionalProperties\": false"]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"inlined\": {"]
#[doc = "          \"description\": \"Inlined manifest\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"uri\": {"]
#[doc = "          \"description\": \"Location in a file fetched from a uri.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"volume\": {"]
#[doc = "      \"description\": \"Allows specifying the definition of a volume shared by several other components\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"ephemeral\": {"]
#[doc = "          \"description\": \"Ephemeral volumes are not stored persistently across restarts. Defaults to false\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"size\": {"]
#[doc = "          \"description\": \"Size of the volume\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged, deny_unknown_fields)]
pub enum DevfileSchemaVersion222ComponentsItem {
    Variant0 {
        #[doc = "Map of implementation-dependant free-form YAML attributes."]
        #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
        attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
        container: DevfileSchemaVersion222ComponentsItemVariant0Container,
        #[doc = "Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin."]
        name: DevfileSchemaVersion222ComponentsItemVariant0Name,
    },
    Variant1 {
        #[doc = "Map of implementation-dependant free-form YAML attributes."]
        #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
        attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
        kubernetes: DevfileSchemaVersion222ComponentsItemVariant1Kubernetes,
        #[doc = "Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin."]
        name: DevfileSchemaVersion222ComponentsItemVariant1Name,
    },
    Variant2 {
        #[doc = "Map of implementation-dependant free-form YAML attributes."]
        #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
        attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
        #[doc = "Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin."]
        name: DevfileSchemaVersion222ComponentsItemVariant2Name,
        openshift: DevfileSchemaVersion222ComponentsItemVariant2Openshift,
    },
    Variant3 {
        #[doc = "Map of implementation-dependant free-form YAML attributes."]
        #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
        attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
        #[doc = "Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin."]
        name: DevfileSchemaVersion222ComponentsItemVariant3Name,
        volume: DevfileSchemaVersion222ComponentsItemVariant3Volume,
    },
    Variant4 {
        #[doc = "Map of implementation-dependant free-form YAML attributes."]
        #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
        attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
        image: DevfileSchemaVersion222ComponentsItemVariant4Image,
        #[doc = "Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin."]
        name: DevfileSchemaVersion222ComponentsItemVariant4Name,
    },
}
impl ::std::convert::From<&Self> for DevfileSchemaVersion222ComponentsItem {
    fn from(value: &DevfileSchemaVersion222ComponentsItem) -> Self {
        value.clone()
    }
}
#[doc = "Allows adding and configuring devworkspace-related containers"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Allows adding and configuring devworkspace-related containers\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"image\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"annotation\": {"]
#[doc = "      \"description\": \"Annotations that should be added to specific resources for this container\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"deployment\": {"]
#[doc = "          \"description\": \"Annotations to be added to deployment\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"additionalProperties\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"service\": {"]
#[doc = "          \"description\": \"Annotations to be added to service\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"additionalProperties\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"args\": {"]
#[doc = "      \"description\": \"The arguments to supply to the command running the dockerimage component. The arguments are supplied either to the default command provided in the image or to the overridden command.\\n\\nDefaults to an empty array, meaning use whatever is defined in the image.\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"command\": {"]
#[doc = "      \"description\": \"The command to run in the dockerimage component instead of the default one provided in the image.\\n\\nDefaults to an empty array, meaning use whatever is defined in the image.\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"cpuLimit\": {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"cpuRequest\": {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"dedicatedPod\": {"]
#[doc = "      \"description\": \"Specify if a container should run in its own separated pod, instead of running as part of the main development environment pod.\\n\\nDefault value is `false`\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"endpoints\": {"]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"object\","]
#[doc = "        \"required\": ["]
#[doc = "          \"name\","]
#[doc = "          \"targetPort\""]
#[doc = "        ],"]
#[doc = "        \"properties\": {"]
#[doc = "          \"annotation\": {"]
#[doc = "            \"description\": \"Annotations to be added to Kubernetes Ingress or Openshift Route\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"additionalProperties\": {"]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"attributes\": {"]
#[doc = "            \"description\": \"Map of implementation-dependant string-based free-form attributes.\\n\\nExamples of Che-specific attributes:\\n- cookiesAuthEnabled: \\\"true\\\" / \\\"false\\\",\\n- type: \\\"terminal\\\" / \\\"ide\\\" / \\\"ide-dev\\\",\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"additionalProperties\": true"]
#[doc = "          },"]
#[doc = "          \"exposure\": {"]
#[doc = "            \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "            \"default\": \"public\","]
#[doc = "            \"type\": \"string\","]
#[doc = "            \"enum\": ["]
#[doc = "              \"public\","]
#[doc = "              \"internal\","]
#[doc = "              \"none\""]
#[doc = "            ]"]
#[doc = "          },"]
#[doc = "          \"name\": {"]
#[doc = "            \"type\": \"string\","]
#[doc = "            \"maxLength\": 15,"]
#[doc = "            \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "          },"]
#[doc = "          \"path\": {"]
#[doc = "            \"description\": \"Path of the endpoint URL\","]
#[doc = "            \"type\": \"string\""]
#[doc = "          },"]
#[doc = "          \"protocol\": {"]
#[doc = "            \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "            \"default\": \"http\","]
#[doc = "            \"type\": \"string\","]
#[doc = "            \"enum\": ["]
#[doc = "              \"http\","]
#[doc = "              \"https\","]
#[doc = "              \"ws\","]
#[doc = "              \"wss\","]
#[doc = "              \"tcp\","]
#[doc = "              \"udp\""]
#[doc = "            ]"]
#[doc = "          },"]
#[doc = "          \"secure\": {"]
#[doc = "            \"description\": \"Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.\","]
#[doc = "            \"type\": \"boolean\""]
#[doc = "          },"]
#[doc = "          \"targetPort\": {"]
#[doc = "            \"description\": \"Port number to be used within the container component. The same port cannot be used by two different container components.\","]
#[doc = "            \"type\": \"integer\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"additionalProperties\": false"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"env\": {"]
#[doc = "      \"description\": \"Environment variables used in this container.\\n\\nThe following variables are reserved and cannot be overridden via env:\\n\\n - `$PROJECTS_ROOT`\\n\\n - `$PROJECT_SOURCE`\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"object\","]
#[doc = "        \"required\": ["]
#[doc = "          \"name\","]
#[doc = "          \"value\""]
#[doc = "        ],"]
#[doc = "        \"properties\": {"]
#[doc = "          \"name\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          },"]
#[doc = "          \"value\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"additionalProperties\": false"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"image\": {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"memoryLimit\": {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"memoryRequest\": {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"mountSources\": {"]
#[doc = "      \"description\": \"Toggles whether or not the project source code should be mounted in the component.\\n\\nDefaults to true for all component types except plugins and components that set `dedicatedPod` to true.\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"sourceMapping\": {"]
#[doc = "      \"description\": \"Optional specification of the path in the container where project sources should be transferred/mounted when `mountSources` is `true`. When omitted, the default value of /projects is used.\","]
#[doc = "      \"default\": \"/projects\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"volumeMounts\": {"]
#[doc = "      \"description\": \"List of volumes mounts that should be mounted is this container.\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"description\": \"Volume that should be mounted to a component container\","]
#[doc = "        \"type\": \"object\","]
#[doc = "        \"required\": ["]
#[doc = "          \"name\""]
#[doc = "        ],"]
#[doc = "        \"properties\": {"]
#[doc = "          \"name\": {"]
#[doc = "            \"description\": \"The volume mount name is the name of an existing `Volume` component. If several containers mount the same volume name then they will reuse the same volume and will be able to access to the same files.\","]
#[doc = "            \"type\": \"string\","]
#[doc = "            \"maxLength\": 63,"]
#[doc = "            \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "          },"]
#[doc = "          \"path\": {"]
#[doc = "            \"description\": \"The path in the component container where the volume should be mounted. If not path is mentioned, default path is the is `/<name>`.\","]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"additionalProperties\": false"]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
pub struct DevfileSchemaVersion222ComponentsItemVariant0Container {
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub annotation:
        ::std::option::Option<DevfileSchemaVersion222ComponentsItemVariant0ContainerAnnotation>,
    #[doc = "The arguments to supply to the command running the dockerimage component. The arguments are supplied either to the default command provided in the image or to the overridden command.\n\nDefaults to an empty array, meaning use whatever is defined in the image."]
    #[serde(default, skip_serializing_if = "::std::vec::Vec::is_empty")]
    pub args: ::std::vec::Vec<::std::string::String>,
    #[doc = "The command to run in the dockerimage component instead of the default one provided in the image.\n\nDefaults to an empty array, meaning use whatever is defined in the image."]
    #[serde(default, skip_serializing_if = "::std::vec::Vec::is_empty")]
    pub command: ::std::vec::Vec<::std::string::String>,
    #[serde(
        rename = "cpuLimit",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub cpu_limit: ::std::option::Option<::std::string::String>,
    #[serde(
        rename = "cpuRequest",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub cpu_request: ::std::option::Option<::std::string::String>,
    #[doc = "Specify if a container should run in its own separated pod, instead of running as part of the main development environment pod.\n\nDefault value is `false`"]
    #[serde(
        rename = "dedicatedPod",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub dedicated_pod: ::std::option::Option<bool>,
    #[serde(default, skip_serializing_if = "::std::vec::Vec::is_empty")]
    pub endpoints:
        ::std::vec::Vec<DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItem>,
    #[doc = "Environment variables used in this container.\n\nThe following variables are reserved and cannot be overridden via env:\n\n - `$PROJECTS_ROOT`\n\n - `$PROJECT_SOURCE`"]
    #[serde(default, skip_serializing_if = "::std::vec::Vec::is_empty")]
    pub env: ::std::vec::Vec<DevfileSchemaVersion222ComponentsItemVariant0ContainerEnvItem>,
    pub image: ::std::string::String,
    #[serde(
        rename = "memoryLimit",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub memory_limit: ::std::option::Option<::std::string::String>,
    #[serde(
        rename = "memoryRequest",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub memory_request: ::std::option::Option<::std::string::String>,
    #[doc = "Toggles whether or not the project source code should be mounted in the component.\n\nDefaults to true for all component types except plugins and components that set `dedicatedPod` to true."]
    #[serde(
        rename = "mountSources",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub mount_sources: ::std::option::Option<bool>,
    #[doc = "Optional specification of the path in the container where project sources should be transferred/mounted when `mountSources` is `true`. When omitted, the default value of /projects is used."]
    #[serde(
        rename = "sourceMapping",
        default = "defaults::devfile_schema_version222_components_item_variant0_container_source_mapping"
    )]
    pub source_mapping: ::std::string::String,
    #[doc = "List of volumes mounts that should be mounted is this container."]
    #[serde(
        rename = "volumeMounts",
        default,
        skip_serializing_if = "::std::vec::Vec::is_empty"
    )]
    pub volume_mounts:
        ::std::vec::Vec<DevfileSchemaVersion222ComponentsItemVariant0ContainerVolumeMountsItem>,
}
impl ::std::convert::From<&DevfileSchemaVersion222ComponentsItemVariant0Container>
    for DevfileSchemaVersion222ComponentsItemVariant0Container
{
    fn from(value: &DevfileSchemaVersion222ComponentsItemVariant0Container) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ComponentsItemVariant0Container {
    pub fn builder() -> builder::DevfileSchemaVersion222ComponentsItemVariant0Container {
        Default::default()
    }
}
#[doc = "Annotations that should be added to specific resources for this container"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Annotations that should be added to specific resources for this container\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"deployment\": {"]
#[doc = "      \"description\": \"Annotations to be added to deployment\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"service\": {"]
#[doc = "      \"description\": \"Annotations to be added to service\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ComponentsItemVariant0ContainerAnnotation {
    #[doc = "Annotations to be added to deployment"]
    #[serde(
        default,
        skip_serializing_if = ":: std :: collections :: HashMap::is_empty"
    )]
    pub deployment: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    #[doc = "Annotations to be added to service"]
    #[serde(
        default,
        skip_serializing_if = ":: std :: collections :: HashMap::is_empty"
    )]
    pub service: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
}
impl ::std::convert::From<&DevfileSchemaVersion222ComponentsItemVariant0ContainerAnnotation>
    for DevfileSchemaVersion222ComponentsItemVariant0ContainerAnnotation
{
    fn from(value: &DevfileSchemaVersion222ComponentsItemVariant0ContainerAnnotation) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ComponentsItemVariant0ContainerAnnotation {
    pub fn builder() -> builder::DevfileSchemaVersion222ComponentsItemVariant0ContainerAnnotation {
        Default::default()
    }
}
#[doc = "`DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItem`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"name\","]
#[doc = "    \"targetPort\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"annotation\": {"]
#[doc = "      \"description\": \"Annotations to be added to Kubernetes Ingress or Openshift Route\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"attributes\": {"]
#[doc = "      \"description\": \"Map of implementation-dependant string-based free-form attributes.\\n\\nExamples of Che-specific attributes:\\n- cookiesAuthEnabled: \\\"true\\\" / \\\"false\\\",\\n- type: \\\"terminal\\\" / \\\"ide\\\" / \\\"ide-dev\\\",\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": true"]
#[doc = "    },"]
#[doc = "    \"exposure\": {"]
#[doc = "      \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "      \"default\": \"public\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"public\","]
#[doc = "        \"internal\","]
#[doc = "        \"none\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"maxLength\": 15,"]
#[doc = "      \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "    },"]
#[doc = "    \"path\": {"]
#[doc = "      \"description\": \"Path of the endpoint URL\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"protocol\": {"]
#[doc = "      \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "      \"default\": \"http\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"http\","]
#[doc = "        \"https\","]
#[doc = "        \"ws\","]
#[doc = "        \"wss\","]
#[doc = "        \"tcp\","]
#[doc = "        \"udp\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"secure\": {"]
#[doc = "      \"description\": \"Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"targetPort\": {"]
#[doc = "      \"description\": \"Port number to be used within the container component. The same port cannot be used by two different container components.\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
pub struct DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItem {
    #[doc = "Annotations to be added to Kubernetes Ingress or Openshift Route"]
    #[serde(
        default,
        skip_serializing_if = ":: std :: collections :: HashMap::is_empty"
    )]
    pub annotation: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    #[doc = "Map of implementation-dependant string-based free-form attributes.\n\nExamples of Che-specific attributes:\n- cookiesAuthEnabled: \"true\" / \"false\",\n- type: \"terminal\" / \"ide\" / \"ide-dev\","]
    #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
    pub attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
    #[doc = "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`"]
    #[serde(
        default = "defaults::devfile_schema_version222_components_item_variant0_container_endpoints_item_exposure"
    )]
    pub exposure: DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItemExposure,
    pub name: DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItemName,
    #[doc = "Path of the endpoint URL"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub path: ::std::option::Option<::std::string::String>,
    #[doc = "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`"]
    #[serde(
        default = "defaults::devfile_schema_version222_components_item_variant0_container_endpoints_item_protocol"
    )]
    pub protocol: DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItemProtocol,
    #[doc = "Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`."]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub secure: ::std::option::Option<bool>,
    #[doc = "Port number to be used within the container component. The same port cannot be used by two different container components."]
    #[serde(rename = "targetPort")]
    pub target_port: i64,
}
impl ::std::convert::From<&DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItem>
    for DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItem
{
    fn from(value: &DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItem) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItem {
    pub fn builder() -> builder::DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItem
    {
        Default::default()
    }
}
#[doc = "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "  \"default\": \"public\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"public\","]
#[doc = "    \"internal\","]
#[doc = "    \"none\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
#[derive(Default)]
pub enum DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItemExposure {
    #[serde(rename = "public")]
    #[default]
    Public,
    #[serde(rename = "internal")]
    Internal,
    #[serde(rename = "none")]
    None,
}
impl ::std::convert::From<&Self>
    for DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItemExposure
{
    fn from(
        value: &DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItemExposure,
    ) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display
    for DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItemExposure
{
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Public => f.write_str("public"),
            Self::Internal => f.write_str("internal"),
            Self::None => f.write_str("none"),
        }
    }
}
impl ::std::str::FromStr
    for DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItemExposure
{
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        match value {
            "public" => Ok(Self::Public),
            "internal" => Ok(Self::Internal),
            "none" => Ok(Self::None),
            _ => Err("invalid value".into()),
        }
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItemExposure
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItemExposure
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItemExposure
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "`DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItemName`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 15,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItemName(
    ::std::string::String,
);
impl ::std::ops::Deref for DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItemName {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItemName>
    for ::std::string::String
{
    fn from(
        value: DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItemName,
    ) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItemName>
    for DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItemName
{
    fn from(
        value: &DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItemName,
    ) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr
    for DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItemName
{
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 15usize {
            return Err("longer than 15 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItemName
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItemName
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItemName
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de>
    for DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItemName
{
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "  \"default\": \"http\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"http\","]
#[doc = "    \"https\","]
#[doc = "    \"ws\","]
#[doc = "    \"wss\","]
#[doc = "    \"tcp\","]
#[doc = "    \"udp\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
#[derive(Default)]
pub enum DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItemProtocol {
    #[serde(rename = "http")]
    #[default]
    Http,
    #[serde(rename = "https")]
    Https,
    #[serde(rename = "ws")]
    Ws,
    #[serde(rename = "wss")]
    Wss,
    #[serde(rename = "tcp")]
    Tcp,
    #[serde(rename = "udp")]
    Udp,
}
impl ::std::convert::From<&Self>
    for DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItemProtocol
{
    fn from(
        value: &DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItemProtocol,
    ) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display
    for DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItemProtocol
{
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Http => f.write_str("http"),
            Self::Https => f.write_str("https"),
            Self::Ws => f.write_str("ws"),
            Self::Wss => f.write_str("wss"),
            Self::Tcp => f.write_str("tcp"),
            Self::Udp => f.write_str("udp"),
        }
    }
}
impl ::std::str::FromStr
    for DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItemProtocol
{
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        match value {
            "http" => Ok(Self::Http),
            "https" => Ok(Self::Https),
            "ws" => Ok(Self::Ws),
            "wss" => Ok(Self::Wss),
            "tcp" => Ok(Self::Tcp),
            "udp" => Ok(Self::Udp),
            _ => Err("invalid value".into()),
        }
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItemProtocol
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItemProtocol
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItemProtocol
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "`DevfileSchemaVersion222ComponentsItemVariant0ContainerEnvItem`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"name\","]
#[doc = "    \"value\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"name\": {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"value\": {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
pub struct DevfileSchemaVersion222ComponentsItemVariant0ContainerEnvItem {
    pub name: ::std::string::String,
    pub value: ::std::string::String,
}
impl ::std::convert::From<&DevfileSchemaVersion222ComponentsItemVariant0ContainerEnvItem>
    for DevfileSchemaVersion222ComponentsItemVariant0ContainerEnvItem
{
    fn from(value: &DevfileSchemaVersion222ComponentsItemVariant0ContainerEnvItem) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ComponentsItemVariant0ContainerEnvItem {
    pub fn builder() -> builder::DevfileSchemaVersion222ComponentsItemVariant0ContainerEnvItem {
        Default::default()
    }
}
#[doc = "Volume that should be mounted to a component container"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Volume that should be mounted to a component container\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"name\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"name\": {"]
#[doc = "      \"description\": \"The volume mount name is the name of an existing `Volume` component. If several containers mount the same volume name then they will reuse the same volume and will be able to access to the same files.\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"maxLength\": 63,"]
#[doc = "      \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "    },"]
#[doc = "    \"path\": {"]
#[doc = "      \"description\": \"The path in the component container where the volume should be mounted. If not path is mentioned, default path is the is `/<name>`.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
pub struct DevfileSchemaVersion222ComponentsItemVariant0ContainerVolumeMountsItem {
    #[doc = "The volume mount name is the name of an existing `Volume` component. If several containers mount the same volume name then they will reuse the same volume and will be able to access to the same files."]
    pub name: DevfileSchemaVersion222ComponentsItemVariant0ContainerVolumeMountsItemName,
    #[doc = "The path in the component container where the volume should be mounted. If not path is mentioned, default path is the is `/<name>`."]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub path: ::std::option::Option<::std::string::String>,
}
impl ::std::convert::From<&DevfileSchemaVersion222ComponentsItemVariant0ContainerVolumeMountsItem>
    for DevfileSchemaVersion222ComponentsItemVariant0ContainerVolumeMountsItem
{
    fn from(
        value: &DevfileSchemaVersion222ComponentsItemVariant0ContainerVolumeMountsItem,
    ) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ComponentsItemVariant0ContainerVolumeMountsItem {
    pub fn builder(
    ) -> builder::DevfileSchemaVersion222ComponentsItemVariant0ContainerVolumeMountsItem {
        Default::default()
    }
}
#[doc = "The volume mount name is the name of an existing `Volume` component. If several containers mount the same volume name then they will reuse the same volume and will be able to access to the same files."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"The volume mount name is the name of an existing `Volume` component. If several containers mount the same volume name then they will reuse the same volume and will be able to access to the same files.\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ComponentsItemVariant0ContainerVolumeMountsItemName(
    ::std::string::String,
);
impl ::std::ops::Deref
    for DevfileSchemaVersion222ComponentsItemVariant0ContainerVolumeMountsItemName
{
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl
    ::std::convert::From<DevfileSchemaVersion222ComponentsItemVariant0ContainerVolumeMountsItemName>
    for ::std::string::String
{
    fn from(
        value: DevfileSchemaVersion222ComponentsItemVariant0ContainerVolumeMountsItemName,
    ) -> Self {
        value.0
    }
}
impl
    ::std::convert::From<
        &DevfileSchemaVersion222ComponentsItemVariant0ContainerVolumeMountsItemName,
    > for DevfileSchemaVersion222ComponentsItemVariant0ContainerVolumeMountsItemName
{
    fn from(
        value: &DevfileSchemaVersion222ComponentsItemVariant0ContainerVolumeMountsItemName,
    ) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr
    for DevfileSchemaVersion222ComponentsItemVariant0ContainerVolumeMountsItemName
{
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ComponentsItemVariant0ContainerVolumeMountsItemName
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ComponentsItemVariant0ContainerVolumeMountsItemName
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ComponentsItemVariant0ContainerVolumeMountsItemName
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de>
    for DevfileSchemaVersion222ComponentsItemVariant0ContainerVolumeMountsItemName
{
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin.\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ComponentsItemVariant0Name(::std::string::String);
impl ::std::ops::Deref for DevfileSchemaVersion222ComponentsItemVariant0Name {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222ComponentsItemVariant0Name>
    for ::std::string::String
{
    fn from(value: DevfileSchemaVersion222ComponentsItemVariant0Name) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222ComponentsItemVariant0Name>
    for DevfileSchemaVersion222ComponentsItemVariant0Name
{
    fn from(value: &DevfileSchemaVersion222ComponentsItemVariant0Name) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for DevfileSchemaVersion222ComponentsItemVariant0Name {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str> for DevfileSchemaVersion222ComponentsItemVariant0Name {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ComponentsItemVariant0Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ComponentsItemVariant0Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de> for DevfileSchemaVersion222ComponentsItemVariant0Name {
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Allows importing into the devworkspace the Kubernetes resources defined in a given manifest. For example this allows reusing the Kubernetes definitions used to deploy some runtime components in production."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Allows importing into the devworkspace the Kubernetes resources defined in a given manifest. For example this allows reusing the Kubernetes definitions used to deploy some runtime components in production.\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"uri\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"inlined\""]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"deployByDefault\": {"]
#[doc = "      \"description\": \"Defines if the component should be deployed during startup.\\n\\nDefault value is `false`\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"endpoints\": {"]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"object\","]
#[doc = "        \"required\": ["]
#[doc = "          \"name\","]
#[doc = "          \"targetPort\""]
#[doc = "        ],"]
#[doc = "        \"properties\": {"]
#[doc = "          \"annotation\": {"]
#[doc = "            \"description\": \"Annotations to be added to Kubernetes Ingress or Openshift Route\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"additionalProperties\": {"]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"attributes\": {"]
#[doc = "            \"description\": \"Map of implementation-dependant string-based free-form attributes.\\n\\nExamples of Che-specific attributes:\\n- cookiesAuthEnabled: \\\"true\\\" / \\\"false\\\",\\n- type: \\\"terminal\\\" / \\\"ide\\\" / \\\"ide-dev\\\",\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"additionalProperties\": true"]
#[doc = "          },"]
#[doc = "          \"exposure\": {"]
#[doc = "            \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "            \"default\": \"public\","]
#[doc = "            \"type\": \"string\","]
#[doc = "            \"enum\": ["]
#[doc = "              \"public\","]
#[doc = "              \"internal\","]
#[doc = "              \"none\""]
#[doc = "            ]"]
#[doc = "          },"]
#[doc = "          \"name\": {"]
#[doc = "            \"type\": \"string\","]
#[doc = "            \"maxLength\": 15,"]
#[doc = "            \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "          },"]
#[doc = "          \"path\": {"]
#[doc = "            \"description\": \"Path of the endpoint URL\","]
#[doc = "            \"type\": \"string\""]
#[doc = "          },"]
#[doc = "          \"protocol\": {"]
#[doc = "            \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "            \"default\": \"http\","]
#[doc = "            \"type\": \"string\","]
#[doc = "            \"enum\": ["]
#[doc = "              \"http\","]
#[doc = "              \"https\","]
#[doc = "              \"ws\","]
#[doc = "              \"wss\","]
#[doc = "              \"tcp\","]
#[doc = "              \"udp\""]
#[doc = "            ]"]
#[doc = "          },"]
#[doc = "          \"secure\": {"]
#[doc = "            \"description\": \"Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.\","]
#[doc = "            \"type\": \"boolean\""]
#[doc = "          },"]
#[doc = "          \"targetPort\": {"]
#[doc = "            \"description\": \"Port number to be used within the container component. The same port cannot be used by two different container components.\","]
#[doc = "            \"type\": \"integer\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"additionalProperties\": false"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"inlined\": {"]
#[doc = "      \"description\": \"Inlined manifest\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"uri\": {"]
#[doc = "      \"description\": \"Location in a file fetched from a uri.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged, deny_unknown_fields)]
pub enum DevfileSchemaVersion222ComponentsItemVariant1Kubernetes {
    Variant0 {
        #[doc = "Defines if the component should be deployed during startup.\n\nDefault value is `false`"]
        #[serde(
            rename = "deployByDefault",
            default,
            skip_serializing_if = "::std::option::Option::is_none"
        )]
        deploy_by_default: ::std::option::Option<bool>,
        #[serde(default, skip_serializing_if = "::std::vec::Vec::is_empty")]
        endpoints: ::std::vec::Vec<
            DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant0EndpointsItem,
        >,
        #[doc = "Location in a file fetched from a uri."]
        uri: ::std::string::String,
    },
    Variant1 {
        #[doc = "Defines if the component should be deployed during startup.\n\nDefault value is `false`"]
        #[serde(
            rename = "deployByDefault",
            default,
            skip_serializing_if = "::std::option::Option::is_none"
        )]
        deploy_by_default: ::std::option::Option<bool>,
        #[serde(default, skip_serializing_if = "::std::vec::Vec::is_empty")]
        endpoints: ::std::vec::Vec<
            DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant1EndpointsItem,
        >,
        #[doc = "Inlined manifest"]
        inlined: ::std::string::String,
    },
}
impl ::std::convert::From<&Self> for DevfileSchemaVersion222ComponentsItemVariant1Kubernetes {
    fn from(value: &DevfileSchemaVersion222ComponentsItemVariant1Kubernetes) -> Self {
        value.clone()
    }
}
#[doc = "`DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant0EndpointsItem`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"name\","]
#[doc = "    \"targetPort\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"annotation\": {"]
#[doc = "      \"description\": \"Annotations to be added to Kubernetes Ingress or Openshift Route\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"attributes\": {"]
#[doc = "      \"description\": \"Map of implementation-dependant string-based free-form attributes.\\n\\nExamples of Che-specific attributes:\\n- cookiesAuthEnabled: \\\"true\\\" / \\\"false\\\",\\n- type: \\\"terminal\\\" / \\\"ide\\\" / \\\"ide-dev\\\",\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": true"]
#[doc = "    },"]
#[doc = "    \"exposure\": {"]
#[doc = "      \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "      \"default\": \"public\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"public\","]
#[doc = "        \"internal\","]
#[doc = "        \"none\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"maxLength\": 15,"]
#[doc = "      \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "    },"]
#[doc = "    \"path\": {"]
#[doc = "      \"description\": \"Path of the endpoint URL\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"protocol\": {"]
#[doc = "      \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "      \"default\": \"http\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"http\","]
#[doc = "        \"https\","]
#[doc = "        \"ws\","]
#[doc = "        \"wss\","]
#[doc = "        \"tcp\","]
#[doc = "        \"udp\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"secure\": {"]
#[doc = "      \"description\": \"Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"targetPort\": {"]
#[doc = "      \"description\": \"Port number to be used within the container component. The same port cannot be used by two different container components.\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
pub struct DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant0EndpointsItem {
    #[doc = "Annotations to be added to Kubernetes Ingress or Openshift Route"]
    #[serde(
        default,
        skip_serializing_if = ":: std :: collections :: HashMap::is_empty"
    )]
    pub annotation: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    #[doc = "Map of implementation-dependant string-based free-form attributes.\n\nExamples of Che-specific attributes:\n- cookiesAuthEnabled: \"true\" / \"false\",\n- type: \"terminal\" / \"ide\" / \"ide-dev\","]
    #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
    pub attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
    #[doc = "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`"]
    #[serde(
        default = "defaults::devfile_schema_version222_components_item_variant1_kubernetes_variant0_endpoints_item_exposure"
    )]
    pub exposure:
        DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant0EndpointsItemExposure,
    pub name: DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant0EndpointsItemName,
    #[doc = "Path of the endpoint URL"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub path: ::std::option::Option<::std::string::String>,
    #[doc = "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`"]
    #[serde(
        default = "defaults::devfile_schema_version222_components_item_variant1_kubernetes_variant0_endpoints_item_protocol"
    )]
    pub protocol:
        DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant0EndpointsItemProtocol,
    #[doc = "Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`."]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub secure: ::std::option::Option<bool>,
    #[doc = "Port number to be used within the container component. The same port cannot be used by two different container components."]
    #[serde(rename = "targetPort")]
    pub target_port: i64,
}
impl
    ::std::convert::From<
        &DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant0EndpointsItem,
    > for DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant0EndpointsItem
{
    fn from(
        value: &DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant0EndpointsItem,
    ) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant0EndpointsItem {
    pub fn builder(
    ) -> builder::DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant0EndpointsItem {
        Default::default()
    }
}
#[doc = "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "  \"default\": \"public\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"public\","]
#[doc = "    \"internal\","]
#[doc = "    \"none\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
#[derive(Default)]
pub enum DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant0EndpointsItemExposure {
    #[serde(rename = "public")]
    #[default]
    Public,
    #[serde(rename = "internal")]
    Internal,
    #[serde(rename = "none")]
    None,
}
impl ::std::convert::From<&Self>
    for DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant0EndpointsItemExposure
{
    fn from(
        value : & DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant0EndpointsItemExposure,
    ) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display
    for DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant0EndpointsItemExposure
{
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Public => f.write_str("public"),
            Self::Internal => f.write_str("internal"),
            Self::None => f.write_str("none"),
        }
    }
}
impl ::std::str::FromStr
    for DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant0EndpointsItemExposure
{
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        match value {
            "public" => Ok(Self::Public),
            "internal" => Ok(Self::Internal),
            "none" => Ok(Self::None),
            _ => Err("invalid value".into()),
        }
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant0EndpointsItemExposure
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant0EndpointsItemExposure
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant0EndpointsItemExposure
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "`DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant0EndpointsItemName`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 15,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant0EndpointsItemName(
    ::std::string::String,
);
impl ::std::ops::Deref
    for DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant0EndpointsItemName
{
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl
    ::std::convert::From<
        DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant0EndpointsItemName,
    > for ::std::string::String
{
    fn from(
        value: DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant0EndpointsItemName,
    ) -> Self {
        value.0
    }
}
impl
    ::std::convert::From<
        &DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant0EndpointsItemName,
    > for DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant0EndpointsItemName
{
    fn from(
        value: &DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant0EndpointsItemName,
    ) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr
    for DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant0EndpointsItemName
{
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 15usize {
            return Err("longer than 15 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant0EndpointsItemName
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant0EndpointsItemName
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant0EndpointsItemName
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de>
    for DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant0EndpointsItemName
{
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "  \"default\": \"http\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"http\","]
#[doc = "    \"https\","]
#[doc = "    \"ws\","]
#[doc = "    \"wss\","]
#[doc = "    \"tcp\","]
#[doc = "    \"udp\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
#[derive(Default)]
pub enum DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant0EndpointsItemProtocol {
    #[serde(rename = "http")]
    #[default]
    Http,
    #[serde(rename = "https")]
    Https,
    #[serde(rename = "ws")]
    Ws,
    #[serde(rename = "wss")]
    Wss,
    #[serde(rename = "tcp")]
    Tcp,
    #[serde(rename = "udp")]
    Udp,
}
impl ::std::convert::From<&Self>
    for DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant0EndpointsItemProtocol
{
    fn from(
        value : & DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant0EndpointsItemProtocol,
    ) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display
    for DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant0EndpointsItemProtocol
{
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Http => f.write_str("http"),
            Self::Https => f.write_str("https"),
            Self::Ws => f.write_str("ws"),
            Self::Wss => f.write_str("wss"),
            Self::Tcp => f.write_str("tcp"),
            Self::Udp => f.write_str("udp"),
        }
    }
}
impl ::std::str::FromStr
    for DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant0EndpointsItemProtocol
{
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        match value {
            "http" => Ok(Self::Http),
            "https" => Ok(Self::Https),
            "ws" => Ok(Self::Ws),
            "wss" => Ok(Self::Wss),
            "tcp" => Ok(Self::Tcp),
            "udp" => Ok(Self::Udp),
            _ => Err("invalid value".into()),
        }
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant0EndpointsItemProtocol
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant0EndpointsItemProtocol
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant0EndpointsItemProtocol
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "`DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant1EndpointsItem`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"name\","]
#[doc = "    \"targetPort\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"annotation\": {"]
#[doc = "      \"description\": \"Annotations to be added to Kubernetes Ingress or Openshift Route\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"attributes\": {"]
#[doc = "      \"description\": \"Map of implementation-dependant string-based free-form attributes.\\n\\nExamples of Che-specific attributes:\\n- cookiesAuthEnabled: \\\"true\\\" / \\\"false\\\",\\n- type: \\\"terminal\\\" / \\\"ide\\\" / \\\"ide-dev\\\",\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": true"]
#[doc = "    },"]
#[doc = "    \"exposure\": {"]
#[doc = "      \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "      \"default\": \"public\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"public\","]
#[doc = "        \"internal\","]
#[doc = "        \"none\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"maxLength\": 15,"]
#[doc = "      \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "    },"]
#[doc = "    \"path\": {"]
#[doc = "      \"description\": \"Path of the endpoint URL\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"protocol\": {"]
#[doc = "      \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "      \"default\": \"http\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"http\","]
#[doc = "        \"https\","]
#[doc = "        \"ws\","]
#[doc = "        \"wss\","]
#[doc = "        \"tcp\","]
#[doc = "        \"udp\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"secure\": {"]
#[doc = "      \"description\": \"Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"targetPort\": {"]
#[doc = "      \"description\": \"Port number to be used within the container component. The same port cannot be used by two different container components.\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
pub struct DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant1EndpointsItem {
    #[doc = "Annotations to be added to Kubernetes Ingress or Openshift Route"]
    #[serde(
        default,
        skip_serializing_if = ":: std :: collections :: HashMap::is_empty"
    )]
    pub annotation: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    #[doc = "Map of implementation-dependant string-based free-form attributes.\n\nExamples of Che-specific attributes:\n- cookiesAuthEnabled: \"true\" / \"false\",\n- type: \"terminal\" / \"ide\" / \"ide-dev\","]
    #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
    pub attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
    #[doc = "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`"]
    #[serde(
        default = "defaults::devfile_schema_version222_components_item_variant1_kubernetes_variant1_endpoints_item_exposure"
    )]
    pub exposure:
        DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant1EndpointsItemExposure,
    pub name: DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant1EndpointsItemName,
    #[doc = "Path of the endpoint URL"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub path: ::std::option::Option<::std::string::String>,
    #[doc = "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`"]
    #[serde(
        default = "defaults::devfile_schema_version222_components_item_variant1_kubernetes_variant1_endpoints_item_protocol"
    )]
    pub protocol:
        DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant1EndpointsItemProtocol,
    #[doc = "Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`."]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub secure: ::std::option::Option<bool>,
    #[doc = "Port number to be used within the container component. The same port cannot be used by two different container components."]
    #[serde(rename = "targetPort")]
    pub target_port: i64,
}
impl
    ::std::convert::From<
        &DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant1EndpointsItem,
    > for DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant1EndpointsItem
{
    fn from(
        value: &DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant1EndpointsItem,
    ) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant1EndpointsItem {
    pub fn builder(
    ) -> builder::DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant1EndpointsItem {
        Default::default()
    }
}
#[doc = "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "  \"default\": \"public\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"public\","]
#[doc = "    \"internal\","]
#[doc = "    \"none\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
#[derive(Default)]
pub enum DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant1EndpointsItemExposure {
    #[serde(rename = "public")]
    #[default]
    Public,
    #[serde(rename = "internal")]
    Internal,
    #[serde(rename = "none")]
    None,
}
impl ::std::convert::From<&Self>
    for DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant1EndpointsItemExposure
{
    fn from(
        value : & DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant1EndpointsItemExposure,
    ) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display
    for DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant1EndpointsItemExposure
{
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Public => f.write_str("public"),
            Self::Internal => f.write_str("internal"),
            Self::None => f.write_str("none"),
        }
    }
}
impl ::std::str::FromStr
    for DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant1EndpointsItemExposure
{
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        match value {
            "public" => Ok(Self::Public),
            "internal" => Ok(Self::Internal),
            "none" => Ok(Self::None),
            _ => Err("invalid value".into()),
        }
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant1EndpointsItemExposure
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant1EndpointsItemExposure
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant1EndpointsItemExposure
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "`DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant1EndpointsItemName`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 15,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant1EndpointsItemName(
    ::std::string::String,
);
impl ::std::ops::Deref
    for DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant1EndpointsItemName
{
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl
    ::std::convert::From<
        DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant1EndpointsItemName,
    > for ::std::string::String
{
    fn from(
        value: DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant1EndpointsItemName,
    ) -> Self {
        value.0
    }
}
impl
    ::std::convert::From<
        &DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant1EndpointsItemName,
    > for DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant1EndpointsItemName
{
    fn from(
        value: &DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant1EndpointsItemName,
    ) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr
    for DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant1EndpointsItemName
{
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 15usize {
            return Err("longer than 15 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant1EndpointsItemName
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant1EndpointsItemName
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant1EndpointsItemName
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de>
    for DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant1EndpointsItemName
{
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "  \"default\": \"http\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"http\","]
#[doc = "    \"https\","]
#[doc = "    \"ws\","]
#[doc = "    \"wss\","]
#[doc = "    \"tcp\","]
#[doc = "    \"udp\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
#[derive(Default)]
pub enum DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant1EndpointsItemProtocol {
    #[serde(rename = "http")]
    #[default]
    Http,
    #[serde(rename = "https")]
    Https,
    #[serde(rename = "ws")]
    Ws,
    #[serde(rename = "wss")]
    Wss,
    #[serde(rename = "tcp")]
    Tcp,
    #[serde(rename = "udp")]
    Udp,
}
impl ::std::convert::From<&Self>
    for DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant1EndpointsItemProtocol
{
    fn from(
        value : & DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant1EndpointsItemProtocol,
    ) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display
    for DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant1EndpointsItemProtocol
{
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Http => f.write_str("http"),
            Self::Https => f.write_str("https"),
            Self::Ws => f.write_str("ws"),
            Self::Wss => f.write_str("wss"),
            Self::Tcp => f.write_str("tcp"),
            Self::Udp => f.write_str("udp"),
        }
    }
}
impl ::std::str::FromStr
    for DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant1EndpointsItemProtocol
{
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        match value {
            "http" => Ok(Self::Http),
            "https" => Ok(Self::Https),
            "ws" => Ok(Self::Ws),
            "wss" => Ok(Self::Wss),
            "tcp" => Ok(Self::Tcp),
            "udp" => Ok(Self::Udp),
            _ => Err("invalid value".into()),
        }
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant1EndpointsItemProtocol
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant1EndpointsItemProtocol
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant1EndpointsItemProtocol
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin.\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ComponentsItemVariant1Name(::std::string::String);
impl ::std::ops::Deref for DevfileSchemaVersion222ComponentsItemVariant1Name {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222ComponentsItemVariant1Name>
    for ::std::string::String
{
    fn from(value: DevfileSchemaVersion222ComponentsItemVariant1Name) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222ComponentsItemVariant1Name>
    for DevfileSchemaVersion222ComponentsItemVariant1Name
{
    fn from(value: &DevfileSchemaVersion222ComponentsItemVariant1Name) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for DevfileSchemaVersion222ComponentsItemVariant1Name {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str> for DevfileSchemaVersion222ComponentsItemVariant1Name {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ComponentsItemVariant1Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ComponentsItemVariant1Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de> for DevfileSchemaVersion222ComponentsItemVariant1Name {
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin.\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ComponentsItemVariant2Name(::std::string::String);
impl ::std::ops::Deref for DevfileSchemaVersion222ComponentsItemVariant2Name {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222ComponentsItemVariant2Name>
    for ::std::string::String
{
    fn from(value: DevfileSchemaVersion222ComponentsItemVariant2Name) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222ComponentsItemVariant2Name>
    for DevfileSchemaVersion222ComponentsItemVariant2Name
{
    fn from(value: &DevfileSchemaVersion222ComponentsItemVariant2Name) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for DevfileSchemaVersion222ComponentsItemVariant2Name {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str> for DevfileSchemaVersion222ComponentsItemVariant2Name {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ComponentsItemVariant2Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ComponentsItemVariant2Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de> for DevfileSchemaVersion222ComponentsItemVariant2Name {
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Allows importing into the devworkspace the OpenShift resources defined in a given manifest. For example this allows reusing the OpenShift definitions used to deploy some runtime components in production."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Allows importing into the devworkspace the OpenShift resources defined in a given manifest. For example this allows reusing the OpenShift definitions used to deploy some runtime components in production.\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"uri\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"inlined\""]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"deployByDefault\": {"]
#[doc = "      \"description\": \"Defines if the component should be deployed during startup.\\n\\nDefault value is `false`\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"endpoints\": {"]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"object\","]
#[doc = "        \"required\": ["]
#[doc = "          \"name\","]
#[doc = "          \"targetPort\""]
#[doc = "        ],"]
#[doc = "        \"properties\": {"]
#[doc = "          \"annotation\": {"]
#[doc = "            \"description\": \"Annotations to be added to Kubernetes Ingress or Openshift Route\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"additionalProperties\": {"]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"attributes\": {"]
#[doc = "            \"description\": \"Map of implementation-dependant string-based free-form attributes.\\n\\nExamples of Che-specific attributes:\\n- cookiesAuthEnabled: \\\"true\\\" / \\\"false\\\",\\n- type: \\\"terminal\\\" / \\\"ide\\\" / \\\"ide-dev\\\",\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"additionalProperties\": true"]
#[doc = "          },"]
#[doc = "          \"exposure\": {"]
#[doc = "            \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "            \"default\": \"public\","]
#[doc = "            \"type\": \"string\","]
#[doc = "            \"enum\": ["]
#[doc = "              \"public\","]
#[doc = "              \"internal\","]
#[doc = "              \"none\""]
#[doc = "            ]"]
#[doc = "          },"]
#[doc = "          \"name\": {"]
#[doc = "            \"type\": \"string\","]
#[doc = "            \"maxLength\": 15,"]
#[doc = "            \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "          },"]
#[doc = "          \"path\": {"]
#[doc = "            \"description\": \"Path of the endpoint URL\","]
#[doc = "            \"type\": \"string\""]
#[doc = "          },"]
#[doc = "          \"protocol\": {"]
#[doc = "            \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "            \"default\": \"http\","]
#[doc = "            \"type\": \"string\","]
#[doc = "            \"enum\": ["]
#[doc = "              \"http\","]
#[doc = "              \"https\","]
#[doc = "              \"ws\","]
#[doc = "              \"wss\","]
#[doc = "              \"tcp\","]
#[doc = "              \"udp\""]
#[doc = "            ]"]
#[doc = "          },"]
#[doc = "          \"secure\": {"]
#[doc = "            \"description\": \"Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.\","]
#[doc = "            \"type\": \"boolean\""]
#[doc = "          },"]
#[doc = "          \"targetPort\": {"]
#[doc = "            \"description\": \"Port number to be used within the container component. The same port cannot be used by two different container components.\","]
#[doc = "            \"type\": \"integer\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"additionalProperties\": false"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"inlined\": {"]
#[doc = "      \"description\": \"Inlined manifest\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"uri\": {"]
#[doc = "      \"description\": \"Location in a file fetched from a uri.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged, deny_unknown_fields)]
pub enum DevfileSchemaVersion222ComponentsItemVariant2Openshift {
    Variant0 {
        #[doc = "Defines if the component should be deployed during startup.\n\nDefault value is `false`"]
        #[serde(
            rename = "deployByDefault",
            default,
            skip_serializing_if = "::std::option::Option::is_none"
        )]
        deploy_by_default: ::std::option::Option<bool>,
        #[serde(default, skip_serializing_if = "::std::vec::Vec::is_empty")]
        endpoints: ::std::vec::Vec<
            DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant0EndpointsItem,
        >,
        #[doc = "Location in a file fetched from a uri."]
        uri: ::std::string::String,
    },
    Variant1 {
        #[doc = "Defines if the component should be deployed during startup.\n\nDefault value is `false`"]
        #[serde(
            rename = "deployByDefault",
            default,
            skip_serializing_if = "::std::option::Option::is_none"
        )]
        deploy_by_default: ::std::option::Option<bool>,
        #[serde(default, skip_serializing_if = "::std::vec::Vec::is_empty")]
        endpoints: ::std::vec::Vec<
            DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant1EndpointsItem,
        >,
        #[doc = "Inlined manifest"]
        inlined: ::std::string::String,
    },
}
impl ::std::convert::From<&Self> for DevfileSchemaVersion222ComponentsItemVariant2Openshift {
    fn from(value: &DevfileSchemaVersion222ComponentsItemVariant2Openshift) -> Self {
        value.clone()
    }
}
#[doc = "`DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant0EndpointsItem`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"name\","]
#[doc = "    \"targetPort\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"annotation\": {"]
#[doc = "      \"description\": \"Annotations to be added to Kubernetes Ingress or Openshift Route\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"attributes\": {"]
#[doc = "      \"description\": \"Map of implementation-dependant string-based free-form attributes.\\n\\nExamples of Che-specific attributes:\\n- cookiesAuthEnabled: \\\"true\\\" / \\\"false\\\",\\n- type: \\\"terminal\\\" / \\\"ide\\\" / \\\"ide-dev\\\",\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": true"]
#[doc = "    },"]
#[doc = "    \"exposure\": {"]
#[doc = "      \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "      \"default\": \"public\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"public\","]
#[doc = "        \"internal\","]
#[doc = "        \"none\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"maxLength\": 15,"]
#[doc = "      \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "    },"]
#[doc = "    \"path\": {"]
#[doc = "      \"description\": \"Path of the endpoint URL\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"protocol\": {"]
#[doc = "      \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "      \"default\": \"http\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"http\","]
#[doc = "        \"https\","]
#[doc = "        \"ws\","]
#[doc = "        \"wss\","]
#[doc = "        \"tcp\","]
#[doc = "        \"udp\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"secure\": {"]
#[doc = "      \"description\": \"Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"targetPort\": {"]
#[doc = "      \"description\": \"Port number to be used within the container component. The same port cannot be used by two different container components.\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
pub struct DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant0EndpointsItem {
    #[doc = "Annotations to be added to Kubernetes Ingress or Openshift Route"]
    #[serde(
        default,
        skip_serializing_if = ":: std :: collections :: HashMap::is_empty"
    )]
    pub annotation: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    #[doc = "Map of implementation-dependant string-based free-form attributes.\n\nExamples of Che-specific attributes:\n- cookiesAuthEnabled: \"true\" / \"false\",\n- type: \"terminal\" / \"ide\" / \"ide-dev\","]
    #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
    pub attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
    #[doc = "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`"]
    #[serde(
        default = "defaults::devfile_schema_version222_components_item_variant2_openshift_variant0_endpoints_item_exposure"
    )]
    pub exposure:
        DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant0EndpointsItemExposure,
    pub name: DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant0EndpointsItemName,
    #[doc = "Path of the endpoint URL"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub path: ::std::option::Option<::std::string::String>,
    #[doc = "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`"]
    #[serde(
        default = "defaults::devfile_schema_version222_components_item_variant2_openshift_variant0_endpoints_item_protocol"
    )]
    pub protocol:
        DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant0EndpointsItemProtocol,
    #[doc = "Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`."]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub secure: ::std::option::Option<bool>,
    #[doc = "Port number to be used within the container component. The same port cannot be used by two different container components."]
    #[serde(rename = "targetPort")]
    pub target_port: i64,
}
impl
    ::std::convert::From<
        &DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant0EndpointsItem,
    > for DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant0EndpointsItem
{
    fn from(
        value: &DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant0EndpointsItem,
    ) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant0EndpointsItem {
    pub fn builder(
    ) -> builder::DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant0EndpointsItem {
        Default::default()
    }
}
#[doc = "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "  \"default\": \"public\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"public\","]
#[doc = "    \"internal\","]
#[doc = "    \"none\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
#[derive(Default)]
pub enum DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant0EndpointsItemExposure {
    #[serde(rename = "public")]
    #[default]
    Public,
    #[serde(rename = "internal")]
    Internal,
    #[serde(rename = "none")]
    None,
}
impl ::std::convert::From<&Self>
    for DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant0EndpointsItemExposure
{
    fn from(
        value: &DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant0EndpointsItemExposure,
    ) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display
    for DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant0EndpointsItemExposure
{
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Public => f.write_str("public"),
            Self::Internal => f.write_str("internal"),
            Self::None => f.write_str("none"),
        }
    }
}
impl ::std::str::FromStr
    for DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant0EndpointsItemExposure
{
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        match value {
            "public" => Ok(Self::Public),
            "internal" => Ok(Self::Internal),
            "none" => Ok(Self::None),
            _ => Err("invalid value".into()),
        }
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant0EndpointsItemExposure
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant0EndpointsItemExposure
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant0EndpointsItemExposure
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "`DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant0EndpointsItemName`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 15,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant0EndpointsItemName(
    ::std::string::String,
);
impl ::std::ops::Deref
    for DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant0EndpointsItemName
{
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl
    ::std::convert::From<
        DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant0EndpointsItemName,
    > for ::std::string::String
{
    fn from(
        value: DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant0EndpointsItemName,
    ) -> Self {
        value.0
    }
}
impl
    ::std::convert::From<
        &DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant0EndpointsItemName,
    > for DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant0EndpointsItemName
{
    fn from(
        value: &DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant0EndpointsItemName,
    ) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr
    for DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant0EndpointsItemName
{
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 15usize {
            return Err("longer than 15 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant0EndpointsItemName
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant0EndpointsItemName
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant0EndpointsItemName
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de>
    for DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant0EndpointsItemName
{
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "  \"default\": \"http\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"http\","]
#[doc = "    \"https\","]
#[doc = "    \"ws\","]
#[doc = "    \"wss\","]
#[doc = "    \"tcp\","]
#[doc = "    \"udp\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
#[derive(Default)]
pub enum DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant0EndpointsItemProtocol {
    #[serde(rename = "http")]
    #[default]
    Http,
    #[serde(rename = "https")]
    Https,
    #[serde(rename = "ws")]
    Ws,
    #[serde(rename = "wss")]
    Wss,
    #[serde(rename = "tcp")]
    Tcp,
    #[serde(rename = "udp")]
    Udp,
}
impl ::std::convert::From<&Self>
    for DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant0EndpointsItemProtocol
{
    fn from(
        value: &DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant0EndpointsItemProtocol,
    ) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display
    for DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant0EndpointsItemProtocol
{
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Http => f.write_str("http"),
            Self::Https => f.write_str("https"),
            Self::Ws => f.write_str("ws"),
            Self::Wss => f.write_str("wss"),
            Self::Tcp => f.write_str("tcp"),
            Self::Udp => f.write_str("udp"),
        }
    }
}
impl ::std::str::FromStr
    for DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant0EndpointsItemProtocol
{
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        match value {
            "http" => Ok(Self::Http),
            "https" => Ok(Self::Https),
            "ws" => Ok(Self::Ws),
            "wss" => Ok(Self::Wss),
            "tcp" => Ok(Self::Tcp),
            "udp" => Ok(Self::Udp),
            _ => Err("invalid value".into()),
        }
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant0EndpointsItemProtocol
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant0EndpointsItemProtocol
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant0EndpointsItemProtocol
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "`DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant1EndpointsItem`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"name\","]
#[doc = "    \"targetPort\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"annotation\": {"]
#[doc = "      \"description\": \"Annotations to be added to Kubernetes Ingress or Openshift Route\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"attributes\": {"]
#[doc = "      \"description\": \"Map of implementation-dependant string-based free-form attributes.\\n\\nExamples of Che-specific attributes:\\n- cookiesAuthEnabled: \\\"true\\\" / \\\"false\\\",\\n- type: \\\"terminal\\\" / \\\"ide\\\" / \\\"ide-dev\\\",\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": true"]
#[doc = "    },"]
#[doc = "    \"exposure\": {"]
#[doc = "      \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "      \"default\": \"public\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"public\","]
#[doc = "        \"internal\","]
#[doc = "        \"none\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"maxLength\": 15,"]
#[doc = "      \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "    },"]
#[doc = "    \"path\": {"]
#[doc = "      \"description\": \"Path of the endpoint URL\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"protocol\": {"]
#[doc = "      \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "      \"default\": \"http\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"http\","]
#[doc = "        \"https\","]
#[doc = "        \"ws\","]
#[doc = "        \"wss\","]
#[doc = "        \"tcp\","]
#[doc = "        \"udp\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"secure\": {"]
#[doc = "      \"description\": \"Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"targetPort\": {"]
#[doc = "      \"description\": \"Port number to be used within the container component. The same port cannot be used by two different container components.\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
pub struct DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant1EndpointsItem {
    #[doc = "Annotations to be added to Kubernetes Ingress or Openshift Route"]
    #[serde(
        default,
        skip_serializing_if = ":: std :: collections :: HashMap::is_empty"
    )]
    pub annotation: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    #[doc = "Map of implementation-dependant string-based free-form attributes.\n\nExamples of Che-specific attributes:\n- cookiesAuthEnabled: \"true\" / \"false\",\n- type: \"terminal\" / \"ide\" / \"ide-dev\","]
    #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
    pub attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
    #[doc = "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`"]
    #[serde(
        default = "defaults::devfile_schema_version222_components_item_variant2_openshift_variant1_endpoints_item_exposure"
    )]
    pub exposure:
        DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant1EndpointsItemExposure,
    pub name: DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant1EndpointsItemName,
    #[doc = "Path of the endpoint URL"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub path: ::std::option::Option<::std::string::String>,
    #[doc = "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`"]
    #[serde(
        default = "defaults::devfile_schema_version222_components_item_variant2_openshift_variant1_endpoints_item_protocol"
    )]
    pub protocol:
        DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant1EndpointsItemProtocol,
    #[doc = "Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`."]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub secure: ::std::option::Option<bool>,
    #[doc = "Port number to be used within the container component. The same port cannot be used by two different container components."]
    #[serde(rename = "targetPort")]
    pub target_port: i64,
}
impl
    ::std::convert::From<
        &DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant1EndpointsItem,
    > for DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant1EndpointsItem
{
    fn from(
        value: &DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant1EndpointsItem,
    ) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant1EndpointsItem {
    pub fn builder(
    ) -> builder::DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant1EndpointsItem {
        Default::default()
    }
}
#[doc = "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "  \"default\": \"public\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"public\","]
#[doc = "    \"internal\","]
#[doc = "    \"none\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
#[derive(Default)]
pub enum DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant1EndpointsItemExposure {
    #[serde(rename = "public")]
    #[default]
    Public,
    #[serde(rename = "internal")]
    Internal,
    #[serde(rename = "none")]
    None,
}
impl ::std::convert::From<&Self>
    for DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant1EndpointsItemExposure
{
    fn from(
        value: &DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant1EndpointsItemExposure,
    ) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display
    for DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant1EndpointsItemExposure
{
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Public => f.write_str("public"),
            Self::Internal => f.write_str("internal"),
            Self::None => f.write_str("none"),
        }
    }
}
impl ::std::str::FromStr
    for DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant1EndpointsItemExposure
{
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        match value {
            "public" => Ok(Self::Public),
            "internal" => Ok(Self::Internal),
            "none" => Ok(Self::None),
            _ => Err("invalid value".into()),
        }
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant1EndpointsItemExposure
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant1EndpointsItemExposure
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant1EndpointsItemExposure
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "`DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant1EndpointsItemName`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 15,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant1EndpointsItemName(
    ::std::string::String,
);
impl ::std::ops::Deref
    for DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant1EndpointsItemName
{
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl
    ::std::convert::From<
        DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant1EndpointsItemName,
    > for ::std::string::String
{
    fn from(
        value: DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant1EndpointsItemName,
    ) -> Self {
        value.0
    }
}
impl
    ::std::convert::From<
        &DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant1EndpointsItemName,
    > for DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant1EndpointsItemName
{
    fn from(
        value: &DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant1EndpointsItemName,
    ) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr
    for DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant1EndpointsItemName
{
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 15usize {
            return Err("longer than 15 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant1EndpointsItemName
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant1EndpointsItemName
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant1EndpointsItemName
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de>
    for DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant1EndpointsItemName
{
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "  \"default\": \"http\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"http\","]
#[doc = "    \"https\","]
#[doc = "    \"ws\","]
#[doc = "    \"wss\","]
#[doc = "    \"tcp\","]
#[doc = "    \"udp\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
#[derive(Default)]
pub enum DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant1EndpointsItemProtocol {
    #[serde(rename = "http")]
    #[default]
    Http,
    #[serde(rename = "https")]
    Https,
    #[serde(rename = "ws")]
    Ws,
    #[serde(rename = "wss")]
    Wss,
    #[serde(rename = "tcp")]
    Tcp,
    #[serde(rename = "udp")]
    Udp,
}
impl ::std::convert::From<&Self>
    for DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant1EndpointsItemProtocol
{
    fn from(
        value: &DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant1EndpointsItemProtocol,
    ) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display
    for DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant1EndpointsItemProtocol
{
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Http => f.write_str("http"),
            Self::Https => f.write_str("https"),
            Self::Ws => f.write_str("ws"),
            Self::Wss => f.write_str("wss"),
            Self::Tcp => f.write_str("tcp"),
            Self::Udp => f.write_str("udp"),
        }
    }
}
impl ::std::str::FromStr
    for DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant1EndpointsItemProtocol
{
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        match value {
            "http" => Ok(Self::Http),
            "https" => Ok(Self::Https),
            "ws" => Ok(Self::Ws),
            "wss" => Ok(Self::Wss),
            "tcp" => Ok(Self::Tcp),
            "udp" => Ok(Self::Udp),
            _ => Err("invalid value".into()),
        }
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant1EndpointsItemProtocol
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant1EndpointsItemProtocol
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant1EndpointsItemProtocol
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin.\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ComponentsItemVariant3Name(::std::string::String);
impl ::std::ops::Deref for DevfileSchemaVersion222ComponentsItemVariant3Name {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222ComponentsItemVariant3Name>
    for ::std::string::String
{
    fn from(value: DevfileSchemaVersion222ComponentsItemVariant3Name) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222ComponentsItemVariant3Name>
    for DevfileSchemaVersion222ComponentsItemVariant3Name
{
    fn from(value: &DevfileSchemaVersion222ComponentsItemVariant3Name) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for DevfileSchemaVersion222ComponentsItemVariant3Name {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str> for DevfileSchemaVersion222ComponentsItemVariant3Name {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ComponentsItemVariant3Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ComponentsItemVariant3Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de> for DevfileSchemaVersion222ComponentsItemVariant3Name {
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Allows specifying the definition of a volume shared by several other components"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Allows specifying the definition of a volume shared by several other components\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"ephemeral\": {"]
#[doc = "      \"description\": \"Ephemeral volumes are not stored persistently across restarts. Defaults to false\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"size\": {"]
#[doc = "      \"description\": \"Size of the volume\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ComponentsItemVariant3Volume {
    #[doc = "Ephemeral volumes are not stored persistently across restarts. Defaults to false"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub ephemeral: ::std::option::Option<bool>,
    #[doc = "Size of the volume"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub size: ::std::option::Option<::std::string::String>,
}
impl ::std::convert::From<&DevfileSchemaVersion222ComponentsItemVariant3Volume>
    for DevfileSchemaVersion222ComponentsItemVariant3Volume
{
    fn from(value: &DevfileSchemaVersion222ComponentsItemVariant3Volume) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ComponentsItemVariant3Volume {
    pub fn builder() -> builder::DevfileSchemaVersion222ComponentsItemVariant3Volume {
        Default::default()
    }
}
#[doc = "Allows specifying the definition of an image for outer loop builds"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Allows specifying the definition of an image for outer loop builds\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"dockerfile\""]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  ],"]
#[doc = "  \"required\": ["]
#[doc = "    \"imageName\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"autoBuild\": {"]
#[doc = "      \"description\": \"Defines if the image should be built during startup.\\n\\nDefault value is `false`\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"dockerfile\": {"]
#[doc = "      \"description\": \"Allows specifying dockerfile type build\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"required\": ["]
#[doc = "            \"uri\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"required\": ["]
#[doc = "            \"devfileRegistry\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"required\": ["]
#[doc = "            \"git\""]
#[doc = "          ]"]
#[doc = "        }"]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"args\": {"]
#[doc = "          \"description\": \"The arguments to supply to the dockerfile build.\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"buildContext\": {"]
#[doc = "          \"description\": \"Path of source directory to establish build context. Defaults to ${PROJECT_SOURCE} in the container\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"devfileRegistry\": {"]
#[doc = "          \"description\": \"Dockerfile's Devfile Registry source\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"id\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"id\": {"]
#[doc = "              \"description\": \"Id in a devfile registry that contains a Dockerfile. The src in the OCI registry required for the Dockerfile build will be downloaded for building the image.\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"registryUrl\": {"]
#[doc = "              \"description\": \"Devfile Registry URL to pull the Dockerfile from when using the Devfile Registry as Dockerfile src. To ensure the Dockerfile gets resolved consistently in different environments, it is recommended to always specify the `devfileRegistryUrl` when `Id` is used.\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"git\": {"]
#[doc = "          \"description\": \"Dockerfile's Git source\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"remotes\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"checkoutFrom\": {"]
#[doc = "              \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"properties\": {"]
#[doc = "                \"remote\": {"]
#[doc = "                  \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                },"]
#[doc = "                \"revision\": {"]
#[doc = "                  \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            },"]
#[doc = "            \"fileLocation\": {"]
#[doc = "              \"description\": \"Location of the Dockerfile in the Git repository when using git as Dockerfile src. Defaults to Dockerfile.\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"remotes\": {"]
#[doc = "              \"description\": \"The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"additionalProperties\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"rootRequired\": {"]
#[doc = "          \"description\": \"Specify if a privileged builder pod is required.\\n\\nDefault value is `false`\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"uri\": {"]
#[doc = "          \"description\": \"URI Reference of a Dockerfile. It can be a full URL or a relative URI from the current devfile as the base URI.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"imageName\": {"]
#[doc = "      \"description\": \"Name of the image for the resulting outerloop build\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
pub struct DevfileSchemaVersion222ComponentsItemVariant4Image {
    #[doc = "Defines if the image should be built during startup.\n\nDefault value is `false`"]
    #[serde(
        rename = "autoBuild",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub auto_build: ::std::option::Option<bool>,
    pub dockerfile: DevfileSchemaVersion222ComponentsItemVariant4ImageDockerfile,
    #[doc = "Name of the image for the resulting outerloop build"]
    #[serde(rename = "imageName")]
    pub image_name: ::std::string::String,
}
impl ::std::convert::From<&DevfileSchemaVersion222ComponentsItemVariant4Image>
    for DevfileSchemaVersion222ComponentsItemVariant4Image
{
    fn from(value: &DevfileSchemaVersion222ComponentsItemVariant4Image) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ComponentsItemVariant4Image {
    pub fn builder() -> builder::DevfileSchemaVersion222ComponentsItemVariant4Image {
        Default::default()
    }
}
#[doc = "Allows specifying dockerfile type build"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Allows specifying dockerfile type build\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"uri\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"devfileRegistry\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"git\""]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"args\": {"]
#[doc = "      \"description\": \"The arguments to supply to the dockerfile build.\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"buildContext\": {"]
#[doc = "      \"description\": \"Path of source directory to establish build context. Defaults to ${PROJECT_SOURCE} in the container\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"devfileRegistry\": {"]
#[doc = "      \"description\": \"Dockerfile's Devfile Registry source\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"id\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"id\": {"]
#[doc = "          \"description\": \"Id in a devfile registry that contains a Dockerfile. The src in the OCI registry required for the Dockerfile build will be downloaded for building the image.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"registryUrl\": {"]
#[doc = "          \"description\": \"Devfile Registry URL to pull the Dockerfile from when using the Devfile Registry as Dockerfile src. To ensure the Dockerfile gets resolved consistently in different environments, it is recommended to always specify the `devfileRegistryUrl` when `Id` is used.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"git\": {"]
#[doc = "      \"description\": \"Dockerfile's Git source\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"remotes\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"checkoutFrom\": {"]
#[doc = "          \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"properties\": {"]
#[doc = "            \"remote\": {"]
#[doc = "              \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"revision\": {"]
#[doc = "              \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"fileLocation\": {"]
#[doc = "          \"description\": \"Location of the Dockerfile in the Git repository when using git as Dockerfile src. Defaults to Dockerfile.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"remotes\": {"]
#[doc = "          \"description\": \"The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"additionalProperties\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"rootRequired\": {"]
#[doc = "      \"description\": \"Specify if a privileged builder pod is required.\\n\\nDefault value is `false`\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"uri\": {"]
#[doc = "      \"description\": \"URI Reference of a Dockerfile. It can be a full URL or a relative URI from the current devfile as the base URI.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged, deny_unknown_fields)]
pub enum DevfileSchemaVersion222ComponentsItemVariant4ImageDockerfile {
    Variant0 {
        #[doc = "The arguments to supply to the dockerfile build."]
        #[serde(default, skip_serializing_if = "::std::vec::Vec::is_empty")]
        args: ::std::vec::Vec<::std::string::String>,
        #[doc = "Path of source directory to establish build context. Defaults to ${PROJECT_SOURCE} in the container"]
        #[serde(
            rename = "buildContext",
            default,
            skip_serializing_if = "::std::option::Option::is_none"
        )]
        build_context: ::std::option::Option<::std::string::String>,
        #[doc = "Specify if a privileged builder pod is required.\n\nDefault value is `false`"]
        #[serde(
            rename = "rootRequired",
            default,
            skip_serializing_if = "::std::option::Option::is_none"
        )]
        root_required: ::std::option::Option<bool>,
        #[doc = "URI Reference of a Dockerfile. It can be a full URL or a relative URI from the current devfile as the base URI."]
        uri: ::std::string::String,
    },
    Variant1 {
        #[doc = "The arguments to supply to the dockerfile build."]
        #[serde(default, skip_serializing_if = "::std::vec::Vec::is_empty")]
        args: ::std::vec::Vec<::std::string::String>,
        #[doc = "Path of source directory to establish build context. Defaults to ${PROJECT_SOURCE} in the container"]
        #[serde(
            rename = "buildContext",
            default,
            skip_serializing_if = "::std::option::Option::is_none"
        )]
        build_context: ::std::option::Option<::std::string::String>,
        #[serde(rename = "devfileRegistry")]
        devfile_registry:
            DevfileSchemaVersion222ComponentsItemVariant4ImageDockerfileVariant1DevfileRegistry,
        #[doc = "Specify if a privileged builder pod is required.\n\nDefault value is `false`"]
        #[serde(
            rename = "rootRequired",
            default,
            skip_serializing_if = "::std::option::Option::is_none"
        )]
        root_required: ::std::option::Option<bool>,
    },
    Variant2 {
        #[doc = "The arguments to supply to the dockerfile build."]
        #[serde(default, skip_serializing_if = "::std::vec::Vec::is_empty")]
        args: ::std::vec::Vec<::std::string::String>,
        #[doc = "Path of source directory to establish build context. Defaults to ${PROJECT_SOURCE} in the container"]
        #[serde(
            rename = "buildContext",
            default,
            skip_serializing_if = "::std::option::Option::is_none"
        )]
        build_context: ::std::option::Option<::std::string::String>,
        git: DevfileSchemaVersion222ComponentsItemVariant4ImageDockerfileVariant2Git,
        #[doc = "Specify if a privileged builder pod is required.\n\nDefault value is `false`"]
        #[serde(
            rename = "rootRequired",
            default,
            skip_serializing_if = "::std::option::Option::is_none"
        )]
        root_required: ::std::option::Option<bool>,
    },
}
impl ::std::convert::From<&Self> for DevfileSchemaVersion222ComponentsItemVariant4ImageDockerfile {
    fn from(value: &DevfileSchemaVersion222ComponentsItemVariant4ImageDockerfile) -> Self {
        value.clone()
    }
}
#[doc = "Dockerfile's Devfile Registry source"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Dockerfile's Devfile Registry source\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"id\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"id\": {"]
#[doc = "      \"description\": \"Id in a devfile registry that contains a Dockerfile. The src in the OCI registry required for the Dockerfile build will be downloaded for building the image.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"registryUrl\": {"]
#[doc = "      \"description\": \"Devfile Registry URL to pull the Dockerfile from when using the Devfile Registry as Dockerfile src. To ensure the Dockerfile gets resolved consistently in different environments, it is recommended to always specify the `devfileRegistryUrl` when `Id` is used.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
pub struct DevfileSchemaVersion222ComponentsItemVariant4ImageDockerfileVariant1DevfileRegistry {
    #[doc = "Id in a devfile registry that contains a Dockerfile. The src in the OCI registry required for the Dockerfile build will be downloaded for building the image."]
    pub id: ::std::string::String,
    #[doc = "Devfile Registry URL to pull the Dockerfile from when using the Devfile Registry as Dockerfile src. To ensure the Dockerfile gets resolved consistently in different environments, it is recommended to always specify the `devfileRegistryUrl` when `Id` is used."]
    #[serde(
        rename = "registryUrl",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub registry_url: ::std::option::Option<::std::string::String>,
}
impl
    ::std::convert::From<
        &DevfileSchemaVersion222ComponentsItemVariant4ImageDockerfileVariant1DevfileRegistry,
    > for DevfileSchemaVersion222ComponentsItemVariant4ImageDockerfileVariant1DevfileRegistry
{
    fn from(
        value: &DevfileSchemaVersion222ComponentsItemVariant4ImageDockerfileVariant1DevfileRegistry,
    ) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ComponentsItemVariant4ImageDockerfileVariant1DevfileRegistry {
    pub fn builder(
    ) -> builder::DevfileSchemaVersion222ComponentsItemVariant4ImageDockerfileVariant1DevfileRegistry
    {
        Default::default()
    }
}
#[doc = "Dockerfile's Git source"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Dockerfile's Git source\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"remotes\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"checkoutFrom\": {"]
#[doc = "      \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"remote\": {"]
#[doc = "          \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"revision\": {"]
#[doc = "          \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"fileLocation\": {"]
#[doc = "      \"description\": \"Location of the Dockerfile in the Git repository when using git as Dockerfile src. Defaults to Dockerfile.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"remotes\": {"]
#[doc = "      \"description\": \"The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
pub struct DevfileSchemaVersion222ComponentsItemVariant4ImageDockerfileVariant2Git {
    #[serde(
        rename = "checkoutFrom",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub checkout_from: ::std::option::Option<
        DevfileSchemaVersion222ComponentsItemVariant4ImageDockerfileVariant2GitCheckoutFrom,
    >,
    #[doc = "Location of the Dockerfile in the Git repository when using git as Dockerfile src. Defaults to Dockerfile."]
    #[serde(
        rename = "fileLocation",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub file_location: ::std::option::Option<::std::string::String>,
    #[doc = "The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured."]
    pub remotes: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
}
impl ::std::convert::From<&DevfileSchemaVersion222ComponentsItemVariant4ImageDockerfileVariant2Git>
    for DevfileSchemaVersion222ComponentsItemVariant4ImageDockerfileVariant2Git
{
    fn from(
        value: &DevfileSchemaVersion222ComponentsItemVariant4ImageDockerfileVariant2Git,
    ) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ComponentsItemVariant4ImageDockerfileVariant2Git {
    pub fn builder(
    ) -> builder::DevfileSchemaVersion222ComponentsItemVariant4ImageDockerfileVariant2Git {
        Default::default()
    }
}
#[doc = "Defines from what the project should be checked out. Required if there are more than one remote configured"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"remote\": {"]
#[doc = "      \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"revision\": {"]
#[doc = "      \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ComponentsItemVariant4ImageDockerfileVariant2GitCheckoutFrom {
    #[doc = "The remote name should be used as init. Required if there are more than one remote configured"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub remote: ::std::option::Option<::std::string::String>,
    #[doc = "The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found."]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub revision: ::std::option::Option<::std::string::String>,
}
impl
    ::std::convert::From<
        &DevfileSchemaVersion222ComponentsItemVariant4ImageDockerfileVariant2GitCheckoutFrom,
    > for DevfileSchemaVersion222ComponentsItemVariant4ImageDockerfileVariant2GitCheckoutFrom
{
    fn from(
        value: &DevfileSchemaVersion222ComponentsItemVariant4ImageDockerfileVariant2GitCheckoutFrom,
    ) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ComponentsItemVariant4ImageDockerfileVariant2GitCheckoutFrom {
    pub fn builder(
    ) -> builder::DevfileSchemaVersion222ComponentsItemVariant4ImageDockerfileVariant2GitCheckoutFrom
    {
        Default::default()
    }
}
#[doc = "Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin.\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ComponentsItemVariant4Name(::std::string::String);
impl ::std::ops::Deref for DevfileSchemaVersion222ComponentsItemVariant4Name {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222ComponentsItemVariant4Name>
    for ::std::string::String
{
    fn from(value: DevfileSchemaVersion222ComponentsItemVariant4Name) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222ComponentsItemVariant4Name>
    for DevfileSchemaVersion222ComponentsItemVariant4Name
{
    fn from(value: &DevfileSchemaVersion222ComponentsItemVariant4Name) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for DevfileSchemaVersion222ComponentsItemVariant4Name {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str> for DevfileSchemaVersion222ComponentsItemVariant4Name {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ComponentsItemVariant4Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ComponentsItemVariant4Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de> for DevfileSchemaVersion222ComponentsItemVariant4Name {
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "`DevfileSchemaVersion222DependentProjectsItem`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"git\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"zip\""]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  ],"]
#[doc = "  \"required\": ["]
#[doc = "    \"name\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"attributes\": {"]
#[doc = "      \"description\": \"Map of implementation-dependant free-form YAML attributes.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": true"]
#[doc = "    },"]
#[doc = "    \"clonePath\": {"]
#[doc = "      \"description\": \"Path relative to the root of the projects to which this project should be cloned into. This is a unix-style relative path (i.e. uses forward slashes). The path is invalid if it is absolute or tries to escape the project root through the usage of '..'. If not specified, defaults to the project name.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git\": {"]
#[doc = "      \"description\": \"Project's Git source\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"remotes\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"checkoutFrom\": {"]
#[doc = "          \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"properties\": {"]
#[doc = "            \"remote\": {"]
#[doc = "              \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"revision\": {"]
#[doc = "              \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"remotes\": {"]
#[doc = "          \"description\": \"The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"additionalProperties\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"description\": \"Project name\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"maxLength\": 63,"]
#[doc = "      \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "    },"]
#[doc = "    \"zip\": {"]
#[doc = "      \"description\": \"Project's Zip source\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"location\": {"]
#[doc = "          \"description\": \"Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged, deny_unknown_fields)]
pub enum DevfileSchemaVersion222DependentProjectsItem {
    Variant0 {
        #[doc = "Map of implementation-dependant free-form YAML attributes."]
        #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
        attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
        #[doc = "Path relative to the root of the projects to which this project should be cloned into. This is a unix-style relative path (i.e. uses forward slashes). The path is invalid if it is absolute or tries to escape the project root through the usage of '..'. If not specified, defaults to the project name."]
        #[serde(
            rename = "clonePath",
            default,
            skip_serializing_if = "::std::option::Option::is_none"
        )]
        clone_path: ::std::option::Option<::std::string::String>,
        git: DevfileSchemaVersion222DependentProjectsItemVariant0Git,
        #[doc = "Project name"]
        name: DevfileSchemaVersion222DependentProjectsItemVariant0Name,
    },
    Variant1 {
        #[doc = "Map of implementation-dependant free-form YAML attributes."]
        #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
        attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
        #[doc = "Path relative to the root of the projects to which this project should be cloned into. This is a unix-style relative path (i.e. uses forward slashes). The path is invalid if it is absolute or tries to escape the project root through the usage of '..'. If not specified, defaults to the project name."]
        #[serde(
            rename = "clonePath",
            default,
            skip_serializing_if = "::std::option::Option::is_none"
        )]
        clone_path: ::std::option::Option<::std::string::String>,
        #[doc = "Project name"]
        name: DevfileSchemaVersion222DependentProjectsItemVariant1Name,
        zip: DevfileSchemaVersion222DependentProjectsItemVariant1Zip,
    },
}
impl ::std::convert::From<&Self> for DevfileSchemaVersion222DependentProjectsItem {
    fn from(value: &DevfileSchemaVersion222DependentProjectsItem) -> Self {
        value.clone()
    }
}
#[doc = "Project's Git source"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Project's Git source\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"remotes\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"checkoutFrom\": {"]
#[doc = "      \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"remote\": {"]
#[doc = "          \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"revision\": {"]
#[doc = "          \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"remotes\": {"]
#[doc = "      \"description\": \"The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
pub struct DevfileSchemaVersion222DependentProjectsItemVariant0Git {
    #[serde(
        rename = "checkoutFrom",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub checkout_from:
        ::std::option::Option<DevfileSchemaVersion222DependentProjectsItemVariant0GitCheckoutFrom>,
    #[doc = "The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured."]
    pub remotes: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
}
impl ::std::convert::From<&DevfileSchemaVersion222DependentProjectsItemVariant0Git>
    for DevfileSchemaVersion222DependentProjectsItemVariant0Git
{
    fn from(value: &DevfileSchemaVersion222DependentProjectsItemVariant0Git) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222DependentProjectsItemVariant0Git {
    pub fn builder() -> builder::DevfileSchemaVersion222DependentProjectsItemVariant0Git {
        Default::default()
    }
}
#[doc = "Defines from what the project should be checked out. Required if there are more than one remote configured"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"remote\": {"]
#[doc = "      \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"revision\": {"]
#[doc = "      \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222DependentProjectsItemVariant0GitCheckoutFrom {
    #[doc = "The remote name should be used as init. Required if there are more than one remote configured"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub remote: ::std::option::Option<::std::string::String>,
    #[doc = "The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found."]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub revision: ::std::option::Option<::std::string::String>,
}
impl ::std::convert::From<&DevfileSchemaVersion222DependentProjectsItemVariant0GitCheckoutFrom>
    for DevfileSchemaVersion222DependentProjectsItemVariant0GitCheckoutFrom
{
    fn from(value: &DevfileSchemaVersion222DependentProjectsItemVariant0GitCheckoutFrom) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222DependentProjectsItemVariant0GitCheckoutFrom {
    pub fn builder() -> builder::DevfileSchemaVersion222DependentProjectsItemVariant0GitCheckoutFrom
    {
        Default::default()
    }
}
#[doc = "Project name"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Project name\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222DependentProjectsItemVariant0Name(::std::string::String);
impl ::std::ops::Deref for DevfileSchemaVersion222DependentProjectsItemVariant0Name {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222DependentProjectsItemVariant0Name>
    for ::std::string::String
{
    fn from(value: DevfileSchemaVersion222DependentProjectsItemVariant0Name) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222DependentProjectsItemVariant0Name>
    for DevfileSchemaVersion222DependentProjectsItemVariant0Name
{
    fn from(value: &DevfileSchemaVersion222DependentProjectsItemVariant0Name) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for DevfileSchemaVersion222DependentProjectsItemVariant0Name {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str> for DevfileSchemaVersion222DependentProjectsItemVariant0Name {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222DependentProjectsItemVariant0Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222DependentProjectsItemVariant0Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de> for DevfileSchemaVersion222DependentProjectsItemVariant0Name {
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Project name"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Project name\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222DependentProjectsItemVariant1Name(::std::string::String);
impl ::std::ops::Deref for DevfileSchemaVersion222DependentProjectsItemVariant1Name {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222DependentProjectsItemVariant1Name>
    for ::std::string::String
{
    fn from(value: DevfileSchemaVersion222DependentProjectsItemVariant1Name) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222DependentProjectsItemVariant1Name>
    for DevfileSchemaVersion222DependentProjectsItemVariant1Name
{
    fn from(value: &DevfileSchemaVersion222DependentProjectsItemVariant1Name) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for DevfileSchemaVersion222DependentProjectsItemVariant1Name {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str> for DevfileSchemaVersion222DependentProjectsItemVariant1Name {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222DependentProjectsItemVariant1Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222DependentProjectsItemVariant1Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de> for DevfileSchemaVersion222DependentProjectsItemVariant1Name {
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Project's Zip source"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Project's Zip source\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"location\": {"]
#[doc = "      \"description\": \"Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222DependentProjectsItemVariant1Zip {
    #[doc = "Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub location: ::std::option::Option<::std::string::String>,
}
impl ::std::convert::From<&DevfileSchemaVersion222DependentProjectsItemVariant1Zip>
    for DevfileSchemaVersion222DependentProjectsItemVariant1Zip
{
    fn from(value: &DevfileSchemaVersion222DependentProjectsItemVariant1Zip) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222DependentProjectsItemVariant1Zip {
    pub fn builder() -> builder::DevfileSchemaVersion222DependentProjectsItemVariant1Zip {
        Default::default()
    }
}
#[doc = "Bindings of commands to events. Each command is referred-to by its name."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Bindings of commands to events. Each command is referred-to by its name.\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"postStart\": {"]
#[doc = "      \"description\": \"IDs of commands that should be executed after the devworkspace is completely started. In the case of Che-Theia, these commands should be executed after all plugins and extensions have started, including project cloning. This means that those commands are not triggered until the user opens the IDE in his browser.\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"postStop\": {"]
#[doc = "      \"description\": \"IDs of commands that should be executed after stopping the devworkspace.\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"preStart\": {"]
#[doc = "      \"description\": \"IDs of commands that should be executed before the devworkspace start. Kubernetes-wise, these commands would typically be executed in init containers of the devworkspace POD.\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"preStop\": {"]
#[doc = "      \"description\": \"IDs of commands that should be executed before stopping the devworkspace.\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222Events {
    #[doc = "IDs of commands that should be executed after the devworkspace is completely started. In the case of Che-Theia, these commands should be executed after all plugins and extensions have started, including project cloning. This means that those commands are not triggered until the user opens the IDE in his browser."]
    #[serde(
        rename = "postStart",
        default,
        skip_serializing_if = "::std::vec::Vec::is_empty"
    )]
    pub post_start: ::std::vec::Vec<::std::string::String>,
    #[doc = "IDs of commands that should be executed after stopping the devworkspace."]
    #[serde(
        rename = "postStop",
        default,
        skip_serializing_if = "::std::vec::Vec::is_empty"
    )]
    pub post_stop: ::std::vec::Vec<::std::string::String>,
    #[doc = "IDs of commands that should be executed before the devworkspace start. Kubernetes-wise, these commands would typically be executed in init containers of the devworkspace POD."]
    #[serde(
        rename = "preStart",
        default,
        skip_serializing_if = "::std::vec::Vec::is_empty"
    )]
    pub pre_start: ::std::vec::Vec<::std::string::String>,
    #[doc = "IDs of commands that should be executed before stopping the devworkspace."]
    #[serde(
        rename = "preStop",
        default,
        skip_serializing_if = "::std::vec::Vec::is_empty"
    )]
    pub pre_stop: ::std::vec::Vec<::std::string::String>,
}
impl ::std::convert::From<&DevfileSchemaVersion222Events> for DevfileSchemaVersion222Events {
    fn from(value: &DevfileSchemaVersion222Events) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222Events {
    pub fn builder() -> builder::DevfileSchemaVersion222Events {
        Default::default()
    }
}
#[doc = "Optional metadata"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Optional metadata\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"architectures\": {"]
#[doc = "      \"description\": \"Optional list of processor architectures that the devfile supports, empty list suggests that the devfile can be used on any architecture\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"description\": \"Architecture describes the architecture type\","]
#[doc = "        \"type\": \"string\","]
#[doc = "        \"enum\": ["]
#[doc = "          \"amd64\","]
#[doc = "          \"arm64\","]
#[doc = "          \"ppc64le\","]
#[doc = "          \"s390x\""]
#[doc = "        ]"]
#[doc = "      },"]
#[doc = "      \"uniqueItems\": true"]
#[doc = "    },"]
#[doc = "    \"attributes\": {"]
#[doc = "      \"description\": \"Map of implementation-dependant free-form YAML attributes. Deprecated, use the top-level attributes field instead.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": true"]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"description\": \"Optional devfile description\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"displayName\": {"]
#[doc = "      \"description\": \"Optional devfile display name\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"globalMemoryLimit\": {"]
#[doc = "      \"description\": \"Optional devfile global memory limit\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"icon\": {"]
#[doc = "      \"description\": \"Optional devfile icon, can be a URI or a relative path in the project\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"language\": {"]
#[doc = "      \"description\": \"Optional devfile language\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"description\": \"Optional devfile name\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"projectType\": {"]
#[doc = "      \"description\": \"Optional devfile project type\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"provider\": {"]
#[doc = "      \"description\": \"Optional devfile provider information\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"supportUrl\": {"]
#[doc = "      \"description\": \"Optional link to a page that provides support information\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"tags\": {"]
#[doc = "      \"description\": \"Optional devfile tags\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"version\": {"]
#[doc = "      \"description\": \"Optional semver-compatible version\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"pattern\": \"^([0-9]+)\\\\.([0-9]+)\\\\.([0-9]+)(\\\\-[0-9a-z-]+(\\\\.[0-9a-z-]+)*)?(\\\\+[0-9A-Za-z-]+(\\\\.[0-9A-Za-z-]+)*)?$\""]
#[doc = "    },"]
#[doc = "    \"website\": {"]
#[doc = "      \"description\": \"Optional devfile website\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": true"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[derive(Default)]
pub struct DevfileSchemaVersion222Metadata {
    #[doc = "Optional list of processor architectures that the devfile supports, empty list suggests that the devfile can be used on any architecture"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub architectures: ::std::option::Option<Vec<DevfileSchemaVersion222MetadataArchitecturesItem>>,
    #[doc = "Map of implementation-dependant free-form YAML attributes. Deprecated, use the top-level attributes field instead."]
    #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
    pub attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
    #[doc = "Optional devfile description"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub description: ::std::option::Option<::std::string::String>,
    #[doc = "Optional devfile display name"]
    #[serde(
        rename = "displayName",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub display_name: ::std::option::Option<::std::string::String>,
    #[doc = "Optional devfile global memory limit"]
    #[serde(
        rename = "globalMemoryLimit",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub global_memory_limit: ::std::option::Option<::std::string::String>,
    #[doc = "Optional devfile icon, can be a URI or a relative path in the project"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub icon: ::std::option::Option<::std::string::String>,
    #[doc = "Optional devfile language"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub language: ::std::option::Option<::std::string::String>,
    #[doc = "Optional devfile name"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub name: ::std::option::Option<::std::string::String>,
    #[doc = "Optional devfile project type"]
    #[serde(
        rename = "projectType",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub project_type: ::std::option::Option<::std::string::String>,
    #[doc = "Optional devfile provider information"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub provider: ::std::option::Option<::std::string::String>,
    #[doc = "Optional link to a page that provides support information"]
    #[serde(
        rename = "supportUrl",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub support_url: ::std::option::Option<::std::string::String>,
    #[doc = "Optional devfile tags"]
    #[serde(default, skip_serializing_if = "::std::vec::Vec::is_empty")]
    pub tags: ::std::vec::Vec<::std::string::String>,
    #[doc = "Optional semver-compatible version"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub version: ::std::option::Option<DevfileSchemaVersion222MetadataVersion>,
    #[doc = "Optional devfile website"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub website: ::std::option::Option<::std::string::String>,
}
impl ::std::convert::From<&DevfileSchemaVersion222Metadata> for DevfileSchemaVersion222Metadata {
    fn from(value: &DevfileSchemaVersion222Metadata) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222Metadata {
    pub fn builder() -> builder::DevfileSchemaVersion222Metadata {
        Default::default()
    }
}
#[doc = "Architecture describes the architecture type"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Architecture describes the architecture type\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"amd64\","]
#[doc = "    \"arm64\","]
#[doc = "    \"ppc64le\","]
#[doc = "    \"s390x\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DevfileSchemaVersion222MetadataArchitecturesItem {
    #[serde(rename = "amd64")]
    Amd64,
    #[serde(rename = "arm64")]
    Arm64,
    #[serde(rename = "ppc64le")]
    Ppc64le,
    #[serde(rename = "s390x")]
    S390x,
}
impl ::std::convert::From<&Self> for DevfileSchemaVersion222MetadataArchitecturesItem {
    fn from(value: &DevfileSchemaVersion222MetadataArchitecturesItem) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for DevfileSchemaVersion222MetadataArchitecturesItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Amd64 => f.write_str("amd64"),
            Self::Arm64 => f.write_str("arm64"),
            Self::Ppc64le => f.write_str("ppc64le"),
            Self::S390x => f.write_str("s390x"),
        }
    }
}
impl ::std::str::FromStr for DevfileSchemaVersion222MetadataArchitecturesItem {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        match value {
            "amd64" => Ok(Self::Amd64),
            "arm64" => Ok(Self::Arm64),
            "ppc64le" => Ok(Self::Ppc64le),
            "s390x" => Ok(Self::S390x),
            _ => Err("invalid value".into()),
        }
    }
}
impl ::std::convert::TryFrom<&str> for DevfileSchemaVersion222MetadataArchitecturesItem {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222MetadataArchitecturesItem
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222MetadataArchitecturesItem
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "Optional semver-compatible version"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Optional semver-compatible version\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"pattern\": \"^([0-9]+)\\\\.([0-9]+)\\\\.([0-9]+)(\\\\-[0-9a-z-]+(\\\\.[0-9a-z-]+)*)?(\\\\+[0-9A-Za-z-]+(\\\\.[0-9A-Za-z-]+)*)?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222MetadataVersion(::std::string::String);
impl ::std::ops::Deref for DevfileSchemaVersion222MetadataVersion {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222MetadataVersion> for ::std::string::String {
    fn from(value: DevfileSchemaVersion222MetadataVersion) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222MetadataVersion>
    for DevfileSchemaVersion222MetadataVersion
{
    fn from(value: &DevfileSchemaVersion222MetadataVersion) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for DevfileSchemaVersion222MetadataVersion {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> = ::std::sync::LazyLock::new(
            || {
                :: regress :: Regex :: new ("^([0-9]+)\\.([0-9]+)\\.([0-9]+)(\\-[0-9a-z-]+(\\.[0-9a-z-]+)*)?(\\+[0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*)?$") . unwrap ()
            },
        );
        if PATTERN.find(value).is_none() {
            return Err ("doesn't match pattern \"^([0-9]+)\\.([0-9]+)\\.([0-9]+)(\\-[0-9a-z-]+(\\.[0-9a-z-]+)*)?(\\+[0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*)?$\"" . into ()) ;
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str> for DevfileSchemaVersion222MetadataVersion {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String> for DevfileSchemaVersion222MetadataVersion {
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String> for DevfileSchemaVersion222MetadataVersion {
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de> for DevfileSchemaVersion222MetadataVersion {
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Parent devworkspace template"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Parent devworkspace template\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"uri\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"id\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"kubernetes\""]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"attributes\": {"]
#[doc = "      \"description\": \"Overrides of attributes encapsulated in a parent devfile. Overriding is done according to K8S strategic merge patch standard rules.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": true"]
#[doc = "    },"]
#[doc = "    \"commands\": {"]
#[doc = "      \"description\": \"Overrides of commands encapsulated in a parent devfile or a plugin. Overriding is done according to K8S strategic merge patch standard rules.\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"object\","]
#[doc = "        \"oneOf\": ["]
#[doc = "          {"]
#[doc = "            \"required\": ["]
#[doc = "              \"exec\""]
#[doc = "            ]"]
#[doc = "          },"]
#[doc = "          {"]
#[doc = "            \"required\": ["]
#[doc = "              \"apply\""]
#[doc = "            ]"]
#[doc = "          },"]
#[doc = "          {"]
#[doc = "            \"required\": ["]
#[doc = "              \"composite\""]
#[doc = "            ]"]
#[doc = "          }"]
#[doc = "        ],"]
#[doc = "        \"required\": ["]
#[doc = "          \"id\""]
#[doc = "        ],"]
#[doc = "        \"properties\": {"]
#[doc = "          \"apply\": {"]
#[doc = "            \"description\": \"Command that consists in applying a given component definition, typically bound to a devworkspace event.\\n\\nFor example, when an `apply` command is bound to a `preStart` event, and references a `container` component, it will start the container as a K8S initContainer in the devworkspace POD, unless the component has its `dedicatedPod` field set to `true`.\\n\\nWhen no `apply` command exist for a given component, it is assumed the component will be applied at devworkspace start by default, unless `deployByDefault` for that component is set to false.\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"properties\": {"]
#[doc = "              \"component\": {"]
#[doc = "                \"description\": \"Describes component that will be applied\","]
#[doc = "                \"type\": \"string\""]
#[doc = "              },"]
#[doc = "              \"group\": {"]
#[doc = "                \"description\": \"Defines the group this command is part of\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"properties\": {"]
#[doc = "                  \"isDefault\": {"]
#[doc = "                    \"description\": \"Identifies the default command for a given group kind\","]
#[doc = "                    \"type\": \"boolean\""]
#[doc = "                  },"]
#[doc = "                  \"kind\": {"]
#[doc = "                    \"description\": \"Kind of group the command is part of\","]
#[doc = "                    \"type\": \"string\","]
#[doc = "                    \"enum\": ["]
#[doc = "                      \"build\","]
#[doc = "                      \"run\","]
#[doc = "                      \"test\","]
#[doc = "                      \"debug\","]
#[doc = "                      \"deploy\""]
#[doc = "                    ]"]
#[doc = "                  }"]
#[doc = "                },"]
#[doc = "                \"additionalProperties\": false"]
#[doc = "              },"]
#[doc = "              \"label\": {"]
#[doc = "                \"description\": \"Optional label that provides a label for this command to be used in Editor UI menus for example\","]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"additionalProperties\": false"]
#[doc = "          },"]
#[doc = "          \"attributes\": {"]
#[doc = "            \"description\": \"Map of implementation-dependant free-form YAML attributes.\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"additionalProperties\": true"]
#[doc = "          },"]
#[doc = "          \"composite\": {"]
#[doc = "            \"description\": \"Composite command that allows executing several sub-commands either sequentially or concurrently\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"properties\": {"]
#[doc = "              \"commands\": {"]
#[doc = "                \"description\": \"The commands that comprise this composite command\","]
#[doc = "                \"type\": \"array\","]
#[doc = "                \"items\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"group\": {"]
#[doc = "                \"description\": \"Defines the group this command is part of\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"properties\": {"]
#[doc = "                  \"isDefault\": {"]
#[doc = "                    \"description\": \"Identifies the default command for a given group kind\","]
#[doc = "                    \"type\": \"boolean\""]
#[doc = "                  },"]
#[doc = "                  \"kind\": {"]
#[doc = "                    \"description\": \"Kind of group the command is part of\","]
#[doc = "                    \"type\": \"string\","]
#[doc = "                    \"enum\": ["]
#[doc = "                      \"build\","]
#[doc = "                      \"run\","]
#[doc = "                      \"test\","]
#[doc = "                      \"debug\","]
#[doc = "                      \"deploy\""]
#[doc = "                    ]"]
#[doc = "                  }"]
#[doc = "                },"]
#[doc = "                \"additionalProperties\": false"]
#[doc = "              },"]
#[doc = "              \"label\": {"]
#[doc = "                \"description\": \"Optional label that provides a label for this command to be used in Editor UI menus for example\","]
#[doc = "                \"type\": \"string\""]
#[doc = "              },"]
#[doc = "              \"parallel\": {"]
#[doc = "                \"description\": \"Indicates if the sub-commands should be executed concurrently\","]
#[doc = "                \"type\": \"boolean\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"additionalProperties\": false"]
#[doc = "          },"]
#[doc = "          \"exec\": {"]
#[doc = "            \"description\": \"CLI Command executed in an existing component container\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"properties\": {"]
#[doc = "              \"commandLine\": {"]
#[doc = "                \"description\": \"The actual command-line string\\n\\nSpecial variables that can be used:\\n\\n - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping.\\n\\n - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one.\","]
#[doc = "                \"type\": \"string\""]
#[doc = "              },"]
#[doc = "              \"component\": {"]
#[doc = "                \"description\": \"Describes component to which given action relates\","]
#[doc = "                \"type\": \"string\""]
#[doc = "              },"]
#[doc = "              \"env\": {"]
#[doc = "                \"description\": \"Optional list of environment variables that have to be set before running the command\","]
#[doc = "                \"type\": \"array\","]
#[doc = "                \"items\": {"]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"name\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"name\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"value\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"group\": {"]
#[doc = "                \"description\": \"Defines the group this command is part of\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"properties\": {"]
#[doc = "                  \"isDefault\": {"]
#[doc = "                    \"description\": \"Identifies the default command for a given group kind\","]
#[doc = "                    \"type\": \"boolean\""]
#[doc = "                  },"]
#[doc = "                  \"kind\": {"]
#[doc = "                    \"description\": \"Kind of group the command is part of\","]
#[doc = "                    \"type\": \"string\","]
#[doc = "                    \"enum\": ["]
#[doc = "                      \"build\","]
#[doc = "                      \"run\","]
#[doc = "                      \"test\","]
#[doc = "                      \"debug\","]
#[doc = "                      \"deploy\""]
#[doc = "                    ]"]
#[doc = "                  }"]
#[doc = "                },"]
#[doc = "                \"additionalProperties\": false"]
#[doc = "              },"]
#[doc = "              \"hotReloadCapable\": {"]
#[doc = "                \"description\": \"Specify whether the command is restarted or not when the source code changes. If set to `true` the command won't be restarted. A *hotReloadCapable* `run` or `debug` command is expected to handle file changes on its own and won't be restarted. A *hotReloadCapable* `build` command is expected to be executed only once and won't be executed again. This field is taken into account only for commands `build`, `run` and `debug` with `isDefault` set to `true`.\\n\\nDefault value is `false`\","]
#[doc = "                \"type\": \"boolean\""]
#[doc = "              },"]
#[doc = "              \"label\": {"]
#[doc = "                \"description\": \"Optional label that provides a label for this command to be used in Editor UI menus for example\","]
#[doc = "                \"type\": \"string\""]
#[doc = "              },"]
#[doc = "              \"workingDir\": {"]
#[doc = "                \"description\": \"Working directory where the command should be executed\\n\\nSpecial variables that can be used:\\n\\n - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping.\\n\\n - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one.\","]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"additionalProperties\": false"]
#[doc = "          },"]
#[doc = "          \"id\": {"]
#[doc = "            \"description\": \"Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.\","]
#[doc = "            \"type\": \"string\","]
#[doc = "            \"maxLength\": 63,"]
#[doc = "            \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"additionalProperties\": false"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"components\": {"]
#[doc = "      \"description\": \"Overrides of components encapsulated in a parent devfile or a plugin. Overriding is done according to K8S strategic merge patch standard rules.\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"object\","]
#[doc = "        \"oneOf\": ["]
#[doc = "          {"]
#[doc = "            \"required\": ["]
#[doc = "              \"container\""]
#[doc = "            ]"]
#[doc = "          },"]
#[doc = "          {"]
#[doc = "            \"required\": ["]
#[doc = "              \"kubernetes\""]
#[doc = "            ]"]
#[doc = "          },"]
#[doc = "          {"]
#[doc = "            \"required\": ["]
#[doc = "              \"openshift\""]
#[doc = "            ]"]
#[doc = "          },"]
#[doc = "          {"]
#[doc = "            \"required\": ["]
#[doc = "              \"volume\""]
#[doc = "            ]"]
#[doc = "          },"]
#[doc = "          {"]
#[doc = "            \"required\": ["]
#[doc = "              \"image\""]
#[doc = "            ]"]
#[doc = "          }"]
#[doc = "        ],"]
#[doc = "        \"required\": ["]
#[doc = "          \"name\""]
#[doc = "        ],"]
#[doc = "        \"properties\": {"]
#[doc = "          \"attributes\": {"]
#[doc = "            \"description\": \"Map of implementation-dependant free-form YAML attributes.\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"additionalProperties\": true"]
#[doc = "          },"]
#[doc = "          \"container\": {"]
#[doc = "            \"description\": \"Allows adding and configuring devworkspace-related containers\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"properties\": {"]
#[doc = "              \"annotation\": {"]
#[doc = "                \"description\": \"Annotations that should be added to specific resources for this container\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"properties\": {"]
#[doc = "                  \"deployment\": {"]
#[doc = "                    \"description\": \"Annotations to be added to deployment\","]
#[doc = "                    \"type\": \"object\","]
#[doc = "                    \"additionalProperties\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"service\": {"]
#[doc = "                    \"description\": \"Annotations to be added to service\","]
#[doc = "                    \"type\": \"object\","]
#[doc = "                    \"additionalProperties\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  }"]
#[doc = "                },"]
#[doc = "                \"additionalProperties\": false"]
#[doc = "              },"]
#[doc = "              \"args\": {"]
#[doc = "                \"description\": \"The arguments to supply to the command running the dockerimage component. The arguments are supplied either to the default command provided in the image or to the overridden command.\\n\\nDefaults to an empty array, meaning use whatever is defined in the image.\","]
#[doc = "                \"type\": \"array\","]
#[doc = "                \"items\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"command\": {"]
#[doc = "                \"description\": \"The command to run in the dockerimage component instead of the default one provided in the image.\\n\\nDefaults to an empty array, meaning use whatever is defined in the image.\","]
#[doc = "                \"type\": \"array\","]
#[doc = "                \"items\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"cpuLimit\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              },"]
#[doc = "              \"cpuRequest\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              },"]
#[doc = "              \"dedicatedPod\": {"]
#[doc = "                \"description\": \"Specify if a container should run in its own separated pod, instead of running as part of the main development environment pod.\\n\\nDefault value is `false`\","]
#[doc = "                \"type\": \"boolean\""]
#[doc = "              },"]
#[doc = "              \"endpoints\": {"]
#[doc = "                \"type\": \"array\","]
#[doc = "                \"items\": {"]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"name\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"annotation\": {"]
#[doc = "                      \"description\": \"Annotations to be added to Kubernetes Ingress or Openshift Route\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"additionalProperties\": {"]
#[doc = "                        \"type\": \"string\""]
#[doc = "                      }"]
#[doc = "                    },"]
#[doc = "                    \"attributes\": {"]
#[doc = "                      \"description\": \"Map of implementation-dependant string-based free-form attributes.\\n\\nExamples of Che-specific attributes:\\n- cookiesAuthEnabled: \\\"true\\\" / \\\"false\\\",\\n- type: \\\"terminal\\\" / \\\"ide\\\" / \\\"ide-dev\\\",\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"additionalProperties\": true"]
#[doc = "                    },"]
#[doc = "                    \"exposure\": {"]
#[doc = "                      \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "                      \"type\": \"string\","]
#[doc = "                      \"enum\": ["]
#[doc = "                        \"public\","]
#[doc = "                        \"internal\","]
#[doc = "                        \"none\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"name\": {"]
#[doc = "                      \"type\": \"string\","]
#[doc = "                      \"maxLength\": 15,"]
#[doc = "                      \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "                    },"]
#[doc = "                    \"path\": {"]
#[doc = "                      \"description\": \"Path of the endpoint URL\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"protocol\": {"]
#[doc = "                      \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "                      \"type\": \"string\","]
#[doc = "                      \"enum\": ["]
#[doc = "                        \"http\","]
#[doc = "                        \"https\","]
#[doc = "                        \"ws\","]
#[doc = "                        \"wss\","]
#[doc = "                        \"tcp\","]
#[doc = "                        \"udp\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"secure\": {"]
#[doc = "                      \"description\": \"Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.\","]
#[doc = "                      \"type\": \"boolean\""]
#[doc = "                    },"]
#[doc = "                    \"targetPort\": {"]
#[doc = "                      \"description\": \"Port number to be used within the container component. The same port cannot be used by two different container components.\","]
#[doc = "                      \"type\": \"integer\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"env\": {"]
#[doc = "                \"description\": \"Environment variables used in this container.\\n\\nThe following variables are reserved and cannot be overridden via env:\\n\\n - `$PROJECTS_ROOT`\\n\\n - `$PROJECT_SOURCE`\","]
#[doc = "                \"type\": \"array\","]
#[doc = "                \"items\": {"]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"name\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"name\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"value\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"image\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              },"]
#[doc = "              \"memoryLimit\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              },"]
#[doc = "              \"memoryRequest\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              },"]
#[doc = "              \"mountSources\": {"]
#[doc = "                \"description\": \"Toggles whether or not the project source code should be mounted in the component.\\n\\nDefaults to true for all component types except plugins and components that set `dedicatedPod` to true.\","]
#[doc = "                \"type\": \"boolean\""]
#[doc = "              },"]
#[doc = "              \"sourceMapping\": {"]
#[doc = "                \"description\": \"Optional specification of the path in the container where project sources should be transferred/mounted when `mountSources` is `true`. When omitted, the default value of /projects is used.\","]
#[doc = "                \"type\": \"string\""]
#[doc = "              },"]
#[doc = "              \"volumeMounts\": {"]
#[doc = "                \"description\": \"List of volumes mounts that should be mounted is this container.\","]
#[doc = "                \"type\": \"array\","]
#[doc = "                \"items\": {"]
#[doc = "                  \"description\": \"Volume that should be mounted to a component container\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"name\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"name\": {"]
#[doc = "                      \"description\": \"The volume mount name is the name of an existing `Volume` component. If several containers mount the same volume name then they will reuse the same volume and will be able to access to the same files.\","]
#[doc = "                      \"type\": \"string\","]
#[doc = "                      \"maxLength\": 63,"]
#[doc = "                      \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "                    },"]
#[doc = "                    \"path\": {"]
#[doc = "                      \"description\": \"The path in the component container where the volume should be mounted. If not path is mentioned, default path is the is `/<name>`.\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                }"]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"additionalProperties\": false"]
#[doc = "          },"]
#[doc = "          \"image\": {"]
#[doc = "            \"description\": \"Allows specifying the definition of an image for outer loop builds\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"oneOf\": ["]
#[doc = "              {"]
#[doc = "                \"required\": ["]
#[doc = "                  \"dockerfile\""]
#[doc = "                ]"]
#[doc = "              },"]
#[doc = "              {"]
#[doc = "                \"required\": ["]
#[doc = "                  \"autoBuild\""]
#[doc = "                ]"]
#[doc = "              }"]
#[doc = "            ],"]
#[doc = "            \"properties\": {"]
#[doc = "              \"autoBuild\": {"]
#[doc = "                \"description\": \"Defines if the image should be built during startup.\\n\\nDefault value is `false`\","]
#[doc = "                \"type\": \"boolean\""]
#[doc = "              },"]
#[doc = "              \"dockerfile\": {"]
#[doc = "                \"description\": \"Allows specifying dockerfile type build\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"oneOf\": ["]
#[doc = "                  {"]
#[doc = "                    \"required\": ["]
#[doc = "                      \"uri\""]
#[doc = "                    ]"]
#[doc = "                  },"]
#[doc = "                  {"]
#[doc = "                    \"required\": ["]
#[doc = "                      \"devfileRegistry\""]
#[doc = "                    ]"]
#[doc = "                  },"]
#[doc = "                  {"]
#[doc = "                    \"required\": ["]
#[doc = "                      \"git\""]
#[doc = "                    ]"]
#[doc = "                  }"]
#[doc = "                ],"]
#[doc = "                \"properties\": {"]
#[doc = "                  \"args\": {"]
#[doc = "                    \"description\": \"The arguments to supply to the dockerfile build.\","]
#[doc = "                    \"type\": \"array\","]
#[doc = "                    \"items\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"buildContext\": {"]
#[doc = "                    \"description\": \"Path of source directory to establish build context. Defaults to ${PROJECT_SOURCE} in the container\","]
#[doc = "                    \"type\": \"string\""]
#[doc = "                  },"]
#[doc = "                  \"devfileRegistry\": {"]
#[doc = "                    \"description\": \"Dockerfile's Devfile Registry source\","]
#[doc = "                    \"type\": \"object\","]
#[doc = "                    \"properties\": {"]
#[doc = "                      \"id\": {"]
#[doc = "                        \"description\": \"Id in a devfile registry that contains a Dockerfile. The src in the OCI registry required for the Dockerfile build will be downloaded for building the image.\","]
#[doc = "                        \"type\": \"string\""]
#[doc = "                      },"]
#[doc = "                      \"registryUrl\": {"]
#[doc = "                        \"description\": \"Devfile Registry URL to pull the Dockerfile from when using the Devfile Registry as Dockerfile src. To ensure the Dockerfile gets resolved consistently in different environments, it is recommended to always specify the `devfileRegistryUrl` when `Id` is used.\","]
#[doc = "                        \"type\": \"string\""]
#[doc = "                      }"]
#[doc = "                    },"]
#[doc = "                    \"additionalProperties\": false"]
#[doc = "                  },"]
#[doc = "                  \"git\": {"]
#[doc = "                    \"description\": \"Dockerfile's Git source\","]
#[doc = "                    \"type\": \"object\","]
#[doc = "                    \"properties\": {"]
#[doc = "                      \"checkoutFrom\": {"]
#[doc = "                        \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "                        \"type\": \"object\","]
#[doc = "                        \"properties\": {"]
#[doc = "                          \"remote\": {"]
#[doc = "                            \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "                            \"type\": \"string\""]
#[doc = "                          },"]
#[doc = "                          \"revision\": {"]
#[doc = "                            \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "                            \"type\": \"string\""]
#[doc = "                          }"]
#[doc = "                        },"]
#[doc = "                        \"additionalProperties\": false"]
#[doc = "                      },"]
#[doc = "                      \"fileLocation\": {"]
#[doc = "                        \"description\": \"Location of the Dockerfile in the Git repository when using git as Dockerfile src. Defaults to Dockerfile.\","]
#[doc = "                        \"type\": \"string\""]
#[doc = "                      },"]
#[doc = "                      \"remotes\": {"]
#[doc = "                        \"description\": \"The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.\","]
#[doc = "                        \"type\": \"object\","]
#[doc = "                        \"additionalProperties\": {"]
#[doc = "                          \"type\": \"string\""]
#[doc = "                        }"]
#[doc = "                      }"]
#[doc = "                    },"]
#[doc = "                    \"additionalProperties\": false"]
#[doc = "                  },"]
#[doc = "                  \"rootRequired\": {"]
#[doc = "                    \"description\": \"Specify if a privileged builder pod is required.\\n\\nDefault value is `false`\","]
#[doc = "                    \"type\": \"boolean\""]
#[doc = "                  },"]
#[doc = "                  \"uri\": {"]
#[doc = "                    \"description\": \"URI Reference of a Dockerfile. It can be a full URL or a relative URI from the current devfile as the base URI.\","]
#[doc = "                    \"type\": \"string\""]
#[doc = "                  }"]
#[doc = "                },"]
#[doc = "                \"additionalProperties\": false"]
#[doc = "              },"]
#[doc = "              \"imageName\": {"]
#[doc = "                \"description\": \"Name of the image for the resulting outerloop build\","]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"additionalProperties\": false"]
#[doc = "          },"]
#[doc = "          \"kubernetes\": {"]
#[doc = "            \"description\": \"Allows importing into the devworkspace the Kubernetes resources defined in a given manifest. For example this allows reusing the Kubernetes definitions used to deploy some runtime components in production.\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"oneOf\": ["]
#[doc = "              {"]
#[doc = "                \"required\": ["]
#[doc = "                  \"uri\""]
#[doc = "                ]"]
#[doc = "              },"]
#[doc = "              {"]
#[doc = "                \"required\": ["]
#[doc = "                  \"inlined\""]
#[doc = "                ]"]
#[doc = "              }"]
#[doc = "            ],"]
#[doc = "            \"properties\": {"]
#[doc = "              \"deployByDefault\": {"]
#[doc = "                \"description\": \"Defines if the component should be deployed during startup.\\n\\nDefault value is `false`\","]
#[doc = "                \"type\": \"boolean\""]
#[doc = "              },"]
#[doc = "              \"endpoints\": {"]
#[doc = "                \"type\": \"array\","]
#[doc = "                \"items\": {"]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"name\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"annotation\": {"]
#[doc = "                      \"description\": \"Annotations to be added to Kubernetes Ingress or Openshift Route\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"additionalProperties\": {"]
#[doc = "                        \"type\": \"string\""]
#[doc = "                      }"]
#[doc = "                    },"]
#[doc = "                    \"attributes\": {"]
#[doc = "                      \"description\": \"Map of implementation-dependant string-based free-form attributes.\\n\\nExamples of Che-specific attributes:\\n- cookiesAuthEnabled: \\\"true\\\" / \\\"false\\\",\\n- type: \\\"terminal\\\" / \\\"ide\\\" / \\\"ide-dev\\\",\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"additionalProperties\": true"]
#[doc = "                    },"]
#[doc = "                    \"exposure\": {"]
#[doc = "                      \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "                      \"type\": \"string\","]
#[doc = "                      \"enum\": ["]
#[doc = "                        \"public\","]
#[doc = "                        \"internal\","]
#[doc = "                        \"none\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"name\": {"]
#[doc = "                      \"type\": \"string\","]
#[doc = "                      \"maxLength\": 15,"]
#[doc = "                      \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "                    },"]
#[doc = "                    \"path\": {"]
#[doc = "                      \"description\": \"Path of the endpoint URL\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"protocol\": {"]
#[doc = "                      \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "                      \"type\": \"string\","]
#[doc = "                      \"enum\": ["]
#[doc = "                        \"http\","]
#[doc = "                        \"https\","]
#[doc = "                        \"ws\","]
#[doc = "                        \"wss\","]
#[doc = "                        \"tcp\","]
#[doc = "                        \"udp\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"secure\": {"]
#[doc = "                      \"description\": \"Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.\","]
#[doc = "                      \"type\": \"boolean\""]
#[doc = "                    },"]
#[doc = "                    \"targetPort\": {"]
#[doc = "                      \"description\": \"Port number to be used within the container component. The same port cannot be used by two different container components.\","]
#[doc = "                      \"type\": \"integer\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"inlined\": {"]
#[doc = "                \"description\": \"Inlined manifest\","]
#[doc = "                \"type\": \"string\""]
#[doc = "              },"]
#[doc = "              \"uri\": {"]
#[doc = "                \"description\": \"Location in a file fetched from a uri.\","]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"additionalProperties\": false"]
#[doc = "          },"]
#[doc = "          \"name\": {"]
#[doc = "            \"description\": \"Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin.\","]
#[doc = "            \"type\": \"string\","]
#[doc = "            \"maxLength\": 63,"]
#[doc = "            \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "          },"]
#[doc = "          \"openshift\": {"]
#[doc = "            \"description\": \"Allows importing into the devworkspace the OpenShift resources defined in a given manifest. For example this allows reusing the OpenShift definitions used to deploy some runtime components in production.\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"oneOf\": ["]
#[doc = "              {"]
#[doc = "                \"required\": ["]
#[doc = "                  \"uri\""]
#[doc = "                ]"]
#[doc = "              },"]
#[doc = "              {"]
#[doc = "                \"required\": ["]
#[doc = "                  \"inlined\""]
#[doc = "                ]"]
#[doc = "              }"]
#[doc = "            ],"]
#[doc = "            \"properties\": {"]
#[doc = "              \"deployByDefault\": {"]
#[doc = "                \"description\": \"Defines if the component should be deployed during startup.\\n\\nDefault value is `false`\","]
#[doc = "                \"type\": \"boolean\""]
#[doc = "              },"]
#[doc = "              \"endpoints\": {"]
#[doc = "                \"type\": \"array\","]
#[doc = "                \"items\": {"]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"name\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"annotation\": {"]
#[doc = "                      \"description\": \"Annotations to be added to Kubernetes Ingress or Openshift Route\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"additionalProperties\": {"]
#[doc = "                        \"type\": \"string\""]
#[doc = "                      }"]
#[doc = "                    },"]
#[doc = "                    \"attributes\": {"]
#[doc = "                      \"description\": \"Map of implementation-dependant string-based free-form attributes.\\n\\nExamples of Che-specific attributes:\\n- cookiesAuthEnabled: \\\"true\\\" / \\\"false\\\",\\n- type: \\\"terminal\\\" / \\\"ide\\\" / \\\"ide-dev\\\",\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"additionalProperties\": true"]
#[doc = "                    },"]
#[doc = "                    \"exposure\": {"]
#[doc = "                      \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "                      \"type\": \"string\","]
#[doc = "                      \"enum\": ["]
#[doc = "                        \"public\","]
#[doc = "                        \"internal\","]
#[doc = "                        \"none\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"name\": {"]
#[doc = "                      \"type\": \"string\","]
#[doc = "                      \"maxLength\": 15,"]
#[doc = "                      \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "                    },"]
#[doc = "                    \"path\": {"]
#[doc = "                      \"description\": \"Path of the endpoint URL\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"protocol\": {"]
#[doc = "                      \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "                      \"type\": \"string\","]
#[doc = "                      \"enum\": ["]
#[doc = "                        \"http\","]
#[doc = "                        \"https\","]
#[doc = "                        \"ws\","]
#[doc = "                        \"wss\","]
#[doc = "                        \"tcp\","]
#[doc = "                        \"udp\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"secure\": {"]
#[doc = "                      \"description\": \"Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.\","]
#[doc = "                      \"type\": \"boolean\""]
#[doc = "                    },"]
#[doc = "                    \"targetPort\": {"]
#[doc = "                      \"description\": \"Port number to be used within the container component. The same port cannot be used by two different container components.\","]
#[doc = "                      \"type\": \"integer\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"inlined\": {"]
#[doc = "                \"description\": \"Inlined manifest\","]
#[doc = "                \"type\": \"string\""]
#[doc = "              },"]
#[doc = "              \"uri\": {"]
#[doc = "                \"description\": \"Location in a file fetched from a uri.\","]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"additionalProperties\": false"]
#[doc = "          },"]
#[doc = "          \"volume\": {"]
#[doc = "            \"description\": \"Allows specifying the definition of a volume shared by several other components\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"properties\": {"]
#[doc = "              \"ephemeral\": {"]
#[doc = "                \"description\": \"Ephemeral volumes are not stored persistently across restarts. Defaults to false\","]
#[doc = "                \"type\": \"boolean\""]
#[doc = "              },"]
#[doc = "              \"size\": {"]
#[doc = "                \"description\": \"Size of the volume\","]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"additionalProperties\": false"]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"additionalProperties\": false"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"dependentProjects\": {"]
#[doc = "      \"description\": \"Overrides of dependentProjects encapsulated in a parent devfile. Overriding is done according to K8S strategic merge patch standard rules.\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"object\","]
#[doc = "        \"oneOf\": ["]
#[doc = "          {"]
#[doc = "            \"required\": ["]
#[doc = "              \"git\""]
#[doc = "            ]"]
#[doc = "          },"]
#[doc = "          {"]
#[doc = "            \"required\": ["]
#[doc = "              \"zip\""]
#[doc = "            ]"]
#[doc = "          }"]
#[doc = "        ],"]
#[doc = "        \"required\": ["]
#[doc = "          \"name\""]
#[doc = "        ],"]
#[doc = "        \"properties\": {"]
#[doc = "          \"attributes\": {"]
#[doc = "            \"description\": \"Map of implementation-dependant free-form YAML attributes.\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"additionalProperties\": true"]
#[doc = "          },"]
#[doc = "          \"clonePath\": {"]
#[doc = "            \"description\": \"Path relative to the root of the projects to which this project should be cloned into. This is a unix-style relative path (i.e. uses forward slashes). The path is invalid if it is absolute or tries to escape the project root through the usage of '..'. If not specified, defaults to the project name.\","]
#[doc = "            \"type\": \"string\""]
#[doc = "          },"]
#[doc = "          \"git\": {"]
#[doc = "            \"description\": \"Project's Git source\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"properties\": {"]
#[doc = "              \"checkoutFrom\": {"]
#[doc = "                \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"properties\": {"]
#[doc = "                  \"remote\": {"]
#[doc = "                    \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "                    \"type\": \"string\""]
#[doc = "                  },"]
#[doc = "                  \"revision\": {"]
#[doc = "                    \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "                    \"type\": \"string\""]
#[doc = "                  }"]
#[doc = "                },"]
#[doc = "                \"additionalProperties\": false"]
#[doc = "              },"]
#[doc = "              \"remotes\": {"]
#[doc = "                \"description\": \"The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"additionalProperties\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"additionalProperties\": false"]
#[doc = "          },"]
#[doc = "          \"name\": {"]
#[doc = "            \"description\": \"Project name\","]
#[doc = "            \"type\": \"string\","]
#[doc = "            \"maxLength\": 63,"]
#[doc = "            \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "          },"]
#[doc = "          \"zip\": {"]
#[doc = "            \"description\": \"Project's Zip source\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"properties\": {"]
#[doc = "              \"location\": {"]
#[doc = "                \"description\": \"Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH\","]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"additionalProperties\": false"]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"additionalProperties\": false"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"description\": \"Id in a registry that contains a Devfile yaml file\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"kubernetes\": {"]
#[doc = "      \"description\": \"Reference to a Kubernetes CRD of type DevWorkspaceTemplate\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"name\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"name\": {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"namespace\": {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"projects\": {"]
#[doc = "      \"description\": \"Overrides of projects encapsulated in a parent devfile. Overriding is done according to K8S strategic merge patch standard rules.\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"object\","]
#[doc = "        \"oneOf\": ["]
#[doc = "          {"]
#[doc = "            \"required\": ["]
#[doc = "              \"git\""]
#[doc = "            ]"]
#[doc = "          },"]
#[doc = "          {"]
#[doc = "            \"required\": ["]
#[doc = "              \"zip\""]
#[doc = "            ]"]
#[doc = "          }"]
#[doc = "        ],"]
#[doc = "        \"required\": ["]
#[doc = "          \"name\""]
#[doc = "        ],"]
#[doc = "        \"properties\": {"]
#[doc = "          \"attributes\": {"]
#[doc = "            \"description\": \"Map of implementation-dependant free-form YAML attributes.\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"additionalProperties\": true"]
#[doc = "          },"]
#[doc = "          \"clonePath\": {"]
#[doc = "            \"description\": \"Path relative to the root of the projects to which this project should be cloned into. This is a unix-style relative path (i.e. uses forward slashes). The path is invalid if it is absolute or tries to escape the project root through the usage of '..'. If not specified, defaults to the project name.\","]
#[doc = "            \"type\": \"string\""]
#[doc = "          },"]
#[doc = "          \"git\": {"]
#[doc = "            \"description\": \"Project's Git source\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"properties\": {"]
#[doc = "              \"checkoutFrom\": {"]
#[doc = "                \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"properties\": {"]
#[doc = "                  \"remote\": {"]
#[doc = "                    \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "                    \"type\": \"string\""]
#[doc = "                  },"]
#[doc = "                  \"revision\": {"]
#[doc = "                    \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "                    \"type\": \"string\""]
#[doc = "                  }"]
#[doc = "                },"]
#[doc = "                \"additionalProperties\": false"]
#[doc = "              },"]
#[doc = "              \"remotes\": {"]
#[doc = "                \"description\": \"The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"additionalProperties\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"additionalProperties\": false"]
#[doc = "          },"]
#[doc = "          \"name\": {"]
#[doc = "            \"description\": \"Project name\","]
#[doc = "            \"type\": \"string\","]
#[doc = "            \"maxLength\": 63,"]
#[doc = "            \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "          },"]
#[doc = "          \"zip\": {"]
#[doc = "            \"description\": \"Project's Zip source\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"properties\": {"]
#[doc = "              \"location\": {"]
#[doc = "                \"description\": \"Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH\","]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"additionalProperties\": false"]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"additionalProperties\": false"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"registryUrl\": {"]
#[doc = "      \"description\": \"Registry URL to pull the parent devfile from when using id in the parent reference. To ensure the parent devfile gets resolved consistently in different environments, it is recommended to always specify the `registryUrl` when `id` is used.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"starterProjects\": {"]
#[doc = "      \"description\": \"Overrides of starterProjects encapsulated in a parent devfile. Overriding is done according to K8S strategic merge patch standard rules.\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"object\","]
#[doc = "        \"oneOf\": ["]
#[doc = "          {"]
#[doc = "            \"required\": ["]
#[doc = "              \"git\""]
#[doc = "            ]"]
#[doc = "          },"]
#[doc = "          {"]
#[doc = "            \"required\": ["]
#[doc = "              \"zip\""]
#[doc = "            ]"]
#[doc = "          }"]
#[doc = "        ],"]
#[doc = "        \"required\": ["]
#[doc = "          \"name\""]
#[doc = "        ],"]
#[doc = "        \"properties\": {"]
#[doc = "          \"attributes\": {"]
#[doc = "            \"description\": \"Map of implementation-dependant free-form YAML attributes.\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"additionalProperties\": true"]
#[doc = "          },"]
#[doc = "          \"description\": {"]
#[doc = "            \"description\": \"Description of a starter project\","]
#[doc = "            \"type\": \"string\""]
#[doc = "          },"]
#[doc = "          \"git\": {"]
#[doc = "            \"description\": \"Project's Git source\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"properties\": {"]
#[doc = "              \"checkoutFrom\": {"]
#[doc = "                \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"properties\": {"]
#[doc = "                  \"remote\": {"]
#[doc = "                    \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "                    \"type\": \"string\""]
#[doc = "                  },"]
#[doc = "                  \"revision\": {"]
#[doc = "                    \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "                    \"type\": \"string\""]
#[doc = "                  }"]
#[doc = "                },"]
#[doc = "                \"additionalProperties\": false"]
#[doc = "              },"]
#[doc = "              \"remotes\": {"]
#[doc = "                \"description\": \"The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"additionalProperties\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"additionalProperties\": false"]
#[doc = "          },"]
#[doc = "          \"name\": {"]
#[doc = "            \"description\": \"Project name\","]
#[doc = "            \"type\": \"string\","]
#[doc = "            \"maxLength\": 63,"]
#[doc = "            \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "          },"]
#[doc = "          \"subDir\": {"]
#[doc = "            \"description\": \"Sub-directory from a starter project to be used as root for starter project.\","]
#[doc = "            \"type\": \"string\""]
#[doc = "          },"]
#[doc = "          \"zip\": {"]
#[doc = "            \"description\": \"Project's Zip source\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"properties\": {"]
#[doc = "              \"location\": {"]
#[doc = "                \"description\": \"Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH\","]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"additionalProperties\": false"]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"additionalProperties\": false"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"uri\": {"]
#[doc = "      \"description\": \"URI Reference of a parent devfile YAML file. It can be a full URL or a relative URI with the current devfile as the base URI.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"variables\": {"]
#[doc = "      \"description\": \"Overrides of variables encapsulated in a parent devfile. Overriding is done according to K8S strategic merge patch standard rules.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"version\": {"]
#[doc = "      \"description\": \"Specific stack/sample version to pull the parent devfile from, when using id in the parent reference. To specify `version`, `id` must be defined and used as the import reference source. `version` can be either a specific stack version, or `latest`. If no `version` specified, default version will be used.\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"pattern\": \"^(latest)|(([1-9])\\\\.([0-9]+)\\\\.([0-9]+)(\\\\-[0-9a-z-]+(\\\\.[0-9a-z-]+)*)?(\\\\+[0-9A-Za-z-]+(\\\\.[0-9A-Za-z-]+)*)?)$\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged, deny_unknown_fields)]
pub enum DevfileSchemaVersion222Parent {
    Variant0 {
        #[doc = "Overrides of attributes encapsulated in a parent devfile. Overriding is done according to K8S strategic merge patch standard rules."]
        #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
        attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
        #[doc = "Overrides of commands encapsulated in a parent devfile or a plugin. Overriding is done according to K8S strategic merge patch standard rules."]
        #[serde(default, skip_serializing_if = "::std::vec::Vec::is_empty")]
        commands: ::std::vec::Vec<DevfileSchemaVersion222ParentVariant0CommandsItem>,
        #[doc = "Overrides of components encapsulated in a parent devfile or a plugin. Overriding is done according to K8S strategic merge patch standard rules."]
        #[serde(default, skip_serializing_if = "::std::vec::Vec::is_empty")]
        components: ::std::vec::Vec<DevfileSchemaVersion222ParentVariant0ComponentsItem>,
        #[doc = "Overrides of dependentProjects encapsulated in a parent devfile. Overriding is done according to K8S strategic merge patch standard rules."]
        #[serde(
            rename = "dependentProjects",
            default,
            skip_serializing_if = "::std::vec::Vec::is_empty"
        )]
        dependent_projects:
            ::std::vec::Vec<DevfileSchemaVersion222ParentVariant0DependentProjectsItem>,
        #[doc = "Overrides of projects encapsulated in a parent devfile. Overriding is done according to K8S strategic merge patch standard rules."]
        #[serde(default, skip_serializing_if = "::std::vec::Vec::is_empty")]
        projects: ::std::vec::Vec<DevfileSchemaVersion222ParentVariant0ProjectsItem>,
        #[doc = "Registry URL to pull the parent devfile from when using id in the parent reference. To ensure the parent devfile gets resolved consistently in different environments, it is recommended to always specify the `registryUrl` when `id` is used."]
        #[serde(
            rename = "registryUrl",
            default,
            skip_serializing_if = "::std::option::Option::is_none"
        )]
        registry_url: ::std::option::Option<::std::string::String>,
        #[doc = "Overrides of starterProjects encapsulated in a parent devfile. Overriding is done according to K8S strategic merge patch standard rules."]
        #[serde(
            rename = "starterProjects",
            default,
            skip_serializing_if = "::std::vec::Vec::is_empty"
        )]
        starter_projects: ::std::vec::Vec<DevfileSchemaVersion222ParentVariant0StarterProjectsItem>,
        #[doc = "URI Reference of a parent devfile YAML file. It can be a full URL or a relative URI with the current devfile as the base URI."]
        uri: ::std::string::String,
        #[doc = "Overrides of variables encapsulated in a parent devfile. Overriding is done according to K8S strategic merge patch standard rules."]
        #[serde(
            default,
            skip_serializing_if = ":: std :: collections :: HashMap::is_empty"
        )]
        variables: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
        #[doc = "Specific stack/sample version to pull the parent devfile from, when using id in the parent reference. To specify `version`, `id` must be defined and used as the import reference source. `version` can be either a specific stack version, or `latest`. If no `version` specified, default version will be used."]
        #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
        version: ::std::option::Option<DevfileSchemaVersion222ParentVariant0Version>,
    },
    Variant1 {
        #[doc = "Overrides of attributes encapsulated in a parent devfile. Overriding is done according to K8S strategic merge patch standard rules."]
        #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
        attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
        #[doc = "Overrides of commands encapsulated in a parent devfile or a plugin. Overriding is done according to K8S strategic merge patch standard rules."]
        #[serde(default, skip_serializing_if = "::std::vec::Vec::is_empty")]
        commands: ::std::vec::Vec<DevfileSchemaVersion222ParentVariant1CommandsItem>,
        #[doc = "Overrides of components encapsulated in a parent devfile or a plugin. Overriding is done according to K8S strategic merge patch standard rules."]
        #[serde(default, skip_serializing_if = "::std::vec::Vec::is_empty")]
        components: ::std::vec::Vec<DevfileSchemaVersion222ParentVariant1ComponentsItem>,
        #[doc = "Overrides of dependentProjects encapsulated in a parent devfile. Overriding is done according to K8S strategic merge patch standard rules."]
        #[serde(
            rename = "dependentProjects",
            default,
            skip_serializing_if = "::std::vec::Vec::is_empty"
        )]
        dependent_projects:
            ::std::vec::Vec<DevfileSchemaVersion222ParentVariant1DependentProjectsItem>,
        #[doc = "Id in a registry that contains a Devfile yaml file"]
        id: ::std::string::String,
        #[doc = "Overrides of projects encapsulated in a parent devfile. Overriding is done according to K8S strategic merge patch standard rules."]
        #[serde(default, skip_serializing_if = "::std::vec::Vec::is_empty")]
        projects: ::std::vec::Vec<DevfileSchemaVersion222ParentVariant1ProjectsItem>,
        #[doc = "Registry URL to pull the parent devfile from when using id in the parent reference. To ensure the parent devfile gets resolved consistently in different environments, it is recommended to always specify the `registryUrl` when `id` is used."]
        #[serde(
            rename = "registryUrl",
            default,
            skip_serializing_if = "::std::option::Option::is_none"
        )]
        registry_url: ::std::option::Option<::std::string::String>,
        #[doc = "Overrides of starterProjects encapsulated in a parent devfile. Overriding is done according to K8S strategic merge patch standard rules."]
        #[serde(
            rename = "starterProjects",
            default,
            skip_serializing_if = "::std::vec::Vec::is_empty"
        )]
        starter_projects: ::std::vec::Vec<DevfileSchemaVersion222ParentVariant1StarterProjectsItem>,
        #[doc = "Overrides of variables encapsulated in a parent devfile. Overriding is done according to K8S strategic merge patch standard rules."]
        #[serde(
            default,
            skip_serializing_if = ":: std :: collections :: HashMap::is_empty"
        )]
        variables: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
        #[doc = "Specific stack/sample version to pull the parent devfile from, when using id in the parent reference. To specify `version`, `id` must be defined and used as the import reference source. `version` can be either a specific stack version, or `latest`. If no `version` specified, default version will be used."]
        #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
        version: ::std::option::Option<DevfileSchemaVersion222ParentVariant1Version>,
    },
    Variant2 {
        #[doc = "Overrides of attributes encapsulated in a parent devfile. Overriding is done according to K8S strategic merge patch standard rules."]
        #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
        attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
        #[doc = "Overrides of commands encapsulated in a parent devfile or a plugin. Overriding is done according to K8S strategic merge patch standard rules."]
        #[serde(default, skip_serializing_if = "::std::vec::Vec::is_empty")]
        commands: ::std::vec::Vec<DevfileSchemaVersion222ParentVariant2CommandsItem>,
        #[doc = "Overrides of components encapsulated in a parent devfile or a plugin. Overriding is done according to K8S strategic merge patch standard rules."]
        #[serde(default, skip_serializing_if = "::std::vec::Vec::is_empty")]
        components: ::std::vec::Vec<DevfileSchemaVersion222ParentVariant2ComponentsItem>,
        #[doc = "Overrides of dependentProjects encapsulated in a parent devfile. Overriding is done according to K8S strategic merge patch standard rules."]
        #[serde(
            rename = "dependentProjects",
            default,
            skip_serializing_if = "::std::vec::Vec::is_empty"
        )]
        dependent_projects:
            ::std::vec::Vec<DevfileSchemaVersion222ParentVariant2DependentProjectsItem>,
        kubernetes: DevfileSchemaVersion222ParentVariant2Kubernetes,
        #[doc = "Overrides of projects encapsulated in a parent devfile. Overriding is done according to K8S strategic merge patch standard rules."]
        #[serde(default, skip_serializing_if = "::std::vec::Vec::is_empty")]
        projects: ::std::vec::Vec<DevfileSchemaVersion222ParentVariant2ProjectsItem>,
        #[doc = "Registry URL to pull the parent devfile from when using id in the parent reference. To ensure the parent devfile gets resolved consistently in different environments, it is recommended to always specify the `registryUrl` when `id` is used."]
        #[serde(
            rename = "registryUrl",
            default,
            skip_serializing_if = "::std::option::Option::is_none"
        )]
        registry_url: ::std::option::Option<::std::string::String>,
        #[doc = "Overrides of starterProjects encapsulated in a parent devfile. Overriding is done according to K8S strategic merge patch standard rules."]
        #[serde(
            rename = "starterProjects",
            default,
            skip_serializing_if = "::std::vec::Vec::is_empty"
        )]
        starter_projects: ::std::vec::Vec<DevfileSchemaVersion222ParentVariant2StarterProjectsItem>,
        #[doc = "Overrides of variables encapsulated in a parent devfile. Overriding is done according to K8S strategic merge patch standard rules."]
        #[serde(
            default,
            skip_serializing_if = ":: std :: collections :: HashMap::is_empty"
        )]
        variables: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
        #[doc = "Specific stack/sample version to pull the parent devfile from, when using id in the parent reference. To specify `version`, `id` must be defined and used as the import reference source. `version` can be either a specific stack version, or `latest`. If no `version` specified, default version will be used."]
        #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
        version: ::std::option::Option<DevfileSchemaVersion222ParentVariant2Version>,
    },
}
impl ::std::convert::From<&Self> for DevfileSchemaVersion222Parent {
    fn from(value: &DevfileSchemaVersion222Parent) -> Self {
        value.clone()
    }
}
#[doc = "`DevfileSchemaVersion222ParentVariant0CommandsItem`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"exec\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"apply\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"composite\""]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  ],"]
#[doc = "  \"required\": ["]
#[doc = "    \"id\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"apply\": {"]
#[doc = "      \"description\": \"Command that consists in applying a given component definition, typically bound to a devworkspace event.\\n\\nFor example, when an `apply` command is bound to a `preStart` event, and references a `container` component, it will start the container as a K8S initContainer in the devworkspace POD, unless the component has its `dedicatedPod` field set to `true`.\\n\\nWhen no `apply` command exist for a given component, it is assumed the component will be applied at devworkspace start by default, unless `deployByDefault` for that component is set to false.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"component\": {"]
#[doc = "          \"description\": \"Describes component that will be applied\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"group\": {"]
#[doc = "          \"description\": \"Defines the group this command is part of\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"properties\": {"]
#[doc = "            \"isDefault\": {"]
#[doc = "              \"description\": \"Identifies the default command for a given group kind\","]
#[doc = "              \"type\": \"boolean\""]
#[doc = "            },"]
#[doc = "            \"kind\": {"]
#[doc = "              \"description\": \"Kind of group the command is part of\","]
#[doc = "              \"type\": \"string\","]
#[doc = "              \"enum\": ["]
#[doc = "                \"build\","]
#[doc = "                \"run\","]
#[doc = "                \"test\","]
#[doc = "                \"debug\","]
#[doc = "                \"deploy\""]
#[doc = "              ]"]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"label\": {"]
#[doc = "          \"description\": \"Optional label that provides a label for this command to be used in Editor UI menus for example\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"attributes\": {"]
#[doc = "      \"description\": \"Map of implementation-dependant free-form YAML attributes.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": true"]
#[doc = "    },"]
#[doc = "    \"composite\": {"]
#[doc = "      \"description\": \"Composite command that allows executing several sub-commands either sequentially or concurrently\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"commands\": {"]
#[doc = "          \"description\": \"The commands that comprise this composite command\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"group\": {"]
#[doc = "          \"description\": \"Defines the group this command is part of\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"properties\": {"]
#[doc = "            \"isDefault\": {"]
#[doc = "              \"description\": \"Identifies the default command for a given group kind\","]
#[doc = "              \"type\": \"boolean\""]
#[doc = "            },"]
#[doc = "            \"kind\": {"]
#[doc = "              \"description\": \"Kind of group the command is part of\","]
#[doc = "              \"type\": \"string\","]
#[doc = "              \"enum\": ["]
#[doc = "                \"build\","]
#[doc = "                \"run\","]
#[doc = "                \"test\","]
#[doc = "                \"debug\","]
#[doc = "                \"deploy\""]
#[doc = "              ]"]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"label\": {"]
#[doc = "          \"description\": \"Optional label that provides a label for this command to be used in Editor UI menus for example\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"parallel\": {"]
#[doc = "          \"description\": \"Indicates if the sub-commands should be executed concurrently\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"exec\": {"]
#[doc = "      \"description\": \"CLI Command executed in an existing component container\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"commandLine\": {"]
#[doc = "          \"description\": \"The actual command-line string\\n\\nSpecial variables that can be used:\\n\\n - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping.\\n\\n - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"component\": {"]
#[doc = "          \"description\": \"Describes component to which given action relates\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"env\": {"]
#[doc = "          \"description\": \"Optional list of environment variables that have to be set before running the command\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"required\": ["]
#[doc = "              \"name\""]
#[doc = "            ],"]
#[doc = "            \"properties\": {"]
#[doc = "              \"name\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              },"]
#[doc = "              \"value\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"additionalProperties\": false"]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"group\": {"]
#[doc = "          \"description\": \"Defines the group this command is part of\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"properties\": {"]
#[doc = "            \"isDefault\": {"]
#[doc = "              \"description\": \"Identifies the default command for a given group kind\","]
#[doc = "              \"type\": \"boolean\""]
#[doc = "            },"]
#[doc = "            \"kind\": {"]
#[doc = "              \"description\": \"Kind of group the command is part of\","]
#[doc = "              \"type\": \"string\","]
#[doc = "              \"enum\": ["]
#[doc = "                \"build\","]
#[doc = "                \"run\","]
#[doc = "                \"test\","]
#[doc = "                \"debug\","]
#[doc = "                \"deploy\""]
#[doc = "              ]"]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"hotReloadCapable\": {"]
#[doc = "          \"description\": \"Specify whether the command is restarted or not when the source code changes. If set to `true` the command won't be restarted. A *hotReloadCapable* `run` or `debug` command is expected to handle file changes on its own and won't be restarted. A *hotReloadCapable* `build` command is expected to be executed only once and won't be executed again. This field is taken into account only for commands `build`, `run` and `debug` with `isDefault` set to `true`.\\n\\nDefault value is `false`\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"label\": {"]
#[doc = "          \"description\": \"Optional label that provides a label for this command to be used in Editor UI menus for example\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"workingDir\": {"]
#[doc = "          \"description\": \"Working directory where the command should be executed\\n\\nSpecial variables that can be used:\\n\\n - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping.\\n\\n - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"description\": \"Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"maxLength\": 63,"]
#[doc = "      \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged, deny_unknown_fields)]
pub enum DevfileSchemaVersion222ParentVariant0CommandsItem {
    Variant0 {
        #[doc = "Map of implementation-dependant free-form YAML attributes."]
        #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
        attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
        exec: DevfileSchemaVersion222ParentVariant0CommandsItemVariant0Exec,
        #[doc = "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events."]
        id: DevfileSchemaVersion222ParentVariant0CommandsItemVariant0Id,
    },
    Variant1 {
        apply: DevfileSchemaVersion222ParentVariant0CommandsItemVariant1Apply,
        #[doc = "Map of implementation-dependant free-form YAML attributes."]
        #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
        attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
        #[doc = "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events."]
        id: DevfileSchemaVersion222ParentVariant0CommandsItemVariant1Id,
    },
    Variant2 {
        #[doc = "Map of implementation-dependant free-form YAML attributes."]
        #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
        attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
        composite: DevfileSchemaVersion222ParentVariant0CommandsItemVariant2Composite,
        #[doc = "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events."]
        id: DevfileSchemaVersion222ParentVariant0CommandsItemVariant2Id,
    },
}
impl ::std::convert::From<&Self> for DevfileSchemaVersion222ParentVariant0CommandsItem {
    fn from(value: &DevfileSchemaVersion222ParentVariant0CommandsItem) -> Self {
        value.clone()
    }
}
#[doc = "CLI Command executed in an existing component container"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"CLI Command executed in an existing component container\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"commandLine\": {"]
#[doc = "      \"description\": \"The actual command-line string\\n\\nSpecial variables that can be used:\\n\\n - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping.\\n\\n - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"component\": {"]
#[doc = "      \"description\": \"Describes component to which given action relates\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"env\": {"]
#[doc = "      \"description\": \"Optional list of environment variables that have to be set before running the command\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"object\","]
#[doc = "        \"required\": ["]
#[doc = "          \"name\""]
#[doc = "        ],"]
#[doc = "        \"properties\": {"]
#[doc = "          \"name\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          },"]
#[doc = "          \"value\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"additionalProperties\": false"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"group\": {"]
#[doc = "      \"description\": \"Defines the group this command is part of\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"isDefault\": {"]
#[doc = "          \"description\": \"Identifies the default command for a given group kind\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"kind\": {"]
#[doc = "          \"description\": \"Kind of group the command is part of\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"enum\": ["]
#[doc = "            \"build\","]
#[doc = "            \"run\","]
#[doc = "            \"test\","]
#[doc = "            \"debug\","]
#[doc = "            \"deploy\""]
#[doc = "          ]"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"hotReloadCapable\": {"]
#[doc = "      \"description\": \"Specify whether the command is restarted or not when the source code changes. If set to `true` the command won't be restarted. A *hotReloadCapable* `run` or `debug` command is expected to handle file changes on its own and won't be restarted. A *hotReloadCapable* `build` command is expected to be executed only once and won't be executed again. This field is taken into account only for commands `build`, `run` and `debug` with `isDefault` set to `true`.\\n\\nDefault value is `false`\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"label\": {"]
#[doc = "      \"description\": \"Optional label that provides a label for this command to be used in Editor UI menus for example\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"workingDir\": {"]
#[doc = "      \"description\": \"Working directory where the command should be executed\\n\\nSpecial variables that can be used:\\n\\n - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping.\\n\\n - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant0CommandsItemVariant0Exec {
    #[doc = "The actual command-line string\n\nSpecial variables that can be used:\n\n - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping.\n\n - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one."]
    #[serde(
        rename = "commandLine",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub command_line: ::std::option::Option<::std::string::String>,
    #[doc = "Describes component to which given action relates"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub component: ::std::option::Option<::std::string::String>,
    #[doc = "Optional list of environment variables that have to be set before running the command"]
    #[serde(default, skip_serializing_if = "::std::vec::Vec::is_empty")]
    pub env: ::std::vec::Vec<DevfileSchemaVersion222ParentVariant0CommandsItemVariant0ExecEnvItem>,
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub group:
        ::std::option::Option<DevfileSchemaVersion222ParentVariant0CommandsItemVariant0ExecGroup>,
    #[doc = "Specify whether the command is restarted or not when the source code changes. If set to `true` the command won't be restarted. A *hotReloadCapable* `run` or `debug` command is expected to handle file changes on its own and won't be restarted. A *hotReloadCapable* `build` command is expected to be executed only once and won't be executed again. This field is taken into account only for commands `build`, `run` and `debug` with `isDefault` set to `true`.\n\nDefault value is `false`"]
    #[serde(
        rename = "hotReloadCapable",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub hot_reload_capable: ::std::option::Option<bool>,
    #[doc = "Optional label that provides a label for this command to be used in Editor UI menus for example"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub label: ::std::option::Option<::std::string::String>,
    #[doc = "Working directory where the command should be executed\n\nSpecial variables that can be used:\n\n - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping.\n\n - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one."]
    #[serde(
        rename = "workingDir",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub working_dir: ::std::option::Option<::std::string::String>,
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant0CommandsItemVariant0Exec>
    for DevfileSchemaVersion222ParentVariant0CommandsItemVariant0Exec
{
    fn from(value: &DevfileSchemaVersion222ParentVariant0CommandsItemVariant0Exec) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant0CommandsItemVariant0Exec {
    pub fn builder() -> builder::DevfileSchemaVersion222ParentVariant0CommandsItemVariant0Exec {
        Default::default()
    }
}
#[doc = "`DevfileSchemaVersion222ParentVariant0CommandsItemVariant0ExecEnvItem`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"name\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"name\": {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"value\": {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
pub struct DevfileSchemaVersion222ParentVariant0CommandsItemVariant0ExecEnvItem {
    pub name: ::std::string::String,
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub value: ::std::option::Option<::std::string::String>,
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant0CommandsItemVariant0ExecEnvItem>
    for DevfileSchemaVersion222ParentVariant0CommandsItemVariant0ExecEnvItem
{
    fn from(value: &DevfileSchemaVersion222ParentVariant0CommandsItemVariant0ExecEnvItem) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant0CommandsItemVariant0ExecEnvItem {
    pub fn builder() -> builder::DevfileSchemaVersion222ParentVariant0CommandsItemVariant0ExecEnvItem
    {
        Default::default()
    }
}
#[doc = "Defines the group this command is part of"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Defines the group this command is part of\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"isDefault\": {"]
#[doc = "      \"description\": \"Identifies the default command for a given group kind\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"kind\": {"]
#[doc = "      \"description\": \"Kind of group the command is part of\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"build\","]
#[doc = "        \"run\","]
#[doc = "        \"test\","]
#[doc = "        \"debug\","]
#[doc = "        \"deploy\""]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant0CommandsItemVariant0ExecGroup {
    #[doc = "Identifies the default command for a given group kind"]
    #[serde(
        rename = "isDefault",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub is_default: ::std::option::Option<bool>,
    #[doc = "Kind of group the command is part of"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub kind: ::std::option::Option<
        DevfileSchemaVersion222ParentVariant0CommandsItemVariant0ExecGroupKind,
    >,
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant0CommandsItemVariant0ExecGroup>
    for DevfileSchemaVersion222ParentVariant0CommandsItemVariant0ExecGroup
{
    fn from(value: &DevfileSchemaVersion222ParentVariant0CommandsItemVariant0ExecGroup) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant0CommandsItemVariant0ExecGroup {
    pub fn builder() -> builder::DevfileSchemaVersion222ParentVariant0CommandsItemVariant0ExecGroup
    {
        Default::default()
    }
}
#[doc = "Kind of group the command is part of"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Kind of group the command is part of\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"build\","]
#[doc = "    \"run\","]
#[doc = "    \"test\","]
#[doc = "    \"debug\","]
#[doc = "    \"deploy\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DevfileSchemaVersion222ParentVariant0CommandsItemVariant0ExecGroupKind {
    #[serde(rename = "build")]
    Build,
    #[serde(rename = "run")]
    Run,
    #[serde(rename = "test")]
    Test,
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "deploy")]
    Deploy,
}
impl ::std::convert::From<&Self>
    for DevfileSchemaVersion222ParentVariant0CommandsItemVariant0ExecGroupKind
{
    fn from(
        value: &DevfileSchemaVersion222ParentVariant0CommandsItemVariant0ExecGroupKind,
    ) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display
    for DevfileSchemaVersion222ParentVariant0CommandsItemVariant0ExecGroupKind
{
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Build => f.write_str("build"),
            Self::Run => f.write_str("run"),
            Self::Test => f.write_str("test"),
            Self::Debug => f.write_str("debug"),
            Self::Deploy => f.write_str("deploy"),
        }
    }
}
impl ::std::str::FromStr
    for DevfileSchemaVersion222ParentVariant0CommandsItemVariant0ExecGroupKind
{
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        match value {
            "build" => Ok(Self::Build),
            "run" => Ok(Self::Run),
            "test" => Ok(Self::Test),
            "debug" => Ok(Self::Debug),
            "deploy" => Ok(Self::Deploy),
            _ => Err("invalid value".into()),
        }
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ParentVariant0CommandsItemVariant0ExecGroupKind
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant0CommandsItemVariant0ExecGroupKind
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant0CommandsItemVariant0ExecGroupKind
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant0CommandsItemVariant0Id(::std::string::String);
impl ::std::ops::Deref for DevfileSchemaVersion222ParentVariant0CommandsItemVariant0Id {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222ParentVariant0CommandsItemVariant0Id>
    for ::std::string::String
{
    fn from(value: DevfileSchemaVersion222ParentVariant0CommandsItemVariant0Id) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant0CommandsItemVariant0Id>
    for DevfileSchemaVersion222ParentVariant0CommandsItemVariant0Id
{
    fn from(value: &DevfileSchemaVersion222ParentVariant0CommandsItemVariant0Id) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for DevfileSchemaVersion222ParentVariant0CommandsItemVariant0Id {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str> for DevfileSchemaVersion222ParentVariant0CommandsItemVariant0Id {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant0CommandsItemVariant0Id
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant0CommandsItemVariant0Id
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de>
    for DevfileSchemaVersion222ParentVariant0CommandsItemVariant0Id
{
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Command that consists in applying a given component definition, typically bound to a devworkspace event.\n\nFor example, when an `apply` command is bound to a `preStart` event, and references a `container` component, it will start the container as a K8S initContainer in the devworkspace POD, unless the component has its `dedicatedPod` field set to `true`.\n\nWhen no `apply` command exist for a given component, it is assumed the component will be applied at devworkspace start by default, unless `deployByDefault` for that component is set to false."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Command that consists in applying a given component definition, typically bound to a devworkspace event.\\n\\nFor example, when an `apply` command is bound to a `preStart` event, and references a `container` component, it will start the container as a K8S initContainer in the devworkspace POD, unless the component has its `dedicatedPod` field set to `true`.\\n\\nWhen no `apply` command exist for a given component, it is assumed the component will be applied at devworkspace start by default, unless `deployByDefault` for that component is set to false.\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"component\": {"]
#[doc = "      \"description\": \"Describes component that will be applied\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"group\": {"]
#[doc = "      \"description\": \"Defines the group this command is part of\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"isDefault\": {"]
#[doc = "          \"description\": \"Identifies the default command for a given group kind\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"kind\": {"]
#[doc = "          \"description\": \"Kind of group the command is part of\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"enum\": ["]
#[doc = "            \"build\","]
#[doc = "            \"run\","]
#[doc = "            \"test\","]
#[doc = "            \"debug\","]
#[doc = "            \"deploy\""]
#[doc = "          ]"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"label\": {"]
#[doc = "      \"description\": \"Optional label that provides a label for this command to be used in Editor UI menus for example\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant0CommandsItemVariant1Apply {
    #[doc = "Describes component that will be applied"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub component: ::std::option::Option<::std::string::String>,
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub group:
        ::std::option::Option<DevfileSchemaVersion222ParentVariant0CommandsItemVariant1ApplyGroup>,
    #[doc = "Optional label that provides a label for this command to be used in Editor UI menus for example"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub label: ::std::option::Option<::std::string::String>,
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant0CommandsItemVariant1Apply>
    for DevfileSchemaVersion222ParentVariant0CommandsItemVariant1Apply
{
    fn from(value: &DevfileSchemaVersion222ParentVariant0CommandsItemVariant1Apply) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant0CommandsItemVariant1Apply {
    pub fn builder() -> builder::DevfileSchemaVersion222ParentVariant0CommandsItemVariant1Apply {
        Default::default()
    }
}
#[doc = "Defines the group this command is part of"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Defines the group this command is part of\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"isDefault\": {"]
#[doc = "      \"description\": \"Identifies the default command for a given group kind\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"kind\": {"]
#[doc = "      \"description\": \"Kind of group the command is part of\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"build\","]
#[doc = "        \"run\","]
#[doc = "        \"test\","]
#[doc = "        \"debug\","]
#[doc = "        \"deploy\""]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant0CommandsItemVariant1ApplyGroup {
    #[doc = "Identifies the default command for a given group kind"]
    #[serde(
        rename = "isDefault",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub is_default: ::std::option::Option<bool>,
    #[doc = "Kind of group the command is part of"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub kind: ::std::option::Option<
        DevfileSchemaVersion222ParentVariant0CommandsItemVariant1ApplyGroupKind,
    >,
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant0CommandsItemVariant1ApplyGroup>
    for DevfileSchemaVersion222ParentVariant0CommandsItemVariant1ApplyGroup
{
    fn from(value: &DevfileSchemaVersion222ParentVariant0CommandsItemVariant1ApplyGroup) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant0CommandsItemVariant1ApplyGroup {
    pub fn builder() -> builder::DevfileSchemaVersion222ParentVariant0CommandsItemVariant1ApplyGroup
    {
        Default::default()
    }
}
#[doc = "Kind of group the command is part of"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Kind of group the command is part of\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"build\","]
#[doc = "    \"run\","]
#[doc = "    \"test\","]
#[doc = "    \"debug\","]
#[doc = "    \"deploy\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DevfileSchemaVersion222ParentVariant0CommandsItemVariant1ApplyGroupKind {
    #[serde(rename = "build")]
    Build,
    #[serde(rename = "run")]
    Run,
    #[serde(rename = "test")]
    Test,
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "deploy")]
    Deploy,
}
impl ::std::convert::From<&Self>
    for DevfileSchemaVersion222ParentVariant0CommandsItemVariant1ApplyGroupKind
{
    fn from(
        value: &DevfileSchemaVersion222ParentVariant0CommandsItemVariant1ApplyGroupKind,
    ) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display
    for DevfileSchemaVersion222ParentVariant0CommandsItemVariant1ApplyGroupKind
{
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Build => f.write_str("build"),
            Self::Run => f.write_str("run"),
            Self::Test => f.write_str("test"),
            Self::Debug => f.write_str("debug"),
            Self::Deploy => f.write_str("deploy"),
        }
    }
}
impl ::std::str::FromStr
    for DevfileSchemaVersion222ParentVariant0CommandsItemVariant1ApplyGroupKind
{
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        match value {
            "build" => Ok(Self::Build),
            "run" => Ok(Self::Run),
            "test" => Ok(Self::Test),
            "debug" => Ok(Self::Debug),
            "deploy" => Ok(Self::Deploy),
            _ => Err("invalid value".into()),
        }
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ParentVariant0CommandsItemVariant1ApplyGroupKind
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant0CommandsItemVariant1ApplyGroupKind
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant0CommandsItemVariant1ApplyGroupKind
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant0CommandsItemVariant1Id(::std::string::String);
impl ::std::ops::Deref for DevfileSchemaVersion222ParentVariant0CommandsItemVariant1Id {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222ParentVariant0CommandsItemVariant1Id>
    for ::std::string::String
{
    fn from(value: DevfileSchemaVersion222ParentVariant0CommandsItemVariant1Id) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant0CommandsItemVariant1Id>
    for DevfileSchemaVersion222ParentVariant0CommandsItemVariant1Id
{
    fn from(value: &DevfileSchemaVersion222ParentVariant0CommandsItemVariant1Id) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for DevfileSchemaVersion222ParentVariant0CommandsItemVariant1Id {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str> for DevfileSchemaVersion222ParentVariant0CommandsItemVariant1Id {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant0CommandsItemVariant1Id
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant0CommandsItemVariant1Id
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de>
    for DevfileSchemaVersion222ParentVariant0CommandsItemVariant1Id
{
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Composite command that allows executing several sub-commands either sequentially or concurrently"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Composite command that allows executing several sub-commands either sequentially or concurrently\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"commands\": {"]
#[doc = "      \"description\": \"The commands that comprise this composite command\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"group\": {"]
#[doc = "      \"description\": \"Defines the group this command is part of\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"isDefault\": {"]
#[doc = "          \"description\": \"Identifies the default command for a given group kind\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"kind\": {"]
#[doc = "          \"description\": \"Kind of group the command is part of\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"enum\": ["]
#[doc = "            \"build\","]
#[doc = "            \"run\","]
#[doc = "            \"test\","]
#[doc = "            \"debug\","]
#[doc = "            \"deploy\""]
#[doc = "          ]"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"label\": {"]
#[doc = "      \"description\": \"Optional label that provides a label for this command to be used in Editor UI menus for example\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"parallel\": {"]
#[doc = "      \"description\": \"Indicates if the sub-commands should be executed concurrently\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant0CommandsItemVariant2Composite {
    #[doc = "The commands that comprise this composite command"]
    #[serde(default, skip_serializing_if = "::std::vec::Vec::is_empty")]
    pub commands: ::std::vec::Vec<::std::string::String>,
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub group: ::std::option::Option<
        DevfileSchemaVersion222ParentVariant0CommandsItemVariant2CompositeGroup,
    >,
    #[doc = "Optional label that provides a label for this command to be used in Editor UI menus for example"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub label: ::std::option::Option<::std::string::String>,
    #[doc = "Indicates if the sub-commands should be executed concurrently"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub parallel: ::std::option::Option<bool>,
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant0CommandsItemVariant2Composite>
    for DevfileSchemaVersion222ParentVariant0CommandsItemVariant2Composite
{
    fn from(value: &DevfileSchemaVersion222ParentVariant0CommandsItemVariant2Composite) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant0CommandsItemVariant2Composite {
    pub fn builder() -> builder::DevfileSchemaVersion222ParentVariant0CommandsItemVariant2Composite
    {
        Default::default()
    }
}
#[doc = "Defines the group this command is part of"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Defines the group this command is part of\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"isDefault\": {"]
#[doc = "      \"description\": \"Identifies the default command for a given group kind\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"kind\": {"]
#[doc = "      \"description\": \"Kind of group the command is part of\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"build\","]
#[doc = "        \"run\","]
#[doc = "        \"test\","]
#[doc = "        \"debug\","]
#[doc = "        \"deploy\""]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant0CommandsItemVariant2CompositeGroup {
    #[doc = "Identifies the default command for a given group kind"]
    #[serde(
        rename = "isDefault",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub is_default: ::std::option::Option<bool>,
    #[doc = "Kind of group the command is part of"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub kind: ::std::option::Option<
        DevfileSchemaVersion222ParentVariant0CommandsItemVariant2CompositeGroupKind,
    >,
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant0CommandsItemVariant2CompositeGroup>
    for DevfileSchemaVersion222ParentVariant0CommandsItemVariant2CompositeGroup
{
    fn from(
        value: &DevfileSchemaVersion222ParentVariant0CommandsItemVariant2CompositeGroup,
    ) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant0CommandsItemVariant2CompositeGroup {
    pub fn builder(
    ) -> builder::DevfileSchemaVersion222ParentVariant0CommandsItemVariant2CompositeGroup {
        Default::default()
    }
}
#[doc = "Kind of group the command is part of"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Kind of group the command is part of\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"build\","]
#[doc = "    \"run\","]
#[doc = "    \"test\","]
#[doc = "    \"debug\","]
#[doc = "    \"deploy\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DevfileSchemaVersion222ParentVariant0CommandsItemVariant2CompositeGroupKind {
    #[serde(rename = "build")]
    Build,
    #[serde(rename = "run")]
    Run,
    #[serde(rename = "test")]
    Test,
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "deploy")]
    Deploy,
}
impl ::std::convert::From<&Self>
    for DevfileSchemaVersion222ParentVariant0CommandsItemVariant2CompositeGroupKind
{
    fn from(
        value: &DevfileSchemaVersion222ParentVariant0CommandsItemVariant2CompositeGroupKind,
    ) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display
    for DevfileSchemaVersion222ParentVariant0CommandsItemVariant2CompositeGroupKind
{
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Build => f.write_str("build"),
            Self::Run => f.write_str("run"),
            Self::Test => f.write_str("test"),
            Self::Debug => f.write_str("debug"),
            Self::Deploy => f.write_str("deploy"),
        }
    }
}
impl ::std::str::FromStr
    for DevfileSchemaVersion222ParentVariant0CommandsItemVariant2CompositeGroupKind
{
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        match value {
            "build" => Ok(Self::Build),
            "run" => Ok(Self::Run),
            "test" => Ok(Self::Test),
            "debug" => Ok(Self::Debug),
            "deploy" => Ok(Self::Deploy),
            _ => Err("invalid value".into()),
        }
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ParentVariant0CommandsItemVariant2CompositeGroupKind
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant0CommandsItemVariant2CompositeGroupKind
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant0CommandsItemVariant2CompositeGroupKind
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant0CommandsItemVariant2Id(::std::string::String);
impl ::std::ops::Deref for DevfileSchemaVersion222ParentVariant0CommandsItemVariant2Id {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222ParentVariant0CommandsItemVariant2Id>
    for ::std::string::String
{
    fn from(value: DevfileSchemaVersion222ParentVariant0CommandsItemVariant2Id) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant0CommandsItemVariant2Id>
    for DevfileSchemaVersion222ParentVariant0CommandsItemVariant2Id
{
    fn from(value: &DevfileSchemaVersion222ParentVariant0CommandsItemVariant2Id) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for DevfileSchemaVersion222ParentVariant0CommandsItemVariant2Id {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str> for DevfileSchemaVersion222ParentVariant0CommandsItemVariant2Id {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant0CommandsItemVariant2Id
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant0CommandsItemVariant2Id
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de>
    for DevfileSchemaVersion222ParentVariant0CommandsItemVariant2Id
{
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "`DevfileSchemaVersion222ParentVariant0ComponentsItem`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"container\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"kubernetes\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"openshift\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"volume\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"image\""]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  ],"]
#[doc = "  \"required\": ["]
#[doc = "    \"name\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"attributes\": {"]
#[doc = "      \"description\": \"Map of implementation-dependant free-form YAML attributes.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": true"]
#[doc = "    },"]
#[doc = "    \"container\": {"]
#[doc = "      \"description\": \"Allows adding and configuring devworkspace-related containers\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"annotation\": {"]
#[doc = "          \"description\": \"Annotations that should be added to specific resources for this container\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"properties\": {"]
#[doc = "            \"deployment\": {"]
#[doc = "              \"description\": \"Annotations to be added to deployment\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"additionalProperties\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"service\": {"]
#[doc = "              \"description\": \"Annotations to be added to service\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"additionalProperties\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"args\": {"]
#[doc = "          \"description\": \"The arguments to supply to the command running the dockerimage component. The arguments are supplied either to the default command provided in the image or to the overridden command.\\n\\nDefaults to an empty array, meaning use whatever is defined in the image.\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"command\": {"]
#[doc = "          \"description\": \"The command to run in the dockerimage component instead of the default one provided in the image.\\n\\nDefaults to an empty array, meaning use whatever is defined in the image.\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"cpuLimit\": {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"cpuRequest\": {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"dedicatedPod\": {"]
#[doc = "          \"description\": \"Specify if a container should run in its own separated pod, instead of running as part of the main development environment pod.\\n\\nDefault value is `false`\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"endpoints\": {"]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"required\": ["]
#[doc = "              \"name\""]
#[doc = "            ],"]
#[doc = "            \"properties\": {"]
#[doc = "              \"annotation\": {"]
#[doc = "                \"description\": \"Annotations to be added to Kubernetes Ingress or Openshift Route\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"additionalProperties\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"attributes\": {"]
#[doc = "                \"description\": \"Map of implementation-dependant string-based free-form attributes.\\n\\nExamples of Che-specific attributes:\\n- cookiesAuthEnabled: \\\"true\\\" / \\\"false\\\",\\n- type: \\\"terminal\\\" / \\\"ide\\\" / \\\"ide-dev\\\",\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"additionalProperties\": true"]
#[doc = "              },"]
#[doc = "              \"exposure\": {"]
#[doc = "                \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "                \"type\": \"string\","]
#[doc = "                \"enum\": ["]
#[doc = "                  \"public\","]
#[doc = "                  \"internal\","]
#[doc = "                  \"none\""]
#[doc = "                ]"]
#[doc = "              },"]
#[doc = "              \"name\": {"]
#[doc = "                \"type\": \"string\","]
#[doc = "                \"maxLength\": 15,"]
#[doc = "                \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "              },"]
#[doc = "              \"path\": {"]
#[doc = "                \"description\": \"Path of the endpoint URL\","]
#[doc = "                \"type\": \"string\""]
#[doc = "              },"]
#[doc = "              \"protocol\": {"]
#[doc = "                \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "                \"type\": \"string\","]
#[doc = "                \"enum\": ["]
#[doc = "                  \"http\","]
#[doc = "                  \"https\","]
#[doc = "                  \"ws\","]
#[doc = "                  \"wss\","]
#[doc = "                  \"tcp\","]
#[doc = "                  \"udp\""]
#[doc = "                ]"]
#[doc = "              },"]
#[doc = "              \"secure\": {"]
#[doc = "                \"description\": \"Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.\","]
#[doc = "                \"type\": \"boolean\""]
#[doc = "              },"]
#[doc = "              \"targetPort\": {"]
#[doc = "                \"description\": \"Port number to be used within the container component. The same port cannot be used by two different container components.\","]
#[doc = "                \"type\": \"integer\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"additionalProperties\": false"]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"env\": {"]
#[doc = "          \"description\": \"Environment variables used in this container.\\n\\nThe following variables are reserved and cannot be overridden via env:\\n\\n - `$PROJECTS_ROOT`\\n\\n - `$PROJECT_SOURCE`\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"required\": ["]
#[doc = "              \"name\""]
#[doc = "            ],"]
#[doc = "            \"properties\": {"]
#[doc = "              \"name\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              },"]
#[doc = "              \"value\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"additionalProperties\": false"]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"image\": {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"memoryLimit\": {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"memoryRequest\": {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"mountSources\": {"]
#[doc = "          \"description\": \"Toggles whether or not the project source code should be mounted in the component.\\n\\nDefaults to true for all component types except plugins and components that set `dedicatedPod` to true.\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"sourceMapping\": {"]
#[doc = "          \"description\": \"Optional specification of the path in the container where project sources should be transferred/mounted when `mountSources` is `true`. When omitted, the default value of /projects is used.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"volumeMounts\": {"]
#[doc = "          \"description\": \"List of volumes mounts that should be mounted is this container.\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"description\": \"Volume that should be mounted to a component container\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"required\": ["]
#[doc = "              \"name\""]
#[doc = "            ],"]
#[doc = "            \"properties\": {"]
#[doc = "              \"name\": {"]
#[doc = "                \"description\": \"The volume mount name is the name of an existing `Volume` component. If several containers mount the same volume name then they will reuse the same volume and will be able to access to the same files.\","]
#[doc = "                \"type\": \"string\","]
#[doc = "                \"maxLength\": 63,"]
#[doc = "                \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "              },"]
#[doc = "              \"path\": {"]
#[doc = "                \"description\": \"The path in the component container where the volume should be mounted. If not path is mentioned, default path is the is `/<name>`.\","]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"additionalProperties\": false"]
#[doc = "          }"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"image\": {"]
#[doc = "      \"description\": \"Allows specifying the definition of an image for outer loop builds\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"required\": ["]
#[doc = "            \"dockerfile\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"required\": ["]
#[doc = "            \"autoBuild\""]
#[doc = "          ]"]
#[doc = "        }"]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"autoBuild\": {"]
#[doc = "          \"description\": \"Defines if the image should be built during startup.\\n\\nDefault value is `false`\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"dockerfile\": {"]
#[doc = "          \"description\": \"Allows specifying dockerfile type build\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"required\": ["]
#[doc = "                \"uri\""]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"required\": ["]
#[doc = "                \"devfileRegistry\""]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"required\": ["]
#[doc = "                \"git\""]
#[doc = "              ]"]
#[doc = "            }"]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"args\": {"]
#[doc = "              \"description\": \"The arguments to supply to the dockerfile build.\","]
#[doc = "              \"type\": \"array\","]
#[doc = "              \"items\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"buildContext\": {"]
#[doc = "              \"description\": \"Path of source directory to establish build context. Defaults to ${PROJECT_SOURCE} in the container\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"devfileRegistry\": {"]
#[doc = "              \"description\": \"Dockerfile's Devfile Registry source\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"properties\": {"]
#[doc = "                \"id\": {"]
#[doc = "                  \"description\": \"Id in a devfile registry that contains a Dockerfile. The src in the OCI registry required for the Dockerfile build will be downloaded for building the image.\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                },"]
#[doc = "                \"registryUrl\": {"]
#[doc = "                  \"description\": \"Devfile Registry URL to pull the Dockerfile from when using the Devfile Registry as Dockerfile src. To ensure the Dockerfile gets resolved consistently in different environments, it is recommended to always specify the `devfileRegistryUrl` when `Id` is used.\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            },"]
#[doc = "            \"git\": {"]
#[doc = "              \"description\": \"Dockerfile's Git source\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"properties\": {"]
#[doc = "                \"checkoutFrom\": {"]
#[doc = "                  \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"remote\": {"]
#[doc = "                      \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"revision\": {"]
#[doc = "                      \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                },"]
#[doc = "                \"fileLocation\": {"]
#[doc = "                  \"description\": \"Location of the Dockerfile in the Git repository when using git as Dockerfile src. Defaults to Dockerfile.\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                },"]
#[doc = "                \"remotes\": {"]
#[doc = "                  \"description\": \"The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"additionalProperties\": {"]
#[doc = "                    \"type\": \"string\""]
#[doc = "                  }"]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            },"]
#[doc = "            \"rootRequired\": {"]
#[doc = "              \"description\": \"Specify if a privileged builder pod is required.\\n\\nDefault value is `false`\","]
#[doc = "              \"type\": \"boolean\""]
#[doc = "            },"]
#[doc = "            \"uri\": {"]
#[doc = "              \"description\": \"URI Reference of a Dockerfile. It can be a full URL or a relative URI from the current devfile as the base URI.\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"imageName\": {"]
#[doc = "          \"description\": \"Name of the image for the resulting outerloop build\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"kubernetes\": {"]
#[doc = "      \"description\": \"Allows importing into the devworkspace the Kubernetes resources defined in a given manifest. For example this allows reusing the Kubernetes definitions used to deploy some runtime components in production.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"required\": ["]
#[doc = "            \"uri\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"required\": ["]
#[doc = "            \"inlined\""]
#[doc = "          ]"]
#[doc = "        }"]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"deployByDefault\": {"]
#[doc = "          \"description\": \"Defines if the component should be deployed during startup.\\n\\nDefault value is `false`\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"endpoints\": {"]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"required\": ["]
#[doc = "              \"name\""]
#[doc = "            ],"]
#[doc = "            \"properties\": {"]
#[doc = "              \"annotation\": {"]
#[doc = "                \"description\": \"Annotations to be added to Kubernetes Ingress or Openshift Route\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"additionalProperties\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"attributes\": {"]
#[doc = "                \"description\": \"Map of implementation-dependant string-based free-form attributes.\\n\\nExamples of Che-specific attributes:\\n- cookiesAuthEnabled: \\\"true\\\" / \\\"false\\\",\\n- type: \\\"terminal\\\" / \\\"ide\\\" / \\\"ide-dev\\\",\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"additionalProperties\": true"]
#[doc = "              },"]
#[doc = "              \"exposure\": {"]
#[doc = "                \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "                \"type\": \"string\","]
#[doc = "                \"enum\": ["]
#[doc = "                  \"public\","]
#[doc = "                  \"internal\","]
#[doc = "                  \"none\""]
#[doc = "                ]"]
#[doc = "              },"]
#[doc = "              \"name\": {"]
#[doc = "                \"type\": \"string\","]
#[doc = "                \"maxLength\": 15,"]
#[doc = "                \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "              },"]
#[doc = "              \"path\": {"]
#[doc = "                \"description\": \"Path of the endpoint URL\","]
#[doc = "                \"type\": \"string\""]
#[doc = "              },"]
#[doc = "              \"protocol\": {"]
#[doc = "                \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "                \"type\": \"string\","]
#[doc = "                \"enum\": ["]
#[doc = "                  \"http\","]
#[doc = "                  \"https\","]
#[doc = "                  \"ws\","]
#[doc = "                  \"wss\","]
#[doc = "                  \"tcp\","]
#[doc = "                  \"udp\""]
#[doc = "                ]"]
#[doc = "              },"]
#[doc = "              \"secure\": {"]
#[doc = "                \"description\": \"Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.\","]
#[doc = "                \"type\": \"boolean\""]
#[doc = "              },"]
#[doc = "              \"targetPort\": {"]
#[doc = "                \"description\": \"Port number to be used within the container component. The same port cannot be used by two different container components.\","]
#[doc = "                \"type\": \"integer\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"additionalProperties\": false"]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"inlined\": {"]
#[doc = "          \"description\": \"Inlined manifest\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"uri\": {"]
#[doc = "          \"description\": \"Location in a file fetched from a uri.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"description\": \"Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin.\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"maxLength\": 63,"]
#[doc = "      \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "    },"]
#[doc = "    \"openshift\": {"]
#[doc = "      \"description\": \"Allows importing into the devworkspace the OpenShift resources defined in a given manifest. For example this allows reusing the OpenShift definitions used to deploy some runtime components in production.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"required\": ["]
#[doc = "            \"uri\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"required\": ["]
#[doc = "            \"inlined\""]
#[doc = "          ]"]
#[doc = "        }"]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"deployByDefault\": {"]
#[doc = "          \"description\": \"Defines if the component should be deployed during startup.\\n\\nDefault value is `false`\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"endpoints\": {"]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"required\": ["]
#[doc = "              \"name\""]
#[doc = "            ],"]
#[doc = "            \"properties\": {"]
#[doc = "              \"annotation\": {"]
#[doc = "                \"description\": \"Annotations to be added to Kubernetes Ingress or Openshift Route\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"additionalProperties\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"attributes\": {"]
#[doc = "                \"description\": \"Map of implementation-dependant string-based free-form attributes.\\n\\nExamples of Che-specific attributes:\\n- cookiesAuthEnabled: \\\"true\\\" / \\\"false\\\",\\n- type: \\\"terminal\\\" / \\\"ide\\\" / \\\"ide-dev\\\",\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"additionalProperties\": true"]
#[doc = "              },"]
#[doc = "              \"exposure\": {"]
#[doc = "                \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "                \"type\": \"string\","]
#[doc = "                \"enum\": ["]
#[doc = "                  \"public\","]
#[doc = "                  \"internal\","]
#[doc = "                  \"none\""]
#[doc = "                ]"]
#[doc = "              },"]
#[doc = "              \"name\": {"]
#[doc = "                \"type\": \"string\","]
#[doc = "                \"maxLength\": 15,"]
#[doc = "                \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "              },"]
#[doc = "              \"path\": {"]
#[doc = "                \"description\": \"Path of the endpoint URL\","]
#[doc = "                \"type\": \"string\""]
#[doc = "              },"]
#[doc = "              \"protocol\": {"]
#[doc = "                \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "                \"type\": \"string\","]
#[doc = "                \"enum\": ["]
#[doc = "                  \"http\","]
#[doc = "                  \"https\","]
#[doc = "                  \"ws\","]
#[doc = "                  \"wss\","]
#[doc = "                  \"tcp\","]
#[doc = "                  \"udp\""]
#[doc = "                ]"]
#[doc = "              },"]
#[doc = "              \"secure\": {"]
#[doc = "                \"description\": \"Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.\","]
#[doc = "                \"type\": \"boolean\""]
#[doc = "              },"]
#[doc = "              \"targetPort\": {"]
#[doc = "                \"description\": \"Port number to be used within the container component. The same port cannot be used by two different container components.\","]
#[doc = "                \"type\": \"integer\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"additionalProperties\": false"]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"inlined\": {"]
#[doc = "          \"description\": \"Inlined manifest\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"uri\": {"]
#[doc = "          \"description\": \"Location in a file fetched from a uri.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"volume\": {"]
#[doc = "      \"description\": \"Allows specifying the definition of a volume shared by several other components\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"ephemeral\": {"]
#[doc = "          \"description\": \"Ephemeral volumes are not stored persistently across restarts. Defaults to false\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"size\": {"]
#[doc = "          \"description\": \"Size of the volume\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged, deny_unknown_fields)]
pub enum DevfileSchemaVersion222ParentVariant0ComponentsItem {
    Variant0 {
        #[doc = "Map of implementation-dependant free-form YAML attributes."]
        #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
        attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
        container: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0Container,
        #[doc = "Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin."]
        name: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0Name,
    },
    Variant1 {
        #[doc = "Map of implementation-dependant free-form YAML attributes."]
        #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
        attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
        kubernetes: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1Kubernetes,
        #[doc = "Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin."]
        name: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1Name,
    },
    Variant2 {
        #[doc = "Map of implementation-dependant free-form YAML attributes."]
        #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
        attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
        #[doc = "Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin."]
        name: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2Name,
        openshift: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2Openshift,
    },
    Variant3 {
        #[doc = "Map of implementation-dependant free-form YAML attributes."]
        #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
        attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
        #[doc = "Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin."]
        name: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant3Name,
        volume: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant3Volume,
    },
    Variant4 {
        #[doc = "Map of implementation-dependant free-form YAML attributes."]
        #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
        attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
        image: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4Image,
        #[doc = "Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin."]
        name: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4Name,
    },
}
impl ::std::convert::From<&Self> for DevfileSchemaVersion222ParentVariant0ComponentsItem {
    fn from(value: &DevfileSchemaVersion222ParentVariant0ComponentsItem) -> Self {
        value.clone()
    }
}
#[doc = "Allows adding and configuring devworkspace-related containers"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Allows adding and configuring devworkspace-related containers\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"annotation\": {"]
#[doc = "      \"description\": \"Annotations that should be added to specific resources for this container\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"deployment\": {"]
#[doc = "          \"description\": \"Annotations to be added to deployment\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"additionalProperties\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"service\": {"]
#[doc = "          \"description\": \"Annotations to be added to service\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"additionalProperties\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"args\": {"]
#[doc = "      \"description\": \"The arguments to supply to the command running the dockerimage component. The arguments are supplied either to the default command provided in the image or to the overridden command.\\n\\nDefaults to an empty array, meaning use whatever is defined in the image.\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"command\": {"]
#[doc = "      \"description\": \"The command to run in the dockerimage component instead of the default one provided in the image.\\n\\nDefaults to an empty array, meaning use whatever is defined in the image.\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"cpuLimit\": {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"cpuRequest\": {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"dedicatedPod\": {"]
#[doc = "      \"description\": \"Specify if a container should run in its own separated pod, instead of running as part of the main development environment pod.\\n\\nDefault value is `false`\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"endpoints\": {"]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"object\","]
#[doc = "        \"required\": ["]
#[doc = "          \"name\""]
#[doc = "        ],"]
#[doc = "        \"properties\": {"]
#[doc = "          \"annotation\": {"]
#[doc = "            \"description\": \"Annotations to be added to Kubernetes Ingress or Openshift Route\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"additionalProperties\": {"]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"attributes\": {"]
#[doc = "            \"description\": \"Map of implementation-dependant string-based free-form attributes.\\n\\nExamples of Che-specific attributes:\\n- cookiesAuthEnabled: \\\"true\\\" / \\\"false\\\",\\n- type: \\\"terminal\\\" / \\\"ide\\\" / \\\"ide-dev\\\",\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"additionalProperties\": true"]
#[doc = "          },"]
#[doc = "          \"exposure\": {"]
#[doc = "            \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "            \"type\": \"string\","]
#[doc = "            \"enum\": ["]
#[doc = "              \"public\","]
#[doc = "              \"internal\","]
#[doc = "              \"none\""]
#[doc = "            ]"]
#[doc = "          },"]
#[doc = "          \"name\": {"]
#[doc = "            \"type\": \"string\","]
#[doc = "            \"maxLength\": 15,"]
#[doc = "            \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "          },"]
#[doc = "          \"path\": {"]
#[doc = "            \"description\": \"Path of the endpoint URL\","]
#[doc = "            \"type\": \"string\""]
#[doc = "          },"]
#[doc = "          \"protocol\": {"]
#[doc = "            \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "            \"type\": \"string\","]
#[doc = "            \"enum\": ["]
#[doc = "              \"http\","]
#[doc = "              \"https\","]
#[doc = "              \"ws\","]
#[doc = "              \"wss\","]
#[doc = "              \"tcp\","]
#[doc = "              \"udp\""]
#[doc = "            ]"]
#[doc = "          },"]
#[doc = "          \"secure\": {"]
#[doc = "            \"description\": \"Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.\","]
#[doc = "            \"type\": \"boolean\""]
#[doc = "          },"]
#[doc = "          \"targetPort\": {"]
#[doc = "            \"description\": \"Port number to be used within the container component. The same port cannot be used by two different container components.\","]
#[doc = "            \"type\": \"integer\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"additionalProperties\": false"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"env\": {"]
#[doc = "      \"description\": \"Environment variables used in this container.\\n\\nThe following variables are reserved and cannot be overridden via env:\\n\\n - `$PROJECTS_ROOT`\\n\\n - `$PROJECT_SOURCE`\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"object\","]
#[doc = "        \"required\": ["]
#[doc = "          \"name\""]
#[doc = "        ],"]
#[doc = "        \"properties\": {"]
#[doc = "          \"name\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          },"]
#[doc = "          \"value\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"additionalProperties\": false"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"image\": {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"memoryLimit\": {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"memoryRequest\": {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"mountSources\": {"]
#[doc = "      \"description\": \"Toggles whether or not the project source code should be mounted in the component.\\n\\nDefaults to true for all component types except plugins and components that set `dedicatedPod` to true.\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"sourceMapping\": {"]
#[doc = "      \"description\": \"Optional specification of the path in the container where project sources should be transferred/mounted when `mountSources` is `true`. When omitted, the default value of /projects is used.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"volumeMounts\": {"]
#[doc = "      \"description\": \"List of volumes mounts that should be mounted is this container.\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"description\": \"Volume that should be mounted to a component container\","]
#[doc = "        \"type\": \"object\","]
#[doc = "        \"required\": ["]
#[doc = "          \"name\""]
#[doc = "        ],"]
#[doc = "        \"properties\": {"]
#[doc = "          \"name\": {"]
#[doc = "            \"description\": \"The volume mount name is the name of an existing `Volume` component. If several containers mount the same volume name then they will reuse the same volume and will be able to access to the same files.\","]
#[doc = "            \"type\": \"string\","]
#[doc = "            \"maxLength\": 63,"]
#[doc = "            \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "          },"]
#[doc = "          \"path\": {"]
#[doc = "            \"description\": \"The path in the component container where the volume should be mounted. If not path is mentioned, default path is the is `/<name>`.\","]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"additionalProperties\": false"]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0Container {
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub annotation: ::std::option::Option<
        DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerAnnotation,
    >,
    #[doc = "The arguments to supply to the command running the dockerimage component. The arguments are supplied either to the default command provided in the image or to the overridden command.\n\nDefaults to an empty array, meaning use whatever is defined in the image."]
    #[serde(default, skip_serializing_if = "::std::vec::Vec::is_empty")]
    pub args: ::std::vec::Vec<::std::string::String>,
    #[doc = "The command to run in the dockerimage component instead of the default one provided in the image.\n\nDefaults to an empty array, meaning use whatever is defined in the image."]
    #[serde(default, skip_serializing_if = "::std::vec::Vec::is_empty")]
    pub command: ::std::vec::Vec<::std::string::String>,
    #[serde(
        rename = "cpuLimit",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub cpu_limit: ::std::option::Option<::std::string::String>,
    #[serde(
        rename = "cpuRequest",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub cpu_request: ::std::option::Option<::std::string::String>,
    #[doc = "Specify if a container should run in its own separated pod, instead of running as part of the main development environment pod.\n\nDefault value is `false`"]
    #[serde(
        rename = "dedicatedPod",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub dedicated_pod: ::std::option::Option<bool>,
    #[serde(default, skip_serializing_if = "::std::vec::Vec::is_empty")]
    pub endpoints: ::std::vec::Vec<
        DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEndpointsItem,
    >,
    #[doc = "Environment variables used in this container.\n\nThe following variables are reserved and cannot be overridden via env:\n\n - `$PROJECTS_ROOT`\n\n - `$PROJECT_SOURCE`"]
    #[serde(default, skip_serializing_if = "::std::vec::Vec::is_empty")]
    pub env: ::std::vec::Vec<
        DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEnvItem,
    >,
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub image: ::std::option::Option<::std::string::String>,
    #[serde(
        rename = "memoryLimit",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub memory_limit: ::std::option::Option<::std::string::String>,
    #[serde(
        rename = "memoryRequest",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub memory_request: ::std::option::Option<::std::string::String>,
    #[doc = "Toggles whether or not the project source code should be mounted in the component.\n\nDefaults to true for all component types except plugins and components that set `dedicatedPod` to true."]
    #[serde(
        rename = "mountSources",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub mount_sources: ::std::option::Option<bool>,
    #[doc = "Optional specification of the path in the container where project sources should be transferred/mounted when `mountSources` is `true`. When omitted, the default value of /projects is used."]
    #[serde(
        rename = "sourceMapping",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub source_mapping: ::std::option::Option<::std::string::String>,
    #[doc = "List of volumes mounts that should be mounted is this container."]
    #[serde(
        rename = "volumeMounts",
        default,
        skip_serializing_if = "::std::vec::Vec::is_empty"
    )]
    pub volume_mounts: ::std::vec::Vec<
        DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerVolumeMountsItem,
    >,
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0Container>
    for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0Container
{
    fn from(value: &DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0Container) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0Container {
    pub fn builder() -> builder::DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0Container
    {
        Default::default()
    }
}
#[doc = "Annotations that should be added to specific resources for this container"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Annotations that should be added to specific resources for this container\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"deployment\": {"]
#[doc = "      \"description\": \"Annotations to be added to deployment\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"service\": {"]
#[doc = "      \"description\": \"Annotations to be added to service\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerAnnotation {
    #[doc = "Annotations to be added to deployment"]
    #[serde(
        default,
        skip_serializing_if = ":: std :: collections :: HashMap::is_empty"
    )]
    pub deployment: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    #[doc = "Annotations to be added to service"]
    #[serde(
        default,
        skip_serializing_if = ":: std :: collections :: HashMap::is_empty"
    )]
    pub service: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
}
impl
    ::std::convert::From<
        &DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerAnnotation,
    > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerAnnotation
{
    fn from(
        value: &DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerAnnotation,
    ) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerAnnotation {
    pub fn builder(
    ) -> builder::DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerAnnotation
    {
        Default::default()
    }
}
#[doc = "`DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEndpointsItem`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"name\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"annotation\": {"]
#[doc = "      \"description\": \"Annotations to be added to Kubernetes Ingress or Openshift Route\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"attributes\": {"]
#[doc = "      \"description\": \"Map of implementation-dependant string-based free-form attributes.\\n\\nExamples of Che-specific attributes:\\n- cookiesAuthEnabled: \\\"true\\\" / \\\"false\\\",\\n- type: \\\"terminal\\\" / \\\"ide\\\" / \\\"ide-dev\\\",\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": true"]
#[doc = "    },"]
#[doc = "    \"exposure\": {"]
#[doc = "      \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"public\","]
#[doc = "        \"internal\","]
#[doc = "        \"none\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"maxLength\": 15,"]
#[doc = "      \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "    },"]
#[doc = "    \"path\": {"]
#[doc = "      \"description\": \"Path of the endpoint URL\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"protocol\": {"]
#[doc = "      \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"http\","]
#[doc = "        \"https\","]
#[doc = "        \"ws\","]
#[doc = "        \"wss\","]
#[doc = "        \"tcp\","]
#[doc = "        \"udp\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"secure\": {"]
#[doc = "      \"description\": \"Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"targetPort\": {"]
#[doc = "      \"description\": \"Port number to be used within the container component. The same port cannot be used by two different container components.\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
pub struct DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEndpointsItem {
    #[doc = "Annotations to be added to Kubernetes Ingress or Openshift Route"]
    #[serde(
        default,
        skip_serializing_if = ":: std :: collections :: HashMap::is_empty"
    )]
    pub annotation: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    #[doc = "Map of implementation-dependant string-based free-form attributes.\n\nExamples of Che-specific attributes:\n- cookiesAuthEnabled: \"true\" / \"false\",\n- type: \"terminal\" / \"ide\" / \"ide-dev\","]
    #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
    pub attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
    #[doc = "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub exposure: ::std::option::Option<
        DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEndpointsItemExposure,
    >,
    pub name: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEndpointsItemName,
    #[doc = "Path of the endpoint URL"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub path: ::std::option::Option<::std::string::String>,
    #[doc = "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub protocol: ::std::option::Option<
        DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEndpointsItemProtocol,
    >,
    #[doc = "Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`."]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub secure: ::std::option::Option<bool>,
    #[doc = "Port number to be used within the container component. The same port cannot be used by two different container components."]
    #[serde(
        rename = "targetPort",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub target_port: ::std::option::Option<i64>,
}
impl
    ::std::convert::From<
        &DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEndpointsItem,
    > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEndpointsItem
{
    fn from(
        value: &DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEndpointsItem,
    ) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEndpointsItem {
    pub fn builder(
    ) -> builder::DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEndpointsItem
    {
        Default::default()
    }
}
#[doc = "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"public\","]
#[doc = "    \"internal\","]
#[doc = "    \"none\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEndpointsItemExposure {
    #[serde(rename = "public")]
    Public,
    #[serde(rename = "internal")]
    Internal,
    #[serde(rename = "none")]
    None,
}
impl ::std::convert::From<&Self>
    for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEndpointsItemExposure
{
    fn from(
        value : & DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEndpointsItemExposure,
    ) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display
    for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEndpointsItemExposure
{
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Public => f.write_str("public"),
            Self::Internal => f.write_str("internal"),
            Self::None => f.write_str("none"),
        }
    }
}
impl ::std::str::FromStr
    for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEndpointsItemExposure
{
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        match value {
            "public" => Ok(Self::Public),
            "internal" => Ok(Self::Internal),
            "none" => Ok(Self::None),
            _ => Err("invalid value".into()),
        }
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEndpointsItemExposure
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEndpointsItemExposure
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEndpointsItemExposure
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "`DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEndpointsItemName`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 15,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEndpointsItemName(
    ::std::string::String,
);
impl ::std::ops::Deref
    for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEndpointsItemName
{
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl
    ::std::convert::From<
        DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEndpointsItemName,
    > for ::std::string::String
{
    fn from(
        value : DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEndpointsItemName,
    ) -> Self {
        value.0
    }
}
impl
    ::std::convert::From<
        &DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEndpointsItemName,
    > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEndpointsItemName
{
    fn from(
        value : & DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEndpointsItemName,
    ) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr
    for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEndpointsItemName
{
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 15usize {
            return Err("longer than 15 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEndpointsItemName
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEndpointsItemName
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEndpointsItemName
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de>
    for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEndpointsItemName
{
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"http\","]
#[doc = "    \"https\","]
#[doc = "    \"ws\","]
#[doc = "    \"wss\","]
#[doc = "    \"tcp\","]
#[doc = "    \"udp\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEndpointsItemProtocol {
    #[serde(rename = "http")]
    Http,
    #[serde(rename = "https")]
    Https,
    #[serde(rename = "ws")]
    Ws,
    #[serde(rename = "wss")]
    Wss,
    #[serde(rename = "tcp")]
    Tcp,
    #[serde(rename = "udp")]
    Udp,
}
impl ::std::convert::From<&Self>
    for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEndpointsItemProtocol
{
    fn from(
        value : & DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEndpointsItemProtocol,
    ) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display
    for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEndpointsItemProtocol
{
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Http => f.write_str("http"),
            Self::Https => f.write_str("https"),
            Self::Ws => f.write_str("ws"),
            Self::Wss => f.write_str("wss"),
            Self::Tcp => f.write_str("tcp"),
            Self::Udp => f.write_str("udp"),
        }
    }
}
impl ::std::str::FromStr
    for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEndpointsItemProtocol
{
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        match value {
            "http" => Ok(Self::Http),
            "https" => Ok(Self::Https),
            "ws" => Ok(Self::Ws),
            "wss" => Ok(Self::Wss),
            "tcp" => Ok(Self::Tcp),
            "udp" => Ok(Self::Udp),
            _ => Err("invalid value".into()),
        }
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEndpointsItemProtocol
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEndpointsItemProtocol
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEndpointsItemProtocol
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "`DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEnvItem`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"name\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"name\": {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"value\": {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
pub struct DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEnvItem {
    pub name: ::std::string::String,
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub value: ::std::option::Option<::std::string::String>,
}
impl
    ::std::convert::From<
        &DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEnvItem,
    > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEnvItem
{
    fn from(
        value: &DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEnvItem,
    ) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEnvItem {
    pub fn builder(
    ) -> builder::DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEnvItem {
        Default::default()
    }
}
#[doc = "Volume that should be mounted to a component container"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Volume that should be mounted to a component container\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"name\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"name\": {"]
#[doc = "      \"description\": \"The volume mount name is the name of an existing `Volume` component. If several containers mount the same volume name then they will reuse the same volume and will be able to access to the same files.\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"maxLength\": 63,"]
#[doc = "      \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "    },"]
#[doc = "    \"path\": {"]
#[doc = "      \"description\": \"The path in the component container where the volume should be mounted. If not path is mentioned, default path is the is `/<name>`.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
pub struct DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerVolumeMountsItem {
    #[doc = "The volume mount name is the name of an existing `Volume` component. If several containers mount the same volume name then they will reuse the same volume and will be able to access to the same files."]
    pub name:
        DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerVolumeMountsItemName,
    #[doc = "The path in the component container where the volume should be mounted. If not path is mentioned, default path is the is `/<name>`."]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub path: ::std::option::Option<::std::string::String>,
}
impl
    ::std::convert::From<
        &DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerVolumeMountsItem,
    > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerVolumeMountsItem
{
    fn from(
        value : & DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerVolumeMountsItem,
    ) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerVolumeMountsItem {
    pub fn builder(
    ) -> builder::DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerVolumeMountsItem
    {
        Default::default()
    }
}
#[doc = "The volume mount name is the name of an existing `Volume` component. If several containers mount the same volume name then they will reuse the same volume and will be able to access to the same files."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"The volume mount name is the name of an existing `Volume` component. If several containers mount the same volume name then they will reuse the same volume and will be able to access to the same files.\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerVolumeMountsItemName(
    ::std::string::String,
);
impl ::std::ops::Deref
    for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerVolumeMountsItemName
{
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl
    ::std::convert::From<
        DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerVolumeMountsItemName,
    > for ::std::string::String
{
    fn from(
        value : DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerVolumeMountsItemName,
    ) -> Self {
        value.0
    }
}
impl
    ::std::convert::From<
        &DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerVolumeMountsItemName,
    > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerVolumeMountsItemName
{
    fn from(
        value : & DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerVolumeMountsItemName,
    ) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr
    for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerVolumeMountsItemName
{
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerVolumeMountsItemName
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerVolumeMountsItemName
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerVolumeMountsItemName
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de>
    for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerVolumeMountsItemName
{
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin.\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0Name(::std::string::String);
impl ::std::ops::Deref for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0Name {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0Name>
    for ::std::string::String
{
    fn from(value: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0Name) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0Name>
    for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0Name
{
    fn from(value: &DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0Name) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0Name {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0Name
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de>
    for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0Name
{
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Allows importing into the devworkspace the Kubernetes resources defined in a given manifest. For example this allows reusing the Kubernetes definitions used to deploy some runtime components in production."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Allows importing into the devworkspace the Kubernetes resources defined in a given manifest. For example this allows reusing the Kubernetes definitions used to deploy some runtime components in production.\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"uri\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"inlined\""]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"deployByDefault\": {"]
#[doc = "      \"description\": \"Defines if the component should be deployed during startup.\\n\\nDefault value is `false`\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"endpoints\": {"]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"object\","]
#[doc = "        \"required\": ["]
#[doc = "          \"name\""]
#[doc = "        ],"]
#[doc = "        \"properties\": {"]
#[doc = "          \"annotation\": {"]
#[doc = "            \"description\": \"Annotations to be added to Kubernetes Ingress or Openshift Route\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"additionalProperties\": {"]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"attributes\": {"]
#[doc = "            \"description\": \"Map of implementation-dependant string-based free-form attributes.\\n\\nExamples of Che-specific attributes:\\n- cookiesAuthEnabled: \\\"true\\\" / \\\"false\\\",\\n- type: \\\"terminal\\\" / \\\"ide\\\" / \\\"ide-dev\\\",\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"additionalProperties\": true"]
#[doc = "          },"]
#[doc = "          \"exposure\": {"]
#[doc = "            \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "            \"type\": \"string\","]
#[doc = "            \"enum\": ["]
#[doc = "              \"public\","]
#[doc = "              \"internal\","]
#[doc = "              \"none\""]
#[doc = "            ]"]
#[doc = "          },"]
#[doc = "          \"name\": {"]
#[doc = "            \"type\": \"string\","]
#[doc = "            \"maxLength\": 15,"]
#[doc = "            \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "          },"]
#[doc = "          \"path\": {"]
#[doc = "            \"description\": \"Path of the endpoint URL\","]
#[doc = "            \"type\": \"string\""]
#[doc = "          },"]
#[doc = "          \"protocol\": {"]
#[doc = "            \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "            \"type\": \"string\","]
#[doc = "            \"enum\": ["]
#[doc = "              \"http\","]
#[doc = "              \"https\","]
#[doc = "              \"ws\","]
#[doc = "              \"wss\","]
#[doc = "              \"tcp\","]
#[doc = "              \"udp\""]
#[doc = "            ]"]
#[doc = "          },"]
#[doc = "          \"secure\": {"]
#[doc = "            \"description\": \"Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.\","]
#[doc = "            \"type\": \"boolean\""]
#[doc = "          },"]
#[doc = "          \"targetPort\": {"]
#[doc = "            \"description\": \"Port number to be used within the container component. The same port cannot be used by two different container components.\","]
#[doc = "            \"type\": \"integer\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"additionalProperties\": false"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"inlined\": {"]
#[doc = "      \"description\": \"Inlined manifest\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"uri\": {"]
#[doc = "      \"description\": \"Location in a file fetched from a uri.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged, deny_unknown_fields)]
pub enum DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1Kubernetes {
    Variant0 { # [doc = "Defines if the component should be deployed during startup.\n\nDefault value is `false`"] # [serde (rename = "deployByDefault" , default , skip_serializing_if = "::std::option::Option::is_none")] deploy_by_default : :: std :: option :: Option < bool > , # [serde (default , skip_serializing_if = "::std::vec::Vec::is_empty")] endpoints : :: std :: vec :: Vec < DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant0EndpointsItem > , # [doc = "Location in a file fetched from a uri."] uri : :: std :: string :: String , } , Variant1 { # [doc = "Defines if the component should be deployed during startup.\n\nDefault value is `false`"] # [serde (rename = "deployByDefault" , default , skip_serializing_if = "::std::option::Option::is_none")] deploy_by_default : :: std :: option :: Option < bool > , # [serde (default , skip_serializing_if = "::std::vec::Vec::is_empty")] endpoints : :: std :: vec :: Vec < DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant1EndpointsItem > , # [doc = "Inlined manifest"] inlined : :: std :: string :: String , } , }
impl ::std::convert::From<&Self>
    for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1Kubernetes
{
    fn from(value: &DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1Kubernetes) -> Self {
        value.clone()
    }
}
#[doc = "`DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant0EndpointsItem`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"name\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"annotation\": {"]
#[doc = "      \"description\": \"Annotations to be added to Kubernetes Ingress or Openshift Route\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"attributes\": {"]
#[doc = "      \"description\": \"Map of implementation-dependant string-based free-form attributes.\\n\\nExamples of Che-specific attributes:\\n- cookiesAuthEnabled: \\\"true\\\" / \\\"false\\\",\\n- type: \\\"terminal\\\" / \\\"ide\\\" / \\\"ide-dev\\\",\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": true"]
#[doc = "    },"]
#[doc = "    \"exposure\": {"]
#[doc = "      \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"public\","]
#[doc = "        \"internal\","]
#[doc = "        \"none\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"maxLength\": 15,"]
#[doc = "      \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "    },"]
#[doc = "    \"path\": {"]
#[doc = "      \"description\": \"Path of the endpoint URL\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"protocol\": {"]
#[doc = "      \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"http\","]
#[doc = "        \"https\","]
#[doc = "        \"ws\","]
#[doc = "        \"wss\","]
#[doc = "        \"tcp\","]
#[doc = "        \"udp\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"secure\": {"]
#[doc = "      \"description\": \"Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"targetPort\": {"]
#[doc = "      \"description\": \"Port number to be used within the container component. The same port cannot be used by two different container components.\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
pub struct DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant0EndpointsItem { # [doc = "Annotations to be added to Kubernetes Ingress or Openshift Route"] # [serde (default , skip_serializing_if = ":: std :: collections :: HashMap::is_empty")] pub annotation : :: std :: collections :: HashMap < :: std :: string :: String , :: std :: string :: String > , # [doc = "Map of implementation-dependant string-based free-form attributes.\n\nExamples of Che-specific attributes:\n- cookiesAuthEnabled: \"true\" / \"false\",\n- type: \"terminal\" / \"ide\" / \"ide-dev\","] # [serde (default , skip_serializing_if = "::serde_json::Map::is_empty")] pub attributes : :: serde_json :: Map < :: std :: string :: String , :: serde_json :: Value > , # [doc = "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`"] # [serde (default , skip_serializing_if = "::std::option::Option::is_none")] pub exposure : :: std :: option :: Option < DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant0EndpointsItemExposure > , pub name : DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant0EndpointsItemName , # [doc = "Path of the endpoint URL"] # [serde (default , skip_serializing_if = "::std::option::Option::is_none")] pub path : :: std :: option :: Option < :: std :: string :: String > , # [doc = "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`"] # [serde (default , skip_serializing_if = "::std::option::Option::is_none")] pub protocol : :: std :: option :: Option < DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant0EndpointsItemProtocol > , # [doc = "Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`."] # [serde (default , skip_serializing_if = "::std::option::Option::is_none")] pub secure : :: std :: option :: Option < bool > , # [doc = "Port number to be used within the container component. The same port cannot be used by two different container components."] # [serde (rename = "targetPort" , default , skip_serializing_if = "::std::option::Option::is_none")] pub target_port : :: std :: option :: Option < i64 > , }
impl
    ::std::convert::From<
        &DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant0EndpointsItem,
    >
    for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant0EndpointsItem
{
    fn from(
        value : & DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant0EndpointsItem,
    ) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant0EndpointsItem {
    pub fn builder () -> builder :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant0EndpointsItem{
        Default::default()
    }
}
#[doc = "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"public\","]
#[doc = "    \"internal\","]
#[doc = "    \"none\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant0EndpointsItemExposure
{
    #[serde(rename = "public")]
    Public,
    #[serde(rename = "internal")]
    Internal,
    #[serde(rename = "none")]
    None,
}
impl :: std :: convert :: From < & Self > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant0EndpointsItemExposure { fn from (value : & DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant0EndpointsItemExposure) -> Self { value . clone () } }
impl :: std :: fmt :: Display for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant0EndpointsItemExposure { fn fmt (& self , f : & mut :: std :: fmt :: Formatter < '_ >) -> :: std :: fmt :: Result { match * self { Self :: Public => f . write_str ("public") , Self :: Internal => f . write_str ("internal") , Self :: None => f . write_str ("none") , } } }
impl :: std :: str :: FromStr for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant0EndpointsItemExposure { type Err = self :: error :: ConversionError ; fn from_str (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { match value { "public" => Ok (Self :: Public) , "internal" => Ok (Self :: Internal) , "none" => Ok (Self :: None) , _ => Err ("invalid value" . into ()) , } } }
impl :: std :: convert :: TryFrom < & str > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant0EndpointsItemExposure { type Error = self :: error :: ConversionError ; fn try_from (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < & :: std :: string :: String > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant0EndpointsItemExposure { type Error = self :: error :: ConversionError ; fn try_from (value : & :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < :: std :: string :: String > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant0EndpointsItemExposure { type Error = self :: error :: ConversionError ; fn try_from (value : :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
#[doc = "`DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant0EndpointsItemName`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 15,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant0EndpointsItemName(
    ::std::string::String,
);
impl :: std :: ops :: Deref for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant0EndpointsItemName { type Target = :: std :: string :: String ; fn deref (& self) -> & :: std :: string :: String { & self . 0 } }
impl :: std :: convert :: From < DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant0EndpointsItemName > for :: std :: string :: String { fn from (value : DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant0EndpointsItemName) -> Self { value . 0 } }
impl :: std :: convert :: From < & DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant0EndpointsItemName > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant0EndpointsItemName { fn from (value : & DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant0EndpointsItemName) -> Self { value . clone () } }
impl :: std :: str :: FromStr for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant0EndpointsItemName { type Err = self :: error :: ConversionError ; fn from_str (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { if value . chars () . count () > 15usize { return Err ("longer than 15 characters" . into ()) ; } static PATTERN : :: std :: sync :: LazyLock < :: regress :: Regex > = :: std :: sync :: LazyLock :: new (|| { :: regress :: Regex :: new ("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") . unwrap () }) ; if PATTERN . find (value) . is_none () { return Err ("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"" . into ()) ; } Ok (Self (value . to_string ())) } }
impl :: std :: convert :: TryFrom < & str > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant0EndpointsItemName { type Error = self :: error :: ConversionError ; fn try_from (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < & :: std :: string :: String > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant0EndpointsItemName { type Error = self :: error :: ConversionError ; fn try_from (value : & :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < :: std :: string :: String > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant0EndpointsItemName { type Error = self :: error :: ConversionError ; fn try_from (value : :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl < 'de > :: serde :: Deserialize < 'de > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant0EndpointsItemName { fn deserialize < D > (deserializer : D ,) -> :: std :: result :: Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { :: std :: string :: String :: deserialize (deserializer) ? . parse () . map_err (| e : self :: error :: ConversionError | { < D :: Error as :: serde :: de :: Error > :: custom (e . to_string () ,) }) } }
#[doc = "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"http\","]
#[doc = "    \"https\","]
#[doc = "    \"ws\","]
#[doc = "    \"wss\","]
#[doc = "    \"tcp\","]
#[doc = "    \"udp\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant0EndpointsItemProtocol
{
    #[serde(rename = "http")]
    Http,
    #[serde(rename = "https")]
    Https,
    #[serde(rename = "ws")]
    Ws,
    #[serde(rename = "wss")]
    Wss,
    #[serde(rename = "tcp")]
    Tcp,
    #[serde(rename = "udp")]
    Udp,
}
impl :: std :: convert :: From < & Self > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant0EndpointsItemProtocol { fn from (value : & DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant0EndpointsItemProtocol) -> Self { value . clone () } }
impl :: std :: fmt :: Display for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant0EndpointsItemProtocol { fn fmt (& self , f : & mut :: std :: fmt :: Formatter < '_ >) -> :: std :: fmt :: Result { match * self { Self :: Http => f . write_str ("http") , Self :: Https => f . write_str ("https") , Self :: Ws => f . write_str ("ws") , Self :: Wss => f . write_str ("wss") , Self :: Tcp => f . write_str ("tcp") , Self :: Udp => f . write_str ("udp") , } } }
impl :: std :: str :: FromStr for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant0EndpointsItemProtocol { type Err = self :: error :: ConversionError ; fn from_str (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { match value { "http" => Ok (Self :: Http) , "https" => Ok (Self :: Https) , "ws" => Ok (Self :: Ws) , "wss" => Ok (Self :: Wss) , "tcp" => Ok (Self :: Tcp) , "udp" => Ok (Self :: Udp) , _ => Err ("invalid value" . into ()) , } } }
impl :: std :: convert :: TryFrom < & str > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant0EndpointsItemProtocol { type Error = self :: error :: ConversionError ; fn try_from (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < & :: std :: string :: String > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant0EndpointsItemProtocol { type Error = self :: error :: ConversionError ; fn try_from (value : & :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < :: std :: string :: String > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant0EndpointsItemProtocol { type Error = self :: error :: ConversionError ; fn try_from (value : :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
#[doc = "`DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant1EndpointsItem`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"name\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"annotation\": {"]
#[doc = "      \"description\": \"Annotations to be added to Kubernetes Ingress or Openshift Route\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"attributes\": {"]
#[doc = "      \"description\": \"Map of implementation-dependant string-based free-form attributes.\\n\\nExamples of Che-specific attributes:\\n- cookiesAuthEnabled: \\\"true\\\" / \\\"false\\\",\\n- type: \\\"terminal\\\" / \\\"ide\\\" / \\\"ide-dev\\\",\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": true"]
#[doc = "    },"]
#[doc = "    \"exposure\": {"]
#[doc = "      \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"public\","]
#[doc = "        \"internal\","]
#[doc = "        \"none\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"maxLength\": 15,"]
#[doc = "      \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "    },"]
#[doc = "    \"path\": {"]
#[doc = "      \"description\": \"Path of the endpoint URL\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"protocol\": {"]
#[doc = "      \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"http\","]
#[doc = "        \"https\","]
#[doc = "        \"ws\","]
#[doc = "        \"wss\","]
#[doc = "        \"tcp\","]
#[doc = "        \"udp\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"secure\": {"]
#[doc = "      \"description\": \"Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"targetPort\": {"]
#[doc = "      \"description\": \"Port number to be used within the container component. The same port cannot be used by two different container components.\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
pub struct DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant1EndpointsItem { # [doc = "Annotations to be added to Kubernetes Ingress or Openshift Route"] # [serde (default , skip_serializing_if = ":: std :: collections :: HashMap::is_empty")] pub annotation : :: std :: collections :: HashMap < :: std :: string :: String , :: std :: string :: String > , # [doc = "Map of implementation-dependant string-based free-form attributes.\n\nExamples of Che-specific attributes:\n- cookiesAuthEnabled: \"true\" / \"false\",\n- type: \"terminal\" / \"ide\" / \"ide-dev\","] # [serde (default , skip_serializing_if = "::serde_json::Map::is_empty")] pub attributes : :: serde_json :: Map < :: std :: string :: String , :: serde_json :: Value > , # [doc = "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`"] # [serde (default , skip_serializing_if = "::std::option::Option::is_none")] pub exposure : :: std :: option :: Option < DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant1EndpointsItemExposure > , pub name : DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant1EndpointsItemName , # [doc = "Path of the endpoint URL"] # [serde (default , skip_serializing_if = "::std::option::Option::is_none")] pub path : :: std :: option :: Option < :: std :: string :: String > , # [doc = "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`"] # [serde (default , skip_serializing_if = "::std::option::Option::is_none")] pub protocol : :: std :: option :: Option < DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant1EndpointsItemProtocol > , # [doc = "Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`."] # [serde (default , skip_serializing_if = "::std::option::Option::is_none")] pub secure : :: std :: option :: Option < bool > , # [doc = "Port number to be used within the container component. The same port cannot be used by two different container components."] # [serde (rename = "targetPort" , default , skip_serializing_if = "::std::option::Option::is_none")] pub target_port : :: std :: option :: Option < i64 > , }
impl
    ::std::convert::From<
        &DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant1EndpointsItem,
    >
    for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant1EndpointsItem
{
    fn from(
        value : & DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant1EndpointsItem,
    ) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant1EndpointsItem {
    pub fn builder () -> builder :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant1EndpointsItem{
        Default::default()
    }
}
#[doc = "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"public\","]
#[doc = "    \"internal\","]
#[doc = "    \"none\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant1EndpointsItemExposure
{
    #[serde(rename = "public")]
    Public,
    #[serde(rename = "internal")]
    Internal,
    #[serde(rename = "none")]
    None,
}
impl :: std :: convert :: From < & Self > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant1EndpointsItemExposure { fn from (value : & DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant1EndpointsItemExposure) -> Self { value . clone () } }
impl :: std :: fmt :: Display for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant1EndpointsItemExposure { fn fmt (& self , f : & mut :: std :: fmt :: Formatter < '_ >) -> :: std :: fmt :: Result { match * self { Self :: Public => f . write_str ("public") , Self :: Internal => f . write_str ("internal") , Self :: None => f . write_str ("none") , } } }
impl :: std :: str :: FromStr for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant1EndpointsItemExposure { type Err = self :: error :: ConversionError ; fn from_str (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { match value { "public" => Ok (Self :: Public) , "internal" => Ok (Self :: Internal) , "none" => Ok (Self :: None) , _ => Err ("invalid value" . into ()) , } } }
impl :: std :: convert :: TryFrom < & str > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant1EndpointsItemExposure { type Error = self :: error :: ConversionError ; fn try_from (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < & :: std :: string :: String > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant1EndpointsItemExposure { type Error = self :: error :: ConversionError ; fn try_from (value : & :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < :: std :: string :: String > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant1EndpointsItemExposure { type Error = self :: error :: ConversionError ; fn try_from (value : :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
#[doc = "`DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant1EndpointsItemName`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 15,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant1EndpointsItemName(
    ::std::string::String,
);
impl :: std :: ops :: Deref for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant1EndpointsItemName { type Target = :: std :: string :: String ; fn deref (& self) -> & :: std :: string :: String { & self . 0 } }
impl :: std :: convert :: From < DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant1EndpointsItemName > for :: std :: string :: String { fn from (value : DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant1EndpointsItemName) -> Self { value . 0 } }
impl :: std :: convert :: From < & DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant1EndpointsItemName > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant1EndpointsItemName { fn from (value : & DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant1EndpointsItemName) -> Self { value . clone () } }
impl :: std :: str :: FromStr for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant1EndpointsItemName { type Err = self :: error :: ConversionError ; fn from_str (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { if value . chars () . count () > 15usize { return Err ("longer than 15 characters" . into ()) ; } static PATTERN : :: std :: sync :: LazyLock < :: regress :: Regex > = :: std :: sync :: LazyLock :: new (|| { :: regress :: Regex :: new ("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") . unwrap () }) ; if PATTERN . find (value) . is_none () { return Err ("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"" . into ()) ; } Ok (Self (value . to_string ())) } }
impl :: std :: convert :: TryFrom < & str > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant1EndpointsItemName { type Error = self :: error :: ConversionError ; fn try_from (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < & :: std :: string :: String > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant1EndpointsItemName { type Error = self :: error :: ConversionError ; fn try_from (value : & :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < :: std :: string :: String > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant1EndpointsItemName { type Error = self :: error :: ConversionError ; fn try_from (value : :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl < 'de > :: serde :: Deserialize < 'de > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant1EndpointsItemName { fn deserialize < D > (deserializer : D ,) -> :: std :: result :: Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { :: std :: string :: String :: deserialize (deserializer) ? . parse () . map_err (| e : self :: error :: ConversionError | { < D :: Error as :: serde :: de :: Error > :: custom (e . to_string () ,) }) } }
#[doc = "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"http\","]
#[doc = "    \"https\","]
#[doc = "    \"ws\","]
#[doc = "    \"wss\","]
#[doc = "    \"tcp\","]
#[doc = "    \"udp\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant1EndpointsItemProtocol
{
    #[serde(rename = "http")]
    Http,
    #[serde(rename = "https")]
    Https,
    #[serde(rename = "ws")]
    Ws,
    #[serde(rename = "wss")]
    Wss,
    #[serde(rename = "tcp")]
    Tcp,
    #[serde(rename = "udp")]
    Udp,
}
impl :: std :: convert :: From < & Self > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant1EndpointsItemProtocol { fn from (value : & DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant1EndpointsItemProtocol) -> Self { value . clone () } }
impl :: std :: fmt :: Display for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant1EndpointsItemProtocol { fn fmt (& self , f : & mut :: std :: fmt :: Formatter < '_ >) -> :: std :: fmt :: Result { match * self { Self :: Http => f . write_str ("http") , Self :: Https => f . write_str ("https") , Self :: Ws => f . write_str ("ws") , Self :: Wss => f . write_str ("wss") , Self :: Tcp => f . write_str ("tcp") , Self :: Udp => f . write_str ("udp") , } } }
impl :: std :: str :: FromStr for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant1EndpointsItemProtocol { type Err = self :: error :: ConversionError ; fn from_str (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { match value { "http" => Ok (Self :: Http) , "https" => Ok (Self :: Https) , "ws" => Ok (Self :: Ws) , "wss" => Ok (Self :: Wss) , "tcp" => Ok (Self :: Tcp) , "udp" => Ok (Self :: Udp) , _ => Err ("invalid value" . into ()) , } } }
impl :: std :: convert :: TryFrom < & str > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant1EndpointsItemProtocol { type Error = self :: error :: ConversionError ; fn try_from (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < & :: std :: string :: String > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant1EndpointsItemProtocol { type Error = self :: error :: ConversionError ; fn try_from (value : & :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < :: std :: string :: String > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant1EndpointsItemProtocol { type Error = self :: error :: ConversionError ; fn try_from (value : :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
#[doc = "Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin.\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1Name(::std::string::String);
impl ::std::ops::Deref for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1Name {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1Name>
    for ::std::string::String
{
    fn from(value: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1Name) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1Name>
    for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1Name
{
    fn from(value: &DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1Name) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1Name {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1Name
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de>
    for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1Name
{
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin.\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2Name(::std::string::String);
impl ::std::ops::Deref for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2Name {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2Name>
    for ::std::string::String
{
    fn from(value: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2Name) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2Name>
    for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2Name
{
    fn from(value: &DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2Name) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2Name {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2Name
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de>
    for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2Name
{
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Allows importing into the devworkspace the OpenShift resources defined in a given manifest. For example this allows reusing the OpenShift definitions used to deploy some runtime components in production."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Allows importing into the devworkspace the OpenShift resources defined in a given manifest. For example this allows reusing the OpenShift definitions used to deploy some runtime components in production.\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"uri\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"inlined\""]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"deployByDefault\": {"]
#[doc = "      \"description\": \"Defines if the component should be deployed during startup.\\n\\nDefault value is `false`\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"endpoints\": {"]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"object\","]
#[doc = "        \"required\": ["]
#[doc = "          \"name\""]
#[doc = "        ],"]
#[doc = "        \"properties\": {"]
#[doc = "          \"annotation\": {"]
#[doc = "            \"description\": \"Annotations to be added to Kubernetes Ingress or Openshift Route\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"additionalProperties\": {"]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"attributes\": {"]
#[doc = "            \"description\": \"Map of implementation-dependant string-based free-form attributes.\\n\\nExamples of Che-specific attributes:\\n- cookiesAuthEnabled: \\\"true\\\" / \\\"false\\\",\\n- type: \\\"terminal\\\" / \\\"ide\\\" / \\\"ide-dev\\\",\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"additionalProperties\": true"]
#[doc = "          },"]
#[doc = "          \"exposure\": {"]
#[doc = "            \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "            \"type\": \"string\","]
#[doc = "            \"enum\": ["]
#[doc = "              \"public\","]
#[doc = "              \"internal\","]
#[doc = "              \"none\""]
#[doc = "            ]"]
#[doc = "          },"]
#[doc = "          \"name\": {"]
#[doc = "            \"type\": \"string\","]
#[doc = "            \"maxLength\": 15,"]
#[doc = "            \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "          },"]
#[doc = "          \"path\": {"]
#[doc = "            \"description\": \"Path of the endpoint URL\","]
#[doc = "            \"type\": \"string\""]
#[doc = "          },"]
#[doc = "          \"protocol\": {"]
#[doc = "            \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "            \"type\": \"string\","]
#[doc = "            \"enum\": ["]
#[doc = "              \"http\","]
#[doc = "              \"https\","]
#[doc = "              \"ws\","]
#[doc = "              \"wss\","]
#[doc = "              \"tcp\","]
#[doc = "              \"udp\""]
#[doc = "            ]"]
#[doc = "          },"]
#[doc = "          \"secure\": {"]
#[doc = "            \"description\": \"Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.\","]
#[doc = "            \"type\": \"boolean\""]
#[doc = "          },"]
#[doc = "          \"targetPort\": {"]
#[doc = "            \"description\": \"Port number to be used within the container component. The same port cannot be used by two different container components.\","]
#[doc = "            \"type\": \"integer\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"additionalProperties\": false"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"inlined\": {"]
#[doc = "      \"description\": \"Inlined manifest\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"uri\": {"]
#[doc = "      \"description\": \"Location in a file fetched from a uri.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged, deny_unknown_fields)]
pub enum DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2Openshift {
    Variant0 { # [doc = "Defines if the component should be deployed during startup.\n\nDefault value is `false`"] # [serde (rename = "deployByDefault" , default , skip_serializing_if = "::std::option::Option::is_none")] deploy_by_default : :: std :: option :: Option < bool > , # [serde (default , skip_serializing_if = "::std::vec::Vec::is_empty")] endpoints : :: std :: vec :: Vec < DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant0EndpointsItem > , # [doc = "Location in a file fetched from a uri."] uri : :: std :: string :: String , } , Variant1 { # [doc = "Defines if the component should be deployed during startup.\n\nDefault value is `false`"] # [serde (rename = "deployByDefault" , default , skip_serializing_if = "::std::option::Option::is_none")] deploy_by_default : :: std :: option :: Option < bool > , # [serde (default , skip_serializing_if = "::std::vec::Vec::is_empty")] endpoints : :: std :: vec :: Vec < DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant1EndpointsItem > , # [doc = "Inlined manifest"] inlined : :: std :: string :: String , } , }
impl ::std::convert::From<&Self>
    for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2Openshift
{
    fn from(value: &DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2Openshift) -> Self {
        value.clone()
    }
}
#[doc = "`DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant0EndpointsItem`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"name\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"annotation\": {"]
#[doc = "      \"description\": \"Annotations to be added to Kubernetes Ingress or Openshift Route\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"attributes\": {"]
#[doc = "      \"description\": \"Map of implementation-dependant string-based free-form attributes.\\n\\nExamples of Che-specific attributes:\\n- cookiesAuthEnabled: \\\"true\\\" / \\\"false\\\",\\n- type: \\\"terminal\\\" / \\\"ide\\\" / \\\"ide-dev\\\",\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": true"]
#[doc = "    },"]
#[doc = "    \"exposure\": {"]
#[doc = "      \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"public\","]
#[doc = "        \"internal\","]
#[doc = "        \"none\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"maxLength\": 15,"]
#[doc = "      \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "    },"]
#[doc = "    \"path\": {"]
#[doc = "      \"description\": \"Path of the endpoint URL\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"protocol\": {"]
#[doc = "      \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"http\","]
#[doc = "        \"https\","]
#[doc = "        \"ws\","]
#[doc = "        \"wss\","]
#[doc = "        \"tcp\","]
#[doc = "        \"udp\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"secure\": {"]
#[doc = "      \"description\": \"Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"targetPort\": {"]
#[doc = "      \"description\": \"Port number to be used within the container component. The same port cannot be used by two different container components.\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
pub struct DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant0EndpointsItem { # [doc = "Annotations to be added to Kubernetes Ingress or Openshift Route"] # [serde (default , skip_serializing_if = ":: std :: collections :: HashMap::is_empty")] pub annotation : :: std :: collections :: HashMap < :: std :: string :: String , :: std :: string :: String > , # [doc = "Map of implementation-dependant string-based free-form attributes.\n\nExamples of Che-specific attributes:\n- cookiesAuthEnabled: \"true\" / \"false\",\n- type: \"terminal\" / \"ide\" / \"ide-dev\","] # [serde (default , skip_serializing_if = "::serde_json::Map::is_empty")] pub attributes : :: serde_json :: Map < :: std :: string :: String , :: serde_json :: Value > , # [doc = "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`"] # [serde (default , skip_serializing_if = "::std::option::Option::is_none")] pub exposure : :: std :: option :: Option < DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant0EndpointsItemExposure > , pub name : DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant0EndpointsItemName , # [doc = "Path of the endpoint URL"] # [serde (default , skip_serializing_if = "::std::option::Option::is_none")] pub path : :: std :: option :: Option < :: std :: string :: String > , # [doc = "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`"] # [serde (default , skip_serializing_if = "::std::option::Option::is_none")] pub protocol : :: std :: option :: Option < DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant0EndpointsItemProtocol > , # [doc = "Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`."] # [serde (default , skip_serializing_if = "::std::option::Option::is_none")] pub secure : :: std :: option :: Option < bool > , # [doc = "Port number to be used within the container component. The same port cannot be used by two different container components."] # [serde (rename = "targetPort" , default , skip_serializing_if = "::std::option::Option::is_none")] pub target_port : :: std :: option :: Option < i64 > , }
impl
    ::std::convert::From<
        &DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant0EndpointsItem,
    >
    for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant0EndpointsItem
{
    fn from(
        value : & DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant0EndpointsItem,
    ) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant0EndpointsItem {
    pub fn builder () -> builder :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant0EndpointsItem{
        Default::default()
    }
}
#[doc = "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"public\","]
#[doc = "    \"internal\","]
#[doc = "    \"none\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant0EndpointsItemExposure
{
    #[serde(rename = "public")]
    Public,
    #[serde(rename = "internal")]
    Internal,
    #[serde(rename = "none")]
    None,
}
impl :: std :: convert :: From < & Self > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant0EndpointsItemExposure { fn from (value : & DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant0EndpointsItemExposure) -> Self { value . clone () } }
impl :: std :: fmt :: Display for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant0EndpointsItemExposure { fn fmt (& self , f : & mut :: std :: fmt :: Formatter < '_ >) -> :: std :: fmt :: Result { match * self { Self :: Public => f . write_str ("public") , Self :: Internal => f . write_str ("internal") , Self :: None => f . write_str ("none") , } } }
impl :: std :: str :: FromStr for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant0EndpointsItemExposure { type Err = self :: error :: ConversionError ; fn from_str (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { match value { "public" => Ok (Self :: Public) , "internal" => Ok (Self :: Internal) , "none" => Ok (Self :: None) , _ => Err ("invalid value" . into ()) , } } }
impl :: std :: convert :: TryFrom < & str > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant0EndpointsItemExposure { type Error = self :: error :: ConversionError ; fn try_from (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < & :: std :: string :: String > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant0EndpointsItemExposure { type Error = self :: error :: ConversionError ; fn try_from (value : & :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < :: std :: string :: String > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant0EndpointsItemExposure { type Error = self :: error :: ConversionError ; fn try_from (value : :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
#[doc = "`DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant0EndpointsItemName`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 15,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant0EndpointsItemName(
    ::std::string::String,
);
impl :: std :: ops :: Deref for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant0EndpointsItemName { type Target = :: std :: string :: String ; fn deref (& self) -> & :: std :: string :: String { & self . 0 } }
impl :: std :: convert :: From < DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant0EndpointsItemName > for :: std :: string :: String { fn from (value : DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant0EndpointsItemName) -> Self { value . 0 } }
impl :: std :: convert :: From < & DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant0EndpointsItemName > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant0EndpointsItemName { fn from (value : & DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant0EndpointsItemName) -> Self { value . clone () } }
impl :: std :: str :: FromStr for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant0EndpointsItemName { type Err = self :: error :: ConversionError ; fn from_str (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { if value . chars () . count () > 15usize { return Err ("longer than 15 characters" . into ()) ; } static PATTERN : :: std :: sync :: LazyLock < :: regress :: Regex > = :: std :: sync :: LazyLock :: new (|| { :: regress :: Regex :: new ("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") . unwrap () }) ; if PATTERN . find (value) . is_none () { return Err ("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"" . into ()) ; } Ok (Self (value . to_string ())) } }
impl :: std :: convert :: TryFrom < & str > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant0EndpointsItemName { type Error = self :: error :: ConversionError ; fn try_from (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < & :: std :: string :: String > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant0EndpointsItemName { type Error = self :: error :: ConversionError ; fn try_from (value : & :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < :: std :: string :: String > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant0EndpointsItemName { type Error = self :: error :: ConversionError ; fn try_from (value : :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl < 'de > :: serde :: Deserialize < 'de > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant0EndpointsItemName { fn deserialize < D > (deserializer : D ,) -> :: std :: result :: Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { :: std :: string :: String :: deserialize (deserializer) ? . parse () . map_err (| e : self :: error :: ConversionError | { < D :: Error as :: serde :: de :: Error > :: custom (e . to_string () ,) }) } }
#[doc = "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"http\","]
#[doc = "    \"https\","]
#[doc = "    \"ws\","]
#[doc = "    \"wss\","]
#[doc = "    \"tcp\","]
#[doc = "    \"udp\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant0EndpointsItemProtocol
{
    #[serde(rename = "http")]
    Http,
    #[serde(rename = "https")]
    Https,
    #[serde(rename = "ws")]
    Ws,
    #[serde(rename = "wss")]
    Wss,
    #[serde(rename = "tcp")]
    Tcp,
    #[serde(rename = "udp")]
    Udp,
}
impl :: std :: convert :: From < & Self > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant0EndpointsItemProtocol { fn from (value : & DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant0EndpointsItemProtocol) -> Self { value . clone () } }
impl :: std :: fmt :: Display for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant0EndpointsItemProtocol { fn fmt (& self , f : & mut :: std :: fmt :: Formatter < '_ >) -> :: std :: fmt :: Result { match * self { Self :: Http => f . write_str ("http") , Self :: Https => f . write_str ("https") , Self :: Ws => f . write_str ("ws") , Self :: Wss => f . write_str ("wss") , Self :: Tcp => f . write_str ("tcp") , Self :: Udp => f . write_str ("udp") , } } }
impl :: std :: str :: FromStr for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant0EndpointsItemProtocol { type Err = self :: error :: ConversionError ; fn from_str (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { match value { "http" => Ok (Self :: Http) , "https" => Ok (Self :: Https) , "ws" => Ok (Self :: Ws) , "wss" => Ok (Self :: Wss) , "tcp" => Ok (Self :: Tcp) , "udp" => Ok (Self :: Udp) , _ => Err ("invalid value" . into ()) , } } }
impl :: std :: convert :: TryFrom < & str > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant0EndpointsItemProtocol { type Error = self :: error :: ConversionError ; fn try_from (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < & :: std :: string :: String > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant0EndpointsItemProtocol { type Error = self :: error :: ConversionError ; fn try_from (value : & :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < :: std :: string :: String > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant0EndpointsItemProtocol { type Error = self :: error :: ConversionError ; fn try_from (value : :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
#[doc = "`DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant1EndpointsItem`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"name\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"annotation\": {"]
#[doc = "      \"description\": \"Annotations to be added to Kubernetes Ingress or Openshift Route\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"attributes\": {"]
#[doc = "      \"description\": \"Map of implementation-dependant string-based free-form attributes.\\n\\nExamples of Che-specific attributes:\\n- cookiesAuthEnabled: \\\"true\\\" / \\\"false\\\",\\n- type: \\\"terminal\\\" / \\\"ide\\\" / \\\"ide-dev\\\",\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": true"]
#[doc = "    },"]
#[doc = "    \"exposure\": {"]
#[doc = "      \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"public\","]
#[doc = "        \"internal\","]
#[doc = "        \"none\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"maxLength\": 15,"]
#[doc = "      \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "    },"]
#[doc = "    \"path\": {"]
#[doc = "      \"description\": \"Path of the endpoint URL\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"protocol\": {"]
#[doc = "      \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"http\","]
#[doc = "        \"https\","]
#[doc = "        \"ws\","]
#[doc = "        \"wss\","]
#[doc = "        \"tcp\","]
#[doc = "        \"udp\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"secure\": {"]
#[doc = "      \"description\": \"Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"targetPort\": {"]
#[doc = "      \"description\": \"Port number to be used within the container component. The same port cannot be used by two different container components.\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
pub struct DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant1EndpointsItem { # [doc = "Annotations to be added to Kubernetes Ingress or Openshift Route"] # [serde (default , skip_serializing_if = ":: std :: collections :: HashMap::is_empty")] pub annotation : :: std :: collections :: HashMap < :: std :: string :: String , :: std :: string :: String > , # [doc = "Map of implementation-dependant string-based free-form attributes.\n\nExamples of Che-specific attributes:\n- cookiesAuthEnabled: \"true\" / \"false\",\n- type: \"terminal\" / \"ide\" / \"ide-dev\","] # [serde (default , skip_serializing_if = "::serde_json::Map::is_empty")] pub attributes : :: serde_json :: Map < :: std :: string :: String , :: serde_json :: Value > , # [doc = "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`"] # [serde (default , skip_serializing_if = "::std::option::Option::is_none")] pub exposure : :: std :: option :: Option < DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant1EndpointsItemExposure > , pub name : DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant1EndpointsItemName , # [doc = "Path of the endpoint URL"] # [serde (default , skip_serializing_if = "::std::option::Option::is_none")] pub path : :: std :: option :: Option < :: std :: string :: String > , # [doc = "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`"] # [serde (default , skip_serializing_if = "::std::option::Option::is_none")] pub protocol : :: std :: option :: Option < DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant1EndpointsItemProtocol > , # [doc = "Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`."] # [serde (default , skip_serializing_if = "::std::option::Option::is_none")] pub secure : :: std :: option :: Option < bool > , # [doc = "Port number to be used within the container component. The same port cannot be used by two different container components."] # [serde (rename = "targetPort" , default , skip_serializing_if = "::std::option::Option::is_none")] pub target_port : :: std :: option :: Option < i64 > , }
impl
    ::std::convert::From<
        &DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant1EndpointsItem,
    >
    for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant1EndpointsItem
{
    fn from(
        value : & DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant1EndpointsItem,
    ) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant1EndpointsItem {
    pub fn builder () -> builder :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant1EndpointsItem{
        Default::default()
    }
}
#[doc = "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"public\","]
#[doc = "    \"internal\","]
#[doc = "    \"none\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant1EndpointsItemExposure
{
    #[serde(rename = "public")]
    Public,
    #[serde(rename = "internal")]
    Internal,
    #[serde(rename = "none")]
    None,
}
impl :: std :: convert :: From < & Self > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant1EndpointsItemExposure { fn from (value : & DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant1EndpointsItemExposure) -> Self { value . clone () } }
impl :: std :: fmt :: Display for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant1EndpointsItemExposure { fn fmt (& self , f : & mut :: std :: fmt :: Formatter < '_ >) -> :: std :: fmt :: Result { match * self { Self :: Public => f . write_str ("public") , Self :: Internal => f . write_str ("internal") , Self :: None => f . write_str ("none") , } } }
impl :: std :: str :: FromStr for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant1EndpointsItemExposure { type Err = self :: error :: ConversionError ; fn from_str (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { match value { "public" => Ok (Self :: Public) , "internal" => Ok (Self :: Internal) , "none" => Ok (Self :: None) , _ => Err ("invalid value" . into ()) , } } }
impl :: std :: convert :: TryFrom < & str > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant1EndpointsItemExposure { type Error = self :: error :: ConversionError ; fn try_from (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < & :: std :: string :: String > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant1EndpointsItemExposure { type Error = self :: error :: ConversionError ; fn try_from (value : & :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < :: std :: string :: String > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant1EndpointsItemExposure { type Error = self :: error :: ConversionError ; fn try_from (value : :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
#[doc = "`DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant1EndpointsItemName`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 15,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant1EndpointsItemName(
    ::std::string::String,
);
impl :: std :: ops :: Deref for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant1EndpointsItemName { type Target = :: std :: string :: String ; fn deref (& self) -> & :: std :: string :: String { & self . 0 } }
impl :: std :: convert :: From < DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant1EndpointsItemName > for :: std :: string :: String { fn from (value : DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant1EndpointsItemName) -> Self { value . 0 } }
impl :: std :: convert :: From < & DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant1EndpointsItemName > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant1EndpointsItemName { fn from (value : & DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant1EndpointsItemName) -> Self { value . clone () } }
impl :: std :: str :: FromStr for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant1EndpointsItemName { type Err = self :: error :: ConversionError ; fn from_str (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { if value . chars () . count () > 15usize { return Err ("longer than 15 characters" . into ()) ; } static PATTERN : :: std :: sync :: LazyLock < :: regress :: Regex > = :: std :: sync :: LazyLock :: new (|| { :: regress :: Regex :: new ("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") . unwrap () }) ; if PATTERN . find (value) . is_none () { return Err ("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"" . into ()) ; } Ok (Self (value . to_string ())) } }
impl :: std :: convert :: TryFrom < & str > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant1EndpointsItemName { type Error = self :: error :: ConversionError ; fn try_from (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < & :: std :: string :: String > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant1EndpointsItemName { type Error = self :: error :: ConversionError ; fn try_from (value : & :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < :: std :: string :: String > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant1EndpointsItemName { type Error = self :: error :: ConversionError ; fn try_from (value : :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl < 'de > :: serde :: Deserialize < 'de > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant1EndpointsItemName { fn deserialize < D > (deserializer : D ,) -> :: std :: result :: Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { :: std :: string :: String :: deserialize (deserializer) ? . parse () . map_err (| e : self :: error :: ConversionError | { < D :: Error as :: serde :: de :: Error > :: custom (e . to_string () ,) }) } }
#[doc = "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"http\","]
#[doc = "    \"https\","]
#[doc = "    \"ws\","]
#[doc = "    \"wss\","]
#[doc = "    \"tcp\","]
#[doc = "    \"udp\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant1EndpointsItemProtocol
{
    #[serde(rename = "http")]
    Http,
    #[serde(rename = "https")]
    Https,
    #[serde(rename = "ws")]
    Ws,
    #[serde(rename = "wss")]
    Wss,
    #[serde(rename = "tcp")]
    Tcp,
    #[serde(rename = "udp")]
    Udp,
}
impl :: std :: convert :: From < & Self > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant1EndpointsItemProtocol { fn from (value : & DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant1EndpointsItemProtocol) -> Self { value . clone () } }
impl :: std :: fmt :: Display for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant1EndpointsItemProtocol { fn fmt (& self , f : & mut :: std :: fmt :: Formatter < '_ >) -> :: std :: fmt :: Result { match * self { Self :: Http => f . write_str ("http") , Self :: Https => f . write_str ("https") , Self :: Ws => f . write_str ("ws") , Self :: Wss => f . write_str ("wss") , Self :: Tcp => f . write_str ("tcp") , Self :: Udp => f . write_str ("udp") , } } }
impl :: std :: str :: FromStr for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant1EndpointsItemProtocol { type Err = self :: error :: ConversionError ; fn from_str (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { match value { "http" => Ok (Self :: Http) , "https" => Ok (Self :: Https) , "ws" => Ok (Self :: Ws) , "wss" => Ok (Self :: Wss) , "tcp" => Ok (Self :: Tcp) , "udp" => Ok (Self :: Udp) , _ => Err ("invalid value" . into ()) , } } }
impl :: std :: convert :: TryFrom < & str > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant1EndpointsItemProtocol { type Error = self :: error :: ConversionError ; fn try_from (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < & :: std :: string :: String > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant1EndpointsItemProtocol { type Error = self :: error :: ConversionError ; fn try_from (value : & :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < :: std :: string :: String > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant1EndpointsItemProtocol { type Error = self :: error :: ConversionError ; fn try_from (value : :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
#[doc = "Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin.\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant0ComponentsItemVariant3Name(::std::string::String);
impl ::std::ops::Deref for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant3Name {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222ParentVariant0ComponentsItemVariant3Name>
    for ::std::string::String
{
    fn from(value: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant3Name) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant0ComponentsItemVariant3Name>
    for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant3Name
{
    fn from(value: &DevfileSchemaVersion222ParentVariant0ComponentsItemVariant3Name) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant3Name {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant3Name
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant3Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant3Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de>
    for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant3Name
{
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Allows specifying the definition of a volume shared by several other components"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Allows specifying the definition of a volume shared by several other components\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"ephemeral\": {"]
#[doc = "      \"description\": \"Ephemeral volumes are not stored persistently across restarts. Defaults to false\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"size\": {"]
#[doc = "      \"description\": \"Size of the volume\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant0ComponentsItemVariant3Volume {
    #[doc = "Ephemeral volumes are not stored persistently across restarts. Defaults to false"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub ephemeral: ::std::option::Option<bool>,
    #[doc = "Size of the volume"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub size: ::std::option::Option<::std::string::String>,
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant0ComponentsItemVariant3Volume>
    for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant3Volume
{
    fn from(value: &DevfileSchemaVersion222ParentVariant0ComponentsItemVariant3Volume) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant0ComponentsItemVariant3Volume {
    pub fn builder() -> builder::DevfileSchemaVersion222ParentVariant0ComponentsItemVariant3Volume {
        Default::default()
    }
}
#[doc = "Allows specifying the definition of an image for outer loop builds"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Allows specifying the definition of an image for outer loop builds\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"dockerfile\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"autoBuild\""]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"autoBuild\": {"]
#[doc = "      \"description\": \"Defines if the image should be built during startup.\\n\\nDefault value is `false`\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"dockerfile\": {"]
#[doc = "      \"description\": \"Allows specifying dockerfile type build\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"required\": ["]
#[doc = "            \"uri\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"required\": ["]
#[doc = "            \"devfileRegistry\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"required\": ["]
#[doc = "            \"git\""]
#[doc = "          ]"]
#[doc = "        }"]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"args\": {"]
#[doc = "          \"description\": \"The arguments to supply to the dockerfile build.\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"buildContext\": {"]
#[doc = "          \"description\": \"Path of source directory to establish build context. Defaults to ${PROJECT_SOURCE} in the container\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"devfileRegistry\": {"]
#[doc = "          \"description\": \"Dockerfile's Devfile Registry source\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"properties\": {"]
#[doc = "            \"id\": {"]
#[doc = "              \"description\": \"Id in a devfile registry that contains a Dockerfile. The src in the OCI registry required for the Dockerfile build will be downloaded for building the image.\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"registryUrl\": {"]
#[doc = "              \"description\": \"Devfile Registry URL to pull the Dockerfile from when using the Devfile Registry as Dockerfile src. To ensure the Dockerfile gets resolved consistently in different environments, it is recommended to always specify the `devfileRegistryUrl` when `Id` is used.\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"git\": {"]
#[doc = "          \"description\": \"Dockerfile's Git source\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"properties\": {"]
#[doc = "            \"checkoutFrom\": {"]
#[doc = "              \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"properties\": {"]
#[doc = "                \"remote\": {"]
#[doc = "                  \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                },"]
#[doc = "                \"revision\": {"]
#[doc = "                  \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            },"]
#[doc = "            \"fileLocation\": {"]
#[doc = "              \"description\": \"Location of the Dockerfile in the Git repository when using git as Dockerfile src. Defaults to Dockerfile.\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"remotes\": {"]
#[doc = "              \"description\": \"The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"additionalProperties\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"rootRequired\": {"]
#[doc = "          \"description\": \"Specify if a privileged builder pod is required.\\n\\nDefault value is `false`\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"uri\": {"]
#[doc = "          \"description\": \"URI Reference of a Dockerfile. It can be a full URL or a relative URI from the current devfile as the base URI.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"imageName\": {"]
#[doc = "      \"description\": \"Name of the image for the resulting outerloop build\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged, deny_unknown_fields)]
pub enum DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4Image {
    Variant0 {
        dockerfile:
            DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4ImageVariant0Dockerfile,
        #[doc = "Name of the image for the resulting outerloop build"]
        #[serde(
            rename = "imageName",
            default,
            skip_serializing_if = "::std::option::Option::is_none"
        )]
        image_name: ::std::option::Option<::std::string::String>,
    },
    Variant1 {
        #[doc = "Defines if the image should be built during startup.\n\nDefault value is `false`"]
        #[serde(rename = "autoBuild")]
        auto_build: bool,
        #[doc = "Name of the image for the resulting outerloop build"]
        #[serde(
            rename = "imageName",
            default,
            skip_serializing_if = "::std::option::Option::is_none"
        )]
        image_name: ::std::option::Option<::std::string::String>,
    },
}
impl ::std::convert::From<&Self>
    for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4Image
{
    fn from(value: &DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4Image) -> Self {
        value.clone()
    }
}
#[doc = "Allows specifying dockerfile type build"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Allows specifying dockerfile type build\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"uri\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"devfileRegistry\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"git\""]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"args\": {"]
#[doc = "      \"description\": \"The arguments to supply to the dockerfile build.\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"buildContext\": {"]
#[doc = "      \"description\": \"Path of source directory to establish build context. Defaults to ${PROJECT_SOURCE} in the container\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"devfileRegistry\": {"]
#[doc = "      \"description\": \"Dockerfile's Devfile Registry source\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"id\": {"]
#[doc = "          \"description\": \"Id in a devfile registry that contains a Dockerfile. The src in the OCI registry required for the Dockerfile build will be downloaded for building the image.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"registryUrl\": {"]
#[doc = "          \"description\": \"Devfile Registry URL to pull the Dockerfile from when using the Devfile Registry as Dockerfile src. To ensure the Dockerfile gets resolved consistently in different environments, it is recommended to always specify the `devfileRegistryUrl` when `Id` is used.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"git\": {"]
#[doc = "      \"description\": \"Dockerfile's Git source\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"checkoutFrom\": {"]
#[doc = "          \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"properties\": {"]
#[doc = "            \"remote\": {"]
#[doc = "              \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"revision\": {"]
#[doc = "              \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"fileLocation\": {"]
#[doc = "          \"description\": \"Location of the Dockerfile in the Git repository when using git as Dockerfile src. Defaults to Dockerfile.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"remotes\": {"]
#[doc = "          \"description\": \"The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"additionalProperties\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"rootRequired\": {"]
#[doc = "      \"description\": \"Specify if a privileged builder pod is required.\\n\\nDefault value is `false`\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"uri\": {"]
#[doc = "      \"description\": \"URI Reference of a Dockerfile. It can be a full URL or a relative URI from the current devfile as the base URI.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged, deny_unknown_fields)]
pub enum DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4ImageVariant0Dockerfile {
    Variant0 { # [doc = "The arguments to supply to the dockerfile build."] # [serde (default , skip_serializing_if = "::std::vec::Vec::is_empty")] args : :: std :: vec :: Vec < :: std :: string :: String > , # [doc = "Path of source directory to establish build context. Defaults to ${PROJECT_SOURCE} in the container"] # [serde (rename = "buildContext" , default , skip_serializing_if = "::std::option::Option::is_none")] build_context : :: std :: option :: Option < :: std :: string :: String > , # [doc = "Specify if a privileged builder pod is required.\n\nDefault value is `false`"] # [serde (rename = "rootRequired" , default , skip_serializing_if = "::std::option::Option::is_none")] root_required : :: std :: option :: Option < bool > , # [doc = "URI Reference of a Dockerfile. It can be a full URL or a relative URI from the current devfile as the base URI."] uri : :: std :: string :: String , } , Variant1 { # [doc = "The arguments to supply to the dockerfile build."] # [serde (default , skip_serializing_if = "::std::vec::Vec::is_empty")] args : :: std :: vec :: Vec < :: std :: string :: String > , # [doc = "Path of source directory to establish build context. Defaults to ${PROJECT_SOURCE} in the container"] # [serde (rename = "buildContext" , default , skip_serializing_if = "::std::option::Option::is_none")] build_context : :: std :: option :: Option < :: std :: string :: String > , # [serde (rename = "devfileRegistry")] devfile_registry : DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4ImageVariant0DockerfileVariant1DevfileRegistry , # [doc = "Specify if a privileged builder pod is required.\n\nDefault value is `false`"] # [serde (rename = "rootRequired" , default , skip_serializing_if = "::std::option::Option::is_none")] root_required : :: std :: option :: Option < bool > , } , Variant2 { # [doc = "The arguments to supply to the dockerfile build."] # [serde (default , skip_serializing_if = "::std::vec::Vec::is_empty")] args : :: std :: vec :: Vec < :: std :: string :: String > , # [doc = "Path of source directory to establish build context. Defaults to ${PROJECT_SOURCE} in the container"] # [serde (rename = "buildContext" , default , skip_serializing_if = "::std::option::Option::is_none")] build_context : :: std :: option :: Option < :: std :: string :: String > , git : DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4ImageVariant0DockerfileVariant2Git , # [doc = "Specify if a privileged builder pod is required.\n\nDefault value is `false`"] # [serde (rename = "rootRequired" , default , skip_serializing_if = "::std::option::Option::is_none")] root_required : :: std :: option :: Option < bool > , } , }
impl ::std::convert::From<&Self>
    for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4ImageVariant0Dockerfile
{
    fn from(
        value: &DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4ImageVariant0Dockerfile,
    ) -> Self {
        value.clone()
    }
}
#[doc = "Dockerfile's Devfile Registry source"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Dockerfile's Devfile Registry source\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"id\": {"]
#[doc = "      \"description\": \"Id in a devfile registry that contains a Dockerfile. The src in the OCI registry required for the Dockerfile build will be downloaded for building the image.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"registryUrl\": {"]
#[doc = "      \"description\": \"Devfile Registry URL to pull the Dockerfile from when using the Devfile Registry as Dockerfile src. To ensure the Dockerfile gets resolved consistently in different environments, it is recommended to always specify the `devfileRegistryUrl` when `Id` is used.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4ImageVariant0DockerfileVariant1DevfileRegistry
{
    #[doc = "Id in a devfile registry that contains a Dockerfile. The src in the OCI registry required for the Dockerfile build will be downloaded for building the image."]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub id: ::std::option::Option<::std::string::String>,
    #[doc = "Devfile Registry URL to pull the Dockerfile from when using the Devfile Registry as Dockerfile src. To ensure the Dockerfile gets resolved consistently in different environments, it is recommended to always specify the `devfileRegistryUrl` when `Id` is used."]
    #[serde(
        rename = "registryUrl",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub registry_url: ::std::option::Option<::std::string::String>,
}
impl :: std :: convert :: From < & DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4ImageVariant0DockerfileVariant1DevfileRegistry > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4ImageVariant0DockerfileVariant1DevfileRegistry { fn from (value : & DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4ImageVariant0DockerfileVariant1DevfileRegistry) -> Self { value . clone () } }
impl DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4ImageVariant0DockerfileVariant1DevfileRegistry { pub fn builder () -> builder :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4ImageVariant0DockerfileVariant1DevfileRegistry { Default :: default () } }
#[doc = "Dockerfile's Git source"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Dockerfile's Git source\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"checkoutFrom\": {"]
#[doc = "      \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"remote\": {"]
#[doc = "          \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"revision\": {"]
#[doc = "          \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"fileLocation\": {"]
#[doc = "      \"description\": \"Location of the Dockerfile in the Git repository when using git as Dockerfile src. Defaults to Dockerfile.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"remotes\": {"]
#[doc = "      \"description\": \"The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4ImageVariant0DockerfileVariant2Git { # [serde (rename = "checkoutFrom" , default , skip_serializing_if = "::std::option::Option::is_none")] pub checkout_from : :: std :: option :: Option < DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4ImageVariant0DockerfileVariant2GitCheckoutFrom > , # [doc = "Location of the Dockerfile in the Git repository when using git as Dockerfile src. Defaults to Dockerfile."] # [serde (rename = "fileLocation" , default , skip_serializing_if = "::std::option::Option::is_none")] pub file_location : :: std :: option :: Option < :: std :: string :: String > , # [doc = "The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured."] # [serde (default , skip_serializing_if = ":: std :: collections :: HashMap::is_empty")] pub remotes : :: std :: collections :: HashMap < :: std :: string :: String , :: std :: string :: String > , }
impl :: std :: convert :: From < & DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4ImageVariant0DockerfileVariant2Git > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4ImageVariant0DockerfileVariant2Git { fn from (value : & DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4ImageVariant0DockerfileVariant2Git) -> Self { value . clone () } }
impl DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4ImageVariant0DockerfileVariant2Git {
    pub fn builder () -> builder :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4ImageVariant0DockerfileVariant2Git{
        Default::default()
    }
}
#[doc = "Defines from what the project should be checked out. Required if there are more than one remote configured"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"remote\": {"]
#[doc = "      \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"revision\": {"]
#[doc = "      \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4ImageVariant0DockerfileVariant2GitCheckoutFrom
{
    #[doc = "The remote name should be used as init. Required if there are more than one remote configured"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub remote: ::std::option::Option<::std::string::String>,
    #[doc = "The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found."]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub revision: ::std::option::Option<::std::string::String>,
}
impl :: std :: convert :: From < & DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4ImageVariant0DockerfileVariant2GitCheckoutFrom > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4ImageVariant0DockerfileVariant2GitCheckoutFrom { fn from (value : & DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4ImageVariant0DockerfileVariant2GitCheckoutFrom) -> Self { value . clone () } }
impl DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4ImageVariant0DockerfileVariant2GitCheckoutFrom { pub fn builder () -> builder :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4ImageVariant0DockerfileVariant2GitCheckoutFrom { Default :: default () } }
#[doc = "Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin.\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4Name(::std::string::String);
impl ::std::ops::Deref for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4Name {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4Name>
    for ::std::string::String
{
    fn from(value: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4Name) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4Name>
    for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4Name
{
    fn from(value: &DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4Name) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4Name {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4Name
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de>
    for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4Name
{
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "`DevfileSchemaVersion222ParentVariant0DependentProjectsItem`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"git\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"zip\""]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  ],"]
#[doc = "  \"required\": ["]
#[doc = "    \"name\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"attributes\": {"]
#[doc = "      \"description\": \"Map of implementation-dependant free-form YAML attributes.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": true"]
#[doc = "    },"]
#[doc = "    \"clonePath\": {"]
#[doc = "      \"description\": \"Path relative to the root of the projects to which this project should be cloned into. This is a unix-style relative path (i.e. uses forward slashes). The path is invalid if it is absolute or tries to escape the project root through the usage of '..'. If not specified, defaults to the project name.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git\": {"]
#[doc = "      \"description\": \"Project's Git source\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"checkoutFrom\": {"]
#[doc = "          \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"properties\": {"]
#[doc = "            \"remote\": {"]
#[doc = "              \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"revision\": {"]
#[doc = "              \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"remotes\": {"]
#[doc = "          \"description\": \"The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"additionalProperties\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"description\": \"Project name\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"maxLength\": 63,"]
#[doc = "      \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "    },"]
#[doc = "    \"zip\": {"]
#[doc = "      \"description\": \"Project's Zip source\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"location\": {"]
#[doc = "          \"description\": \"Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged, deny_unknown_fields)]
pub enum DevfileSchemaVersion222ParentVariant0DependentProjectsItem {
    Variant0 {
        #[doc = "Map of implementation-dependant free-form YAML attributes."]
        #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
        attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
        #[doc = "Path relative to the root of the projects to which this project should be cloned into. This is a unix-style relative path (i.e. uses forward slashes). The path is invalid if it is absolute or tries to escape the project root through the usage of '..'. If not specified, defaults to the project name."]
        #[serde(
            rename = "clonePath",
            default,
            skip_serializing_if = "::std::option::Option::is_none"
        )]
        clone_path: ::std::option::Option<::std::string::String>,
        git: DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant0Git,
        #[doc = "Project name"]
        name: DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant0Name,
    },
    Variant1 {
        #[doc = "Map of implementation-dependant free-form YAML attributes."]
        #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
        attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
        #[doc = "Path relative to the root of the projects to which this project should be cloned into. This is a unix-style relative path (i.e. uses forward slashes). The path is invalid if it is absolute or tries to escape the project root through the usage of '..'. If not specified, defaults to the project name."]
        #[serde(
            rename = "clonePath",
            default,
            skip_serializing_if = "::std::option::Option::is_none"
        )]
        clone_path: ::std::option::Option<::std::string::String>,
        #[doc = "Project name"]
        name: DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant1Name,
        zip: DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant1Zip,
    },
}
impl ::std::convert::From<&Self> for DevfileSchemaVersion222ParentVariant0DependentProjectsItem {
    fn from(value: &DevfileSchemaVersion222ParentVariant0DependentProjectsItem) -> Self {
        value.clone()
    }
}
#[doc = "Project's Git source"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Project's Git source\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"checkoutFrom\": {"]
#[doc = "      \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"remote\": {"]
#[doc = "          \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"revision\": {"]
#[doc = "          \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"remotes\": {"]
#[doc = "      \"description\": \"The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant0Git {
    #[serde(
        rename = "checkoutFrom",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub checkout_from: ::std::option::Option<
        DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant0GitCheckoutFrom,
    >,
    #[doc = "The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured."]
    #[serde(
        default,
        skip_serializing_if = ":: std :: collections :: HashMap::is_empty"
    )]
    pub remotes: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant0Git>
    for DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant0Git
{
    fn from(value: &DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant0Git) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant0Git {
    pub fn builder(
    ) -> builder::DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant0Git {
        Default::default()
    }
}
#[doc = "Defines from what the project should be checked out. Required if there are more than one remote configured"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"remote\": {"]
#[doc = "      \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"revision\": {"]
#[doc = "      \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant0GitCheckoutFrom {
    #[doc = "The remote name should be used as init. Required if there are more than one remote configured"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub remote: ::std::option::Option<::std::string::String>,
    #[doc = "The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found."]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub revision: ::std::option::Option<::std::string::String>,
}
impl
    ::std::convert::From<
        &DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant0GitCheckoutFrom,
    > for DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant0GitCheckoutFrom
{
    fn from(
        value: &DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant0GitCheckoutFrom,
    ) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant0GitCheckoutFrom {
    pub fn builder(
    ) -> builder::DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant0GitCheckoutFrom
    {
        Default::default()
    }
}
#[doc = "Project name"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Project name\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant0Name(
    ::std::string::String,
);
impl ::std::ops::Deref for DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant0Name {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant0Name>
    for ::std::string::String
{
    fn from(value: DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant0Name) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant0Name>
    for DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant0Name
{
    fn from(
        value: &DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant0Name,
    ) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr
    for DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant0Name
{
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant0Name
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant0Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant0Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de>
    for DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant0Name
{
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Project name"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Project name\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant1Name(
    ::std::string::String,
);
impl ::std::ops::Deref for DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant1Name {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant1Name>
    for ::std::string::String
{
    fn from(value: DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant1Name) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant1Name>
    for DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant1Name
{
    fn from(
        value: &DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant1Name,
    ) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr
    for DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant1Name
{
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant1Name
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant1Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant1Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de>
    for DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant1Name
{
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Project's Zip source"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Project's Zip source\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"location\": {"]
#[doc = "      \"description\": \"Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant1Zip {
    #[doc = "Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub location: ::std::option::Option<::std::string::String>,
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant1Zip>
    for DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant1Zip
{
    fn from(value: &DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant1Zip) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant1Zip {
    pub fn builder(
    ) -> builder::DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant1Zip {
        Default::default()
    }
}
#[doc = "`DevfileSchemaVersion222ParentVariant0ProjectsItem`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"git\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"zip\""]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  ],"]
#[doc = "  \"required\": ["]
#[doc = "    \"name\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"attributes\": {"]
#[doc = "      \"description\": \"Map of implementation-dependant free-form YAML attributes.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": true"]
#[doc = "    },"]
#[doc = "    \"clonePath\": {"]
#[doc = "      \"description\": \"Path relative to the root of the projects to which this project should be cloned into. This is a unix-style relative path (i.e. uses forward slashes). The path is invalid if it is absolute or tries to escape the project root through the usage of '..'. If not specified, defaults to the project name.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git\": {"]
#[doc = "      \"description\": \"Project's Git source\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"checkoutFrom\": {"]
#[doc = "          \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"properties\": {"]
#[doc = "            \"remote\": {"]
#[doc = "              \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"revision\": {"]
#[doc = "              \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"remotes\": {"]
#[doc = "          \"description\": \"The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"additionalProperties\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"description\": \"Project name\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"maxLength\": 63,"]
#[doc = "      \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "    },"]
#[doc = "    \"zip\": {"]
#[doc = "      \"description\": \"Project's Zip source\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"location\": {"]
#[doc = "          \"description\": \"Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged, deny_unknown_fields)]
pub enum DevfileSchemaVersion222ParentVariant0ProjectsItem {
    Variant0 {
        #[doc = "Map of implementation-dependant free-form YAML attributes."]
        #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
        attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
        #[doc = "Path relative to the root of the projects to which this project should be cloned into. This is a unix-style relative path (i.e. uses forward slashes). The path is invalid if it is absolute or tries to escape the project root through the usage of '..'. If not specified, defaults to the project name."]
        #[serde(
            rename = "clonePath",
            default,
            skip_serializing_if = "::std::option::Option::is_none"
        )]
        clone_path: ::std::option::Option<::std::string::String>,
        git: DevfileSchemaVersion222ParentVariant0ProjectsItemVariant0Git,
        #[doc = "Project name"]
        name: DevfileSchemaVersion222ParentVariant0ProjectsItemVariant0Name,
    },
    Variant1 {
        #[doc = "Map of implementation-dependant free-form YAML attributes."]
        #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
        attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
        #[doc = "Path relative to the root of the projects to which this project should be cloned into. This is a unix-style relative path (i.e. uses forward slashes). The path is invalid if it is absolute or tries to escape the project root through the usage of '..'. If not specified, defaults to the project name."]
        #[serde(
            rename = "clonePath",
            default,
            skip_serializing_if = "::std::option::Option::is_none"
        )]
        clone_path: ::std::option::Option<::std::string::String>,
        #[doc = "Project name"]
        name: DevfileSchemaVersion222ParentVariant0ProjectsItemVariant1Name,
        zip: DevfileSchemaVersion222ParentVariant0ProjectsItemVariant1Zip,
    },
}
impl ::std::convert::From<&Self> for DevfileSchemaVersion222ParentVariant0ProjectsItem {
    fn from(value: &DevfileSchemaVersion222ParentVariant0ProjectsItem) -> Self {
        value.clone()
    }
}
#[doc = "Project's Git source"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Project's Git source\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"checkoutFrom\": {"]
#[doc = "      \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"remote\": {"]
#[doc = "          \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"revision\": {"]
#[doc = "          \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"remotes\": {"]
#[doc = "      \"description\": \"The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant0ProjectsItemVariant0Git {
    #[serde(
        rename = "checkoutFrom",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub checkout_from: ::std::option::Option<
        DevfileSchemaVersion222ParentVariant0ProjectsItemVariant0GitCheckoutFrom,
    >,
    #[doc = "The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured."]
    #[serde(
        default,
        skip_serializing_if = ":: std :: collections :: HashMap::is_empty"
    )]
    pub remotes: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant0ProjectsItemVariant0Git>
    for DevfileSchemaVersion222ParentVariant0ProjectsItemVariant0Git
{
    fn from(value: &DevfileSchemaVersion222ParentVariant0ProjectsItemVariant0Git) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant0ProjectsItemVariant0Git {
    pub fn builder() -> builder::DevfileSchemaVersion222ParentVariant0ProjectsItemVariant0Git {
        Default::default()
    }
}
#[doc = "Defines from what the project should be checked out. Required if there are more than one remote configured"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"remote\": {"]
#[doc = "      \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"revision\": {"]
#[doc = "      \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant0ProjectsItemVariant0GitCheckoutFrom {
    #[doc = "The remote name should be used as init. Required if there are more than one remote configured"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub remote: ::std::option::Option<::std::string::String>,
    #[doc = "The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found."]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub revision: ::std::option::Option<::std::string::String>,
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant0ProjectsItemVariant0GitCheckoutFrom>
    for DevfileSchemaVersion222ParentVariant0ProjectsItemVariant0GitCheckoutFrom
{
    fn from(
        value: &DevfileSchemaVersion222ParentVariant0ProjectsItemVariant0GitCheckoutFrom,
    ) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant0ProjectsItemVariant0GitCheckoutFrom {
    pub fn builder(
    ) -> builder::DevfileSchemaVersion222ParentVariant0ProjectsItemVariant0GitCheckoutFrom {
        Default::default()
    }
}
#[doc = "Project name"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Project name\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant0ProjectsItemVariant0Name(::std::string::String);
impl ::std::ops::Deref for DevfileSchemaVersion222ParentVariant0ProjectsItemVariant0Name {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222ParentVariant0ProjectsItemVariant0Name>
    for ::std::string::String
{
    fn from(value: DevfileSchemaVersion222ParentVariant0ProjectsItemVariant0Name) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant0ProjectsItemVariant0Name>
    for DevfileSchemaVersion222ParentVariant0ProjectsItemVariant0Name
{
    fn from(value: &DevfileSchemaVersion222ParentVariant0ProjectsItemVariant0Name) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for DevfileSchemaVersion222ParentVariant0ProjectsItemVariant0Name {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ParentVariant0ProjectsItemVariant0Name
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant0ProjectsItemVariant0Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant0ProjectsItemVariant0Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de>
    for DevfileSchemaVersion222ParentVariant0ProjectsItemVariant0Name
{
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Project name"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Project name\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant0ProjectsItemVariant1Name(::std::string::String);
impl ::std::ops::Deref for DevfileSchemaVersion222ParentVariant0ProjectsItemVariant1Name {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222ParentVariant0ProjectsItemVariant1Name>
    for ::std::string::String
{
    fn from(value: DevfileSchemaVersion222ParentVariant0ProjectsItemVariant1Name) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant0ProjectsItemVariant1Name>
    for DevfileSchemaVersion222ParentVariant0ProjectsItemVariant1Name
{
    fn from(value: &DevfileSchemaVersion222ParentVariant0ProjectsItemVariant1Name) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for DevfileSchemaVersion222ParentVariant0ProjectsItemVariant1Name {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ParentVariant0ProjectsItemVariant1Name
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant0ProjectsItemVariant1Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant0ProjectsItemVariant1Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de>
    for DevfileSchemaVersion222ParentVariant0ProjectsItemVariant1Name
{
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Project's Zip source"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Project's Zip source\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"location\": {"]
#[doc = "      \"description\": \"Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant0ProjectsItemVariant1Zip {
    #[doc = "Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub location: ::std::option::Option<::std::string::String>,
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant0ProjectsItemVariant1Zip>
    for DevfileSchemaVersion222ParentVariant0ProjectsItemVariant1Zip
{
    fn from(value: &DevfileSchemaVersion222ParentVariant0ProjectsItemVariant1Zip) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant0ProjectsItemVariant1Zip {
    pub fn builder() -> builder::DevfileSchemaVersion222ParentVariant0ProjectsItemVariant1Zip {
        Default::default()
    }
}
#[doc = "`DevfileSchemaVersion222ParentVariant0StarterProjectsItem`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"git\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"zip\""]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  ],"]
#[doc = "  \"required\": ["]
#[doc = "    \"name\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"attributes\": {"]
#[doc = "      \"description\": \"Map of implementation-dependant free-form YAML attributes.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": true"]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"description\": \"Description of a starter project\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git\": {"]
#[doc = "      \"description\": \"Project's Git source\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"checkoutFrom\": {"]
#[doc = "          \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"properties\": {"]
#[doc = "            \"remote\": {"]
#[doc = "              \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"revision\": {"]
#[doc = "              \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"remotes\": {"]
#[doc = "          \"description\": \"The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"additionalProperties\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"description\": \"Project name\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"maxLength\": 63,"]
#[doc = "      \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "    },"]
#[doc = "    \"subDir\": {"]
#[doc = "      \"description\": \"Sub-directory from a starter project to be used as root for starter project.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"zip\": {"]
#[doc = "      \"description\": \"Project's Zip source\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"location\": {"]
#[doc = "          \"description\": \"Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged, deny_unknown_fields)]
pub enum DevfileSchemaVersion222ParentVariant0StarterProjectsItem {
    Variant0 {
        #[doc = "Map of implementation-dependant free-form YAML attributes."]
        #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
        attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
        #[doc = "Description of a starter project"]
        #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
        description: ::std::option::Option<::std::string::String>,
        git: DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant0Git,
        #[doc = "Project name"]
        name: DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant0Name,
        #[doc = "Sub-directory from a starter project to be used as root for starter project."]
        #[serde(
            rename = "subDir",
            default,
            skip_serializing_if = "::std::option::Option::is_none"
        )]
        sub_dir: ::std::option::Option<::std::string::String>,
    },
    Variant1 {
        #[doc = "Map of implementation-dependant free-form YAML attributes."]
        #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
        attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
        #[doc = "Description of a starter project"]
        #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
        description: ::std::option::Option<::std::string::String>,
        #[doc = "Project name"]
        name: DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant1Name,
        #[doc = "Sub-directory from a starter project to be used as root for starter project."]
        #[serde(
            rename = "subDir",
            default,
            skip_serializing_if = "::std::option::Option::is_none"
        )]
        sub_dir: ::std::option::Option<::std::string::String>,
        zip: DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant1Zip,
    },
}
impl ::std::convert::From<&Self> for DevfileSchemaVersion222ParentVariant0StarterProjectsItem {
    fn from(value: &DevfileSchemaVersion222ParentVariant0StarterProjectsItem) -> Self {
        value.clone()
    }
}
#[doc = "Project's Git source"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Project's Git source\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"checkoutFrom\": {"]
#[doc = "      \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"remote\": {"]
#[doc = "          \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"revision\": {"]
#[doc = "          \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"remotes\": {"]
#[doc = "      \"description\": \"The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant0Git {
    #[serde(
        rename = "checkoutFrom",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub checkout_from: ::std::option::Option<
        DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant0GitCheckoutFrom,
    >,
    #[doc = "The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured."]
    #[serde(
        default,
        skip_serializing_if = ":: std :: collections :: HashMap::is_empty"
    )]
    pub remotes: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant0Git>
    for DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant0Git
{
    fn from(value: &DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant0Git) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant0Git {
    pub fn builder() -> builder::DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant0Git
    {
        Default::default()
    }
}
#[doc = "Defines from what the project should be checked out. Required if there are more than one remote configured"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"remote\": {"]
#[doc = "      \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"revision\": {"]
#[doc = "      \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant0GitCheckoutFrom {
    #[doc = "The remote name should be used as init. Required if there are more than one remote configured"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub remote: ::std::option::Option<::std::string::String>,
    #[doc = "The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found."]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub revision: ::std::option::Option<::std::string::String>,
}
impl
    ::std::convert::From<
        &DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant0GitCheckoutFrom,
    > for DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant0GitCheckoutFrom
{
    fn from(
        value: &DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant0GitCheckoutFrom,
    ) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant0GitCheckoutFrom {
    pub fn builder(
    ) -> builder::DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant0GitCheckoutFrom
    {
        Default::default()
    }
}
#[doc = "Project name"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Project name\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant0Name(
    ::std::string::String,
);
impl ::std::ops::Deref for DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant0Name {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant0Name>
    for ::std::string::String
{
    fn from(value: DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant0Name) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant0Name>
    for DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant0Name
{
    fn from(value: &DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant0Name) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant0Name {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant0Name
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant0Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant0Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de>
    for DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant0Name
{
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Project name"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Project name\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant1Name(
    ::std::string::String,
);
impl ::std::ops::Deref for DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant1Name {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant1Name>
    for ::std::string::String
{
    fn from(value: DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant1Name) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant1Name>
    for DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant1Name
{
    fn from(value: &DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant1Name) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant1Name {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant1Name
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant1Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant1Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de>
    for DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant1Name
{
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Project's Zip source"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Project's Zip source\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"location\": {"]
#[doc = "      \"description\": \"Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant1Zip {
    #[doc = "Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub location: ::std::option::Option<::std::string::String>,
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant1Zip>
    for DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant1Zip
{
    fn from(value: &DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant1Zip) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant1Zip {
    pub fn builder() -> builder::DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant1Zip
    {
        Default::default()
    }
}
#[doc = "Specific stack/sample version to pull the parent devfile from, when using id in the parent reference. To specify `version`, `id` must be defined and used as the import reference source. `version` can be either a specific stack version, or `latest`. If no `version` specified, default version will be used."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Specific stack/sample version to pull the parent devfile from, when using id in the parent reference. To specify `version`, `id` must be defined and used as the import reference source. `version` can be either a specific stack version, or `latest`. If no `version` specified, default version will be used.\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"pattern\": \"^(latest)|(([1-9])\\\\.([0-9]+)\\\\.([0-9]+)(\\\\-[0-9a-z-]+(\\\\.[0-9a-z-]+)*)?(\\\\+[0-9A-Za-z-]+(\\\\.[0-9A-Za-z-]+)*)?)$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant0Version(::std::string::String);
impl ::std::ops::Deref for DevfileSchemaVersion222ParentVariant0Version {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222ParentVariant0Version> for ::std::string::String {
    fn from(value: DevfileSchemaVersion222ParentVariant0Version) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant0Version>
    for DevfileSchemaVersion222ParentVariant0Version
{
    fn from(value: &DevfileSchemaVersion222ParentVariant0Version) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for DevfileSchemaVersion222ParentVariant0Version {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> = ::std::sync::LazyLock::new(
            || {
                :: regress :: Regex :: new ("^(latest)|(([1-9])\\.([0-9]+)\\.([0-9]+)(\\-[0-9a-z-]+(\\.[0-9a-z-]+)*)?(\\+[0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*)?)$") . unwrap ()
            },
        );
        if PATTERN.find(value).is_none() {
            return Err ("doesn't match pattern \"^(latest)|(([1-9])\\.([0-9]+)\\.([0-9]+)(\\-[0-9a-z-]+(\\.[0-9a-z-]+)*)?(\\+[0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*)?)$\"" . into ()) ;
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str> for DevfileSchemaVersion222ParentVariant0Version {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant0Version
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant0Version
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de> for DevfileSchemaVersion222ParentVariant0Version {
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "`DevfileSchemaVersion222ParentVariant1CommandsItem`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"exec\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"apply\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"composite\""]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  ],"]
#[doc = "  \"required\": ["]
#[doc = "    \"id\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"apply\": {"]
#[doc = "      \"description\": \"Command that consists in applying a given component definition, typically bound to a devworkspace event.\\n\\nFor example, when an `apply` command is bound to a `preStart` event, and references a `container` component, it will start the container as a K8S initContainer in the devworkspace POD, unless the component has its `dedicatedPod` field set to `true`.\\n\\nWhen no `apply` command exist for a given component, it is assumed the component will be applied at devworkspace start by default, unless `deployByDefault` for that component is set to false.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"component\": {"]
#[doc = "          \"description\": \"Describes component that will be applied\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"group\": {"]
#[doc = "          \"description\": \"Defines the group this command is part of\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"properties\": {"]
#[doc = "            \"isDefault\": {"]
#[doc = "              \"description\": \"Identifies the default command for a given group kind\","]
#[doc = "              \"type\": \"boolean\""]
#[doc = "            },"]
#[doc = "            \"kind\": {"]
#[doc = "              \"description\": \"Kind of group the command is part of\","]
#[doc = "              \"type\": \"string\","]
#[doc = "              \"enum\": ["]
#[doc = "                \"build\","]
#[doc = "                \"run\","]
#[doc = "                \"test\","]
#[doc = "                \"debug\","]
#[doc = "                \"deploy\""]
#[doc = "              ]"]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"label\": {"]
#[doc = "          \"description\": \"Optional label that provides a label for this command to be used in Editor UI menus for example\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"attributes\": {"]
#[doc = "      \"description\": \"Map of implementation-dependant free-form YAML attributes.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": true"]
#[doc = "    },"]
#[doc = "    \"composite\": {"]
#[doc = "      \"description\": \"Composite command that allows executing several sub-commands either sequentially or concurrently\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"commands\": {"]
#[doc = "          \"description\": \"The commands that comprise this composite command\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"group\": {"]
#[doc = "          \"description\": \"Defines the group this command is part of\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"properties\": {"]
#[doc = "            \"isDefault\": {"]
#[doc = "              \"description\": \"Identifies the default command for a given group kind\","]
#[doc = "              \"type\": \"boolean\""]
#[doc = "            },"]
#[doc = "            \"kind\": {"]
#[doc = "              \"description\": \"Kind of group the command is part of\","]
#[doc = "              \"type\": \"string\","]
#[doc = "              \"enum\": ["]
#[doc = "                \"build\","]
#[doc = "                \"run\","]
#[doc = "                \"test\","]
#[doc = "                \"debug\","]
#[doc = "                \"deploy\""]
#[doc = "              ]"]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"label\": {"]
#[doc = "          \"description\": \"Optional label that provides a label for this command to be used in Editor UI menus for example\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"parallel\": {"]
#[doc = "          \"description\": \"Indicates if the sub-commands should be executed concurrently\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"exec\": {"]
#[doc = "      \"description\": \"CLI Command executed in an existing component container\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"commandLine\": {"]
#[doc = "          \"description\": \"The actual command-line string\\n\\nSpecial variables that can be used:\\n\\n - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping.\\n\\n - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"component\": {"]
#[doc = "          \"description\": \"Describes component to which given action relates\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"env\": {"]
#[doc = "          \"description\": \"Optional list of environment variables that have to be set before running the command\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"required\": ["]
#[doc = "              \"name\""]
#[doc = "            ],"]
#[doc = "            \"properties\": {"]
#[doc = "              \"name\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              },"]
#[doc = "              \"value\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"additionalProperties\": false"]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"group\": {"]
#[doc = "          \"description\": \"Defines the group this command is part of\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"properties\": {"]
#[doc = "            \"isDefault\": {"]
#[doc = "              \"description\": \"Identifies the default command for a given group kind\","]
#[doc = "              \"type\": \"boolean\""]
#[doc = "            },"]
#[doc = "            \"kind\": {"]
#[doc = "              \"description\": \"Kind of group the command is part of\","]
#[doc = "              \"type\": \"string\","]
#[doc = "              \"enum\": ["]
#[doc = "                \"build\","]
#[doc = "                \"run\","]
#[doc = "                \"test\","]
#[doc = "                \"debug\","]
#[doc = "                \"deploy\""]
#[doc = "              ]"]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"hotReloadCapable\": {"]
#[doc = "          \"description\": \"Specify whether the command is restarted or not when the source code changes. If set to `true` the command won't be restarted. A *hotReloadCapable* `run` or `debug` command is expected to handle file changes on its own and won't be restarted. A *hotReloadCapable* `build` command is expected to be executed only once and won't be executed again. This field is taken into account only for commands `build`, `run` and `debug` with `isDefault` set to `true`.\\n\\nDefault value is `false`\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"label\": {"]
#[doc = "          \"description\": \"Optional label that provides a label for this command to be used in Editor UI menus for example\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"workingDir\": {"]
#[doc = "          \"description\": \"Working directory where the command should be executed\\n\\nSpecial variables that can be used:\\n\\n - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping.\\n\\n - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"description\": \"Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"maxLength\": 63,"]
#[doc = "      \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged, deny_unknown_fields)]
pub enum DevfileSchemaVersion222ParentVariant1CommandsItem {
    Variant0 {
        #[doc = "Map of implementation-dependant free-form YAML attributes."]
        #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
        attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
        exec: DevfileSchemaVersion222ParentVariant1CommandsItemVariant0Exec,
        #[doc = "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events."]
        id: DevfileSchemaVersion222ParentVariant1CommandsItemVariant0Id,
    },
    Variant1 {
        apply: DevfileSchemaVersion222ParentVariant1CommandsItemVariant1Apply,
        #[doc = "Map of implementation-dependant free-form YAML attributes."]
        #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
        attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
        #[doc = "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events."]
        id: DevfileSchemaVersion222ParentVariant1CommandsItemVariant1Id,
    },
    Variant2 {
        #[doc = "Map of implementation-dependant free-form YAML attributes."]
        #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
        attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
        composite: DevfileSchemaVersion222ParentVariant1CommandsItemVariant2Composite,
        #[doc = "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events."]
        id: DevfileSchemaVersion222ParentVariant1CommandsItemVariant2Id,
    },
}
impl ::std::convert::From<&Self> for DevfileSchemaVersion222ParentVariant1CommandsItem {
    fn from(value: &DevfileSchemaVersion222ParentVariant1CommandsItem) -> Self {
        value.clone()
    }
}
#[doc = "CLI Command executed in an existing component container"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"CLI Command executed in an existing component container\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"commandLine\": {"]
#[doc = "      \"description\": \"The actual command-line string\\n\\nSpecial variables that can be used:\\n\\n - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping.\\n\\n - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"component\": {"]
#[doc = "      \"description\": \"Describes component to which given action relates\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"env\": {"]
#[doc = "      \"description\": \"Optional list of environment variables that have to be set before running the command\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"object\","]
#[doc = "        \"required\": ["]
#[doc = "          \"name\""]
#[doc = "        ],"]
#[doc = "        \"properties\": {"]
#[doc = "          \"name\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          },"]
#[doc = "          \"value\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"additionalProperties\": false"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"group\": {"]
#[doc = "      \"description\": \"Defines the group this command is part of\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"isDefault\": {"]
#[doc = "          \"description\": \"Identifies the default command for a given group kind\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"kind\": {"]
#[doc = "          \"description\": \"Kind of group the command is part of\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"enum\": ["]
#[doc = "            \"build\","]
#[doc = "            \"run\","]
#[doc = "            \"test\","]
#[doc = "            \"debug\","]
#[doc = "            \"deploy\""]
#[doc = "          ]"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"hotReloadCapable\": {"]
#[doc = "      \"description\": \"Specify whether the command is restarted or not when the source code changes. If set to `true` the command won't be restarted. A *hotReloadCapable* `run` or `debug` command is expected to handle file changes on its own and won't be restarted. A *hotReloadCapable* `build` command is expected to be executed only once and won't be executed again. This field is taken into account only for commands `build`, `run` and `debug` with `isDefault` set to `true`.\\n\\nDefault value is `false`\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"label\": {"]
#[doc = "      \"description\": \"Optional label that provides a label for this command to be used in Editor UI menus for example\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"workingDir\": {"]
#[doc = "      \"description\": \"Working directory where the command should be executed\\n\\nSpecial variables that can be used:\\n\\n - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping.\\n\\n - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant1CommandsItemVariant0Exec {
    #[doc = "The actual command-line string\n\nSpecial variables that can be used:\n\n - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping.\n\n - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one."]
    #[serde(
        rename = "commandLine",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub command_line: ::std::option::Option<::std::string::String>,
    #[doc = "Describes component to which given action relates"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub component: ::std::option::Option<::std::string::String>,
    #[doc = "Optional list of environment variables that have to be set before running the command"]
    #[serde(default, skip_serializing_if = "::std::vec::Vec::is_empty")]
    pub env: ::std::vec::Vec<DevfileSchemaVersion222ParentVariant1CommandsItemVariant0ExecEnvItem>,
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub group:
        ::std::option::Option<DevfileSchemaVersion222ParentVariant1CommandsItemVariant0ExecGroup>,
    #[doc = "Specify whether the command is restarted or not when the source code changes. If set to `true` the command won't be restarted. A *hotReloadCapable* `run` or `debug` command is expected to handle file changes on its own and won't be restarted. A *hotReloadCapable* `build` command is expected to be executed only once and won't be executed again. This field is taken into account only for commands `build`, `run` and `debug` with `isDefault` set to `true`.\n\nDefault value is `false`"]
    #[serde(
        rename = "hotReloadCapable",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub hot_reload_capable: ::std::option::Option<bool>,
    #[doc = "Optional label that provides a label for this command to be used in Editor UI menus for example"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub label: ::std::option::Option<::std::string::String>,
    #[doc = "Working directory where the command should be executed\n\nSpecial variables that can be used:\n\n - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping.\n\n - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one."]
    #[serde(
        rename = "workingDir",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub working_dir: ::std::option::Option<::std::string::String>,
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant1CommandsItemVariant0Exec>
    for DevfileSchemaVersion222ParentVariant1CommandsItemVariant0Exec
{
    fn from(value: &DevfileSchemaVersion222ParentVariant1CommandsItemVariant0Exec) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant1CommandsItemVariant0Exec {
    pub fn builder() -> builder::DevfileSchemaVersion222ParentVariant1CommandsItemVariant0Exec {
        Default::default()
    }
}
#[doc = "`DevfileSchemaVersion222ParentVariant1CommandsItemVariant0ExecEnvItem`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"name\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"name\": {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"value\": {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
pub struct DevfileSchemaVersion222ParentVariant1CommandsItemVariant0ExecEnvItem {
    pub name: ::std::string::String,
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub value: ::std::option::Option<::std::string::String>,
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant1CommandsItemVariant0ExecEnvItem>
    for DevfileSchemaVersion222ParentVariant1CommandsItemVariant0ExecEnvItem
{
    fn from(value: &DevfileSchemaVersion222ParentVariant1CommandsItemVariant0ExecEnvItem) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant1CommandsItemVariant0ExecEnvItem {
    pub fn builder() -> builder::DevfileSchemaVersion222ParentVariant1CommandsItemVariant0ExecEnvItem
    {
        Default::default()
    }
}
#[doc = "Defines the group this command is part of"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Defines the group this command is part of\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"isDefault\": {"]
#[doc = "      \"description\": \"Identifies the default command for a given group kind\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"kind\": {"]
#[doc = "      \"description\": \"Kind of group the command is part of\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"build\","]
#[doc = "        \"run\","]
#[doc = "        \"test\","]
#[doc = "        \"debug\","]
#[doc = "        \"deploy\""]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant1CommandsItemVariant0ExecGroup {
    #[doc = "Identifies the default command for a given group kind"]
    #[serde(
        rename = "isDefault",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub is_default: ::std::option::Option<bool>,
    #[doc = "Kind of group the command is part of"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub kind: ::std::option::Option<
        DevfileSchemaVersion222ParentVariant1CommandsItemVariant0ExecGroupKind,
    >,
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant1CommandsItemVariant0ExecGroup>
    for DevfileSchemaVersion222ParentVariant1CommandsItemVariant0ExecGroup
{
    fn from(value: &DevfileSchemaVersion222ParentVariant1CommandsItemVariant0ExecGroup) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant1CommandsItemVariant0ExecGroup {
    pub fn builder() -> builder::DevfileSchemaVersion222ParentVariant1CommandsItemVariant0ExecGroup
    {
        Default::default()
    }
}
#[doc = "Kind of group the command is part of"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Kind of group the command is part of\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"build\","]
#[doc = "    \"run\","]
#[doc = "    \"test\","]
#[doc = "    \"debug\","]
#[doc = "    \"deploy\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DevfileSchemaVersion222ParentVariant1CommandsItemVariant0ExecGroupKind {
    #[serde(rename = "build")]
    Build,
    #[serde(rename = "run")]
    Run,
    #[serde(rename = "test")]
    Test,
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "deploy")]
    Deploy,
}
impl ::std::convert::From<&Self>
    for DevfileSchemaVersion222ParentVariant1CommandsItemVariant0ExecGroupKind
{
    fn from(
        value: &DevfileSchemaVersion222ParentVariant1CommandsItemVariant0ExecGroupKind,
    ) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display
    for DevfileSchemaVersion222ParentVariant1CommandsItemVariant0ExecGroupKind
{
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Build => f.write_str("build"),
            Self::Run => f.write_str("run"),
            Self::Test => f.write_str("test"),
            Self::Debug => f.write_str("debug"),
            Self::Deploy => f.write_str("deploy"),
        }
    }
}
impl ::std::str::FromStr
    for DevfileSchemaVersion222ParentVariant1CommandsItemVariant0ExecGroupKind
{
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        match value {
            "build" => Ok(Self::Build),
            "run" => Ok(Self::Run),
            "test" => Ok(Self::Test),
            "debug" => Ok(Self::Debug),
            "deploy" => Ok(Self::Deploy),
            _ => Err("invalid value".into()),
        }
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ParentVariant1CommandsItemVariant0ExecGroupKind
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant1CommandsItemVariant0ExecGroupKind
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant1CommandsItemVariant0ExecGroupKind
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant1CommandsItemVariant0Id(::std::string::String);
impl ::std::ops::Deref for DevfileSchemaVersion222ParentVariant1CommandsItemVariant0Id {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222ParentVariant1CommandsItemVariant0Id>
    for ::std::string::String
{
    fn from(value: DevfileSchemaVersion222ParentVariant1CommandsItemVariant0Id) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant1CommandsItemVariant0Id>
    for DevfileSchemaVersion222ParentVariant1CommandsItemVariant0Id
{
    fn from(value: &DevfileSchemaVersion222ParentVariant1CommandsItemVariant0Id) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for DevfileSchemaVersion222ParentVariant1CommandsItemVariant0Id {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str> for DevfileSchemaVersion222ParentVariant1CommandsItemVariant0Id {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant1CommandsItemVariant0Id
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant1CommandsItemVariant0Id
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de>
    for DevfileSchemaVersion222ParentVariant1CommandsItemVariant0Id
{
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Command that consists in applying a given component definition, typically bound to a devworkspace event.\n\nFor example, when an `apply` command is bound to a `preStart` event, and references a `container` component, it will start the container as a K8S initContainer in the devworkspace POD, unless the component has its `dedicatedPod` field set to `true`.\n\nWhen no `apply` command exist for a given component, it is assumed the component will be applied at devworkspace start by default, unless `deployByDefault` for that component is set to false."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Command that consists in applying a given component definition, typically bound to a devworkspace event.\\n\\nFor example, when an `apply` command is bound to a `preStart` event, and references a `container` component, it will start the container as a K8S initContainer in the devworkspace POD, unless the component has its `dedicatedPod` field set to `true`.\\n\\nWhen no `apply` command exist for a given component, it is assumed the component will be applied at devworkspace start by default, unless `deployByDefault` for that component is set to false.\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"component\": {"]
#[doc = "      \"description\": \"Describes component that will be applied\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"group\": {"]
#[doc = "      \"description\": \"Defines the group this command is part of\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"isDefault\": {"]
#[doc = "          \"description\": \"Identifies the default command for a given group kind\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"kind\": {"]
#[doc = "          \"description\": \"Kind of group the command is part of\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"enum\": ["]
#[doc = "            \"build\","]
#[doc = "            \"run\","]
#[doc = "            \"test\","]
#[doc = "            \"debug\","]
#[doc = "            \"deploy\""]
#[doc = "          ]"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"label\": {"]
#[doc = "      \"description\": \"Optional label that provides a label for this command to be used in Editor UI menus for example\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant1CommandsItemVariant1Apply {
    #[doc = "Describes component that will be applied"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub component: ::std::option::Option<::std::string::String>,
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub group:
        ::std::option::Option<DevfileSchemaVersion222ParentVariant1CommandsItemVariant1ApplyGroup>,
    #[doc = "Optional label that provides a label for this command to be used in Editor UI menus for example"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub label: ::std::option::Option<::std::string::String>,
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant1CommandsItemVariant1Apply>
    for DevfileSchemaVersion222ParentVariant1CommandsItemVariant1Apply
{
    fn from(value: &DevfileSchemaVersion222ParentVariant1CommandsItemVariant1Apply) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant1CommandsItemVariant1Apply {
    pub fn builder() -> builder::DevfileSchemaVersion222ParentVariant1CommandsItemVariant1Apply {
        Default::default()
    }
}
#[doc = "Defines the group this command is part of"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Defines the group this command is part of\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"isDefault\": {"]
#[doc = "      \"description\": \"Identifies the default command for a given group kind\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"kind\": {"]
#[doc = "      \"description\": \"Kind of group the command is part of\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"build\","]
#[doc = "        \"run\","]
#[doc = "        \"test\","]
#[doc = "        \"debug\","]
#[doc = "        \"deploy\""]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant1CommandsItemVariant1ApplyGroup {
    #[doc = "Identifies the default command for a given group kind"]
    #[serde(
        rename = "isDefault",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub is_default: ::std::option::Option<bool>,
    #[doc = "Kind of group the command is part of"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub kind: ::std::option::Option<
        DevfileSchemaVersion222ParentVariant1CommandsItemVariant1ApplyGroupKind,
    >,
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant1CommandsItemVariant1ApplyGroup>
    for DevfileSchemaVersion222ParentVariant1CommandsItemVariant1ApplyGroup
{
    fn from(value: &DevfileSchemaVersion222ParentVariant1CommandsItemVariant1ApplyGroup) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant1CommandsItemVariant1ApplyGroup {
    pub fn builder() -> builder::DevfileSchemaVersion222ParentVariant1CommandsItemVariant1ApplyGroup
    {
        Default::default()
    }
}
#[doc = "Kind of group the command is part of"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Kind of group the command is part of\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"build\","]
#[doc = "    \"run\","]
#[doc = "    \"test\","]
#[doc = "    \"debug\","]
#[doc = "    \"deploy\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DevfileSchemaVersion222ParentVariant1CommandsItemVariant1ApplyGroupKind {
    #[serde(rename = "build")]
    Build,
    #[serde(rename = "run")]
    Run,
    #[serde(rename = "test")]
    Test,
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "deploy")]
    Deploy,
}
impl ::std::convert::From<&Self>
    for DevfileSchemaVersion222ParentVariant1CommandsItemVariant1ApplyGroupKind
{
    fn from(
        value: &DevfileSchemaVersion222ParentVariant1CommandsItemVariant1ApplyGroupKind,
    ) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display
    for DevfileSchemaVersion222ParentVariant1CommandsItemVariant1ApplyGroupKind
{
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Build => f.write_str("build"),
            Self::Run => f.write_str("run"),
            Self::Test => f.write_str("test"),
            Self::Debug => f.write_str("debug"),
            Self::Deploy => f.write_str("deploy"),
        }
    }
}
impl ::std::str::FromStr
    for DevfileSchemaVersion222ParentVariant1CommandsItemVariant1ApplyGroupKind
{
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        match value {
            "build" => Ok(Self::Build),
            "run" => Ok(Self::Run),
            "test" => Ok(Self::Test),
            "debug" => Ok(Self::Debug),
            "deploy" => Ok(Self::Deploy),
            _ => Err("invalid value".into()),
        }
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ParentVariant1CommandsItemVariant1ApplyGroupKind
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant1CommandsItemVariant1ApplyGroupKind
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant1CommandsItemVariant1ApplyGroupKind
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant1CommandsItemVariant1Id(::std::string::String);
impl ::std::ops::Deref for DevfileSchemaVersion222ParentVariant1CommandsItemVariant1Id {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222ParentVariant1CommandsItemVariant1Id>
    for ::std::string::String
{
    fn from(value: DevfileSchemaVersion222ParentVariant1CommandsItemVariant1Id) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant1CommandsItemVariant1Id>
    for DevfileSchemaVersion222ParentVariant1CommandsItemVariant1Id
{
    fn from(value: &DevfileSchemaVersion222ParentVariant1CommandsItemVariant1Id) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for DevfileSchemaVersion222ParentVariant1CommandsItemVariant1Id {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str> for DevfileSchemaVersion222ParentVariant1CommandsItemVariant1Id {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant1CommandsItemVariant1Id
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant1CommandsItemVariant1Id
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de>
    for DevfileSchemaVersion222ParentVariant1CommandsItemVariant1Id
{
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Composite command that allows executing several sub-commands either sequentially or concurrently"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Composite command that allows executing several sub-commands either sequentially or concurrently\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"commands\": {"]
#[doc = "      \"description\": \"The commands that comprise this composite command\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"group\": {"]
#[doc = "      \"description\": \"Defines the group this command is part of\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"isDefault\": {"]
#[doc = "          \"description\": \"Identifies the default command for a given group kind\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"kind\": {"]
#[doc = "          \"description\": \"Kind of group the command is part of\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"enum\": ["]
#[doc = "            \"build\","]
#[doc = "            \"run\","]
#[doc = "            \"test\","]
#[doc = "            \"debug\","]
#[doc = "            \"deploy\""]
#[doc = "          ]"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"label\": {"]
#[doc = "      \"description\": \"Optional label that provides a label for this command to be used in Editor UI menus for example\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"parallel\": {"]
#[doc = "      \"description\": \"Indicates if the sub-commands should be executed concurrently\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant1CommandsItemVariant2Composite {
    #[doc = "The commands that comprise this composite command"]
    #[serde(default, skip_serializing_if = "::std::vec::Vec::is_empty")]
    pub commands: ::std::vec::Vec<::std::string::String>,
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub group: ::std::option::Option<
        DevfileSchemaVersion222ParentVariant1CommandsItemVariant2CompositeGroup,
    >,
    #[doc = "Optional label that provides a label for this command to be used in Editor UI menus for example"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub label: ::std::option::Option<::std::string::String>,
    #[doc = "Indicates if the sub-commands should be executed concurrently"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub parallel: ::std::option::Option<bool>,
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant1CommandsItemVariant2Composite>
    for DevfileSchemaVersion222ParentVariant1CommandsItemVariant2Composite
{
    fn from(value: &DevfileSchemaVersion222ParentVariant1CommandsItemVariant2Composite) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant1CommandsItemVariant2Composite {
    pub fn builder() -> builder::DevfileSchemaVersion222ParentVariant1CommandsItemVariant2Composite
    {
        Default::default()
    }
}
#[doc = "Defines the group this command is part of"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Defines the group this command is part of\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"isDefault\": {"]
#[doc = "      \"description\": \"Identifies the default command for a given group kind\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"kind\": {"]
#[doc = "      \"description\": \"Kind of group the command is part of\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"build\","]
#[doc = "        \"run\","]
#[doc = "        \"test\","]
#[doc = "        \"debug\","]
#[doc = "        \"deploy\""]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant1CommandsItemVariant2CompositeGroup {
    #[doc = "Identifies the default command for a given group kind"]
    #[serde(
        rename = "isDefault",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub is_default: ::std::option::Option<bool>,
    #[doc = "Kind of group the command is part of"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub kind: ::std::option::Option<
        DevfileSchemaVersion222ParentVariant1CommandsItemVariant2CompositeGroupKind,
    >,
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant1CommandsItemVariant2CompositeGroup>
    for DevfileSchemaVersion222ParentVariant1CommandsItemVariant2CompositeGroup
{
    fn from(
        value: &DevfileSchemaVersion222ParentVariant1CommandsItemVariant2CompositeGroup,
    ) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant1CommandsItemVariant2CompositeGroup {
    pub fn builder(
    ) -> builder::DevfileSchemaVersion222ParentVariant1CommandsItemVariant2CompositeGroup {
        Default::default()
    }
}
#[doc = "Kind of group the command is part of"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Kind of group the command is part of\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"build\","]
#[doc = "    \"run\","]
#[doc = "    \"test\","]
#[doc = "    \"debug\","]
#[doc = "    \"deploy\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DevfileSchemaVersion222ParentVariant1CommandsItemVariant2CompositeGroupKind {
    #[serde(rename = "build")]
    Build,
    #[serde(rename = "run")]
    Run,
    #[serde(rename = "test")]
    Test,
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "deploy")]
    Deploy,
}
impl ::std::convert::From<&Self>
    for DevfileSchemaVersion222ParentVariant1CommandsItemVariant2CompositeGroupKind
{
    fn from(
        value: &DevfileSchemaVersion222ParentVariant1CommandsItemVariant2CompositeGroupKind,
    ) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display
    for DevfileSchemaVersion222ParentVariant1CommandsItemVariant2CompositeGroupKind
{
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Build => f.write_str("build"),
            Self::Run => f.write_str("run"),
            Self::Test => f.write_str("test"),
            Self::Debug => f.write_str("debug"),
            Self::Deploy => f.write_str("deploy"),
        }
    }
}
impl ::std::str::FromStr
    for DevfileSchemaVersion222ParentVariant1CommandsItemVariant2CompositeGroupKind
{
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        match value {
            "build" => Ok(Self::Build),
            "run" => Ok(Self::Run),
            "test" => Ok(Self::Test),
            "debug" => Ok(Self::Debug),
            "deploy" => Ok(Self::Deploy),
            _ => Err("invalid value".into()),
        }
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ParentVariant1CommandsItemVariant2CompositeGroupKind
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant1CommandsItemVariant2CompositeGroupKind
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant1CommandsItemVariant2CompositeGroupKind
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant1CommandsItemVariant2Id(::std::string::String);
impl ::std::ops::Deref for DevfileSchemaVersion222ParentVariant1CommandsItemVariant2Id {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222ParentVariant1CommandsItemVariant2Id>
    for ::std::string::String
{
    fn from(value: DevfileSchemaVersion222ParentVariant1CommandsItemVariant2Id) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant1CommandsItemVariant2Id>
    for DevfileSchemaVersion222ParentVariant1CommandsItemVariant2Id
{
    fn from(value: &DevfileSchemaVersion222ParentVariant1CommandsItemVariant2Id) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for DevfileSchemaVersion222ParentVariant1CommandsItemVariant2Id {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str> for DevfileSchemaVersion222ParentVariant1CommandsItemVariant2Id {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant1CommandsItemVariant2Id
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant1CommandsItemVariant2Id
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de>
    for DevfileSchemaVersion222ParentVariant1CommandsItemVariant2Id
{
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "`DevfileSchemaVersion222ParentVariant1ComponentsItem`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"container\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"kubernetes\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"openshift\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"volume\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"image\""]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  ],"]
#[doc = "  \"required\": ["]
#[doc = "    \"name\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"attributes\": {"]
#[doc = "      \"description\": \"Map of implementation-dependant free-form YAML attributes.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": true"]
#[doc = "    },"]
#[doc = "    \"container\": {"]
#[doc = "      \"description\": \"Allows adding and configuring devworkspace-related containers\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"annotation\": {"]
#[doc = "          \"description\": \"Annotations that should be added to specific resources for this container\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"properties\": {"]
#[doc = "            \"deployment\": {"]
#[doc = "              \"description\": \"Annotations to be added to deployment\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"additionalProperties\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"service\": {"]
#[doc = "              \"description\": \"Annotations to be added to service\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"additionalProperties\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"args\": {"]
#[doc = "          \"description\": \"The arguments to supply to the command running the dockerimage component. The arguments are supplied either to the default command provided in the image or to the overridden command.\\n\\nDefaults to an empty array, meaning use whatever is defined in the image.\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"command\": {"]
#[doc = "          \"description\": \"The command to run in the dockerimage component instead of the default one provided in the image.\\n\\nDefaults to an empty array, meaning use whatever is defined in the image.\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"cpuLimit\": {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"cpuRequest\": {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"dedicatedPod\": {"]
#[doc = "          \"description\": \"Specify if a container should run in its own separated pod, instead of running as part of the main development environment pod.\\n\\nDefault value is `false`\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"endpoints\": {"]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"required\": ["]
#[doc = "              \"name\""]
#[doc = "            ],"]
#[doc = "            \"properties\": {"]
#[doc = "              \"annotation\": {"]
#[doc = "                \"description\": \"Annotations to be added to Kubernetes Ingress or Openshift Route\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"additionalProperties\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"attributes\": {"]
#[doc = "                \"description\": \"Map of implementation-dependant string-based free-form attributes.\\n\\nExamples of Che-specific attributes:\\n- cookiesAuthEnabled: \\\"true\\\" / \\\"false\\\",\\n- type: \\\"terminal\\\" / \\\"ide\\\" / \\\"ide-dev\\\",\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"additionalProperties\": true"]
#[doc = "              },"]
#[doc = "              \"exposure\": {"]
#[doc = "                \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "                \"type\": \"string\","]
#[doc = "                \"enum\": ["]
#[doc = "                  \"public\","]
#[doc = "                  \"internal\","]
#[doc = "                  \"none\""]
#[doc = "                ]"]
#[doc = "              },"]
#[doc = "              \"name\": {"]
#[doc = "                \"type\": \"string\","]
#[doc = "                \"maxLength\": 15,"]
#[doc = "                \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "              },"]
#[doc = "              \"path\": {"]
#[doc = "                \"description\": \"Path of the endpoint URL\","]
#[doc = "                \"type\": \"string\""]
#[doc = "              },"]
#[doc = "              \"protocol\": {"]
#[doc = "                \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "                \"type\": \"string\","]
#[doc = "                \"enum\": ["]
#[doc = "                  \"http\","]
#[doc = "                  \"https\","]
#[doc = "                  \"ws\","]
#[doc = "                  \"wss\","]
#[doc = "                  \"tcp\","]
#[doc = "                  \"udp\""]
#[doc = "                ]"]
#[doc = "              },"]
#[doc = "              \"secure\": {"]
#[doc = "                \"description\": \"Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.\","]
#[doc = "                \"type\": \"boolean\""]
#[doc = "              },"]
#[doc = "              \"targetPort\": {"]
#[doc = "                \"description\": \"Port number to be used within the container component. The same port cannot be used by two different container components.\","]
#[doc = "                \"type\": \"integer\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"additionalProperties\": false"]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"env\": {"]
#[doc = "          \"description\": \"Environment variables used in this container.\\n\\nThe following variables are reserved and cannot be overridden via env:\\n\\n - `$PROJECTS_ROOT`\\n\\n - `$PROJECT_SOURCE`\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"required\": ["]
#[doc = "              \"name\""]
#[doc = "            ],"]
#[doc = "            \"properties\": {"]
#[doc = "              \"name\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              },"]
#[doc = "              \"value\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"additionalProperties\": false"]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"image\": {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"memoryLimit\": {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"memoryRequest\": {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"mountSources\": {"]
#[doc = "          \"description\": \"Toggles whether or not the project source code should be mounted in the component.\\n\\nDefaults to true for all component types except plugins and components that set `dedicatedPod` to true.\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"sourceMapping\": {"]
#[doc = "          \"description\": \"Optional specification of the path in the container where project sources should be transferred/mounted when `mountSources` is `true`. When omitted, the default value of /projects is used.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"volumeMounts\": {"]
#[doc = "          \"description\": \"List of volumes mounts that should be mounted is this container.\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"description\": \"Volume that should be mounted to a component container\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"required\": ["]
#[doc = "              \"name\""]
#[doc = "            ],"]
#[doc = "            \"properties\": {"]
#[doc = "              \"name\": {"]
#[doc = "                \"description\": \"The volume mount name is the name of an existing `Volume` component. If several containers mount the same volume name then they will reuse the same volume and will be able to access to the same files.\","]
#[doc = "                \"type\": \"string\","]
#[doc = "                \"maxLength\": 63,"]
#[doc = "                \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "              },"]
#[doc = "              \"path\": {"]
#[doc = "                \"description\": \"The path in the component container where the volume should be mounted. If not path is mentioned, default path is the is `/<name>`.\","]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"additionalProperties\": false"]
#[doc = "          }"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"image\": {"]
#[doc = "      \"description\": \"Allows specifying the definition of an image for outer loop builds\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"required\": ["]
#[doc = "            \"dockerfile\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"required\": ["]
#[doc = "            \"autoBuild\""]
#[doc = "          ]"]
#[doc = "        }"]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"autoBuild\": {"]
#[doc = "          \"description\": \"Defines if the image should be built during startup.\\n\\nDefault value is `false`\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"dockerfile\": {"]
#[doc = "          \"description\": \"Allows specifying dockerfile type build\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"required\": ["]
#[doc = "                \"uri\""]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"required\": ["]
#[doc = "                \"devfileRegistry\""]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"required\": ["]
#[doc = "                \"git\""]
#[doc = "              ]"]
#[doc = "            }"]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"args\": {"]
#[doc = "              \"description\": \"The arguments to supply to the dockerfile build.\","]
#[doc = "              \"type\": \"array\","]
#[doc = "              \"items\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"buildContext\": {"]
#[doc = "              \"description\": \"Path of source directory to establish build context. Defaults to ${PROJECT_SOURCE} in the container\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"devfileRegistry\": {"]
#[doc = "              \"description\": \"Dockerfile's Devfile Registry source\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"properties\": {"]
#[doc = "                \"id\": {"]
#[doc = "                  \"description\": \"Id in a devfile registry that contains a Dockerfile. The src in the OCI registry required for the Dockerfile build will be downloaded for building the image.\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                },"]
#[doc = "                \"registryUrl\": {"]
#[doc = "                  \"description\": \"Devfile Registry URL to pull the Dockerfile from when using the Devfile Registry as Dockerfile src. To ensure the Dockerfile gets resolved consistently in different environments, it is recommended to always specify the `devfileRegistryUrl` when `Id` is used.\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            },"]
#[doc = "            \"git\": {"]
#[doc = "              \"description\": \"Dockerfile's Git source\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"properties\": {"]
#[doc = "                \"checkoutFrom\": {"]
#[doc = "                  \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"remote\": {"]
#[doc = "                      \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"revision\": {"]
#[doc = "                      \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                },"]
#[doc = "                \"fileLocation\": {"]
#[doc = "                  \"description\": \"Location of the Dockerfile in the Git repository when using git as Dockerfile src. Defaults to Dockerfile.\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                },"]
#[doc = "                \"remotes\": {"]
#[doc = "                  \"description\": \"The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"additionalProperties\": {"]
#[doc = "                    \"type\": \"string\""]
#[doc = "                  }"]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            },"]
#[doc = "            \"rootRequired\": {"]
#[doc = "              \"description\": \"Specify if a privileged builder pod is required.\\n\\nDefault value is `false`\","]
#[doc = "              \"type\": \"boolean\""]
#[doc = "            },"]
#[doc = "            \"uri\": {"]
#[doc = "              \"description\": \"URI Reference of a Dockerfile. It can be a full URL or a relative URI from the current devfile as the base URI.\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"imageName\": {"]
#[doc = "          \"description\": \"Name of the image for the resulting outerloop build\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"kubernetes\": {"]
#[doc = "      \"description\": \"Allows importing into the devworkspace the Kubernetes resources defined in a given manifest. For example this allows reusing the Kubernetes definitions used to deploy some runtime components in production.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"required\": ["]
#[doc = "            \"uri\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"required\": ["]
#[doc = "            \"inlined\""]
#[doc = "          ]"]
#[doc = "        }"]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"deployByDefault\": {"]
#[doc = "          \"description\": \"Defines if the component should be deployed during startup.\\n\\nDefault value is `false`\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"endpoints\": {"]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"required\": ["]
#[doc = "              \"name\""]
#[doc = "            ],"]
#[doc = "            \"properties\": {"]
#[doc = "              \"annotation\": {"]
#[doc = "                \"description\": \"Annotations to be added to Kubernetes Ingress or Openshift Route\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"additionalProperties\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"attributes\": {"]
#[doc = "                \"description\": \"Map of implementation-dependant string-based free-form attributes.\\n\\nExamples of Che-specific attributes:\\n- cookiesAuthEnabled: \\\"true\\\" / \\\"false\\\",\\n- type: \\\"terminal\\\" / \\\"ide\\\" / \\\"ide-dev\\\",\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"additionalProperties\": true"]
#[doc = "              },"]
#[doc = "              \"exposure\": {"]
#[doc = "                \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "                \"type\": \"string\","]
#[doc = "                \"enum\": ["]
#[doc = "                  \"public\","]
#[doc = "                  \"internal\","]
#[doc = "                  \"none\""]
#[doc = "                ]"]
#[doc = "              },"]
#[doc = "              \"name\": {"]
#[doc = "                \"type\": \"string\","]
#[doc = "                \"maxLength\": 15,"]
#[doc = "                \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "              },"]
#[doc = "              \"path\": {"]
#[doc = "                \"description\": \"Path of the endpoint URL\","]
#[doc = "                \"type\": \"string\""]
#[doc = "              },"]
#[doc = "              \"protocol\": {"]
#[doc = "                \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "                \"type\": \"string\","]
#[doc = "                \"enum\": ["]
#[doc = "                  \"http\","]
#[doc = "                  \"https\","]
#[doc = "                  \"ws\","]
#[doc = "                  \"wss\","]
#[doc = "                  \"tcp\","]
#[doc = "                  \"udp\""]
#[doc = "                ]"]
#[doc = "              },"]
#[doc = "              \"secure\": {"]
#[doc = "                \"description\": \"Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.\","]
#[doc = "                \"type\": \"boolean\""]
#[doc = "              },"]
#[doc = "              \"targetPort\": {"]
#[doc = "                \"description\": \"Port number to be used within the container component. The same port cannot be used by two different container components.\","]
#[doc = "                \"type\": \"integer\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"additionalProperties\": false"]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"inlined\": {"]
#[doc = "          \"description\": \"Inlined manifest\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"uri\": {"]
#[doc = "          \"description\": \"Location in a file fetched from a uri.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"description\": \"Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin.\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"maxLength\": 63,"]
#[doc = "      \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "    },"]
#[doc = "    \"openshift\": {"]
#[doc = "      \"description\": \"Allows importing into the devworkspace the OpenShift resources defined in a given manifest. For example this allows reusing the OpenShift definitions used to deploy some runtime components in production.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"required\": ["]
#[doc = "            \"uri\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"required\": ["]
#[doc = "            \"inlined\""]
#[doc = "          ]"]
#[doc = "        }"]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"deployByDefault\": {"]
#[doc = "          \"description\": \"Defines if the component should be deployed during startup.\\n\\nDefault value is `false`\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"endpoints\": {"]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"required\": ["]
#[doc = "              \"name\""]
#[doc = "            ],"]
#[doc = "            \"properties\": {"]
#[doc = "              \"annotation\": {"]
#[doc = "                \"description\": \"Annotations to be added to Kubernetes Ingress or Openshift Route\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"additionalProperties\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"attributes\": {"]
#[doc = "                \"description\": \"Map of implementation-dependant string-based free-form attributes.\\n\\nExamples of Che-specific attributes:\\n- cookiesAuthEnabled: \\\"true\\\" / \\\"false\\\",\\n- type: \\\"terminal\\\" / \\\"ide\\\" / \\\"ide-dev\\\",\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"additionalProperties\": true"]
#[doc = "              },"]
#[doc = "              \"exposure\": {"]
#[doc = "                \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "                \"type\": \"string\","]
#[doc = "                \"enum\": ["]
#[doc = "                  \"public\","]
#[doc = "                  \"internal\","]
#[doc = "                  \"none\""]
#[doc = "                ]"]
#[doc = "              },"]
#[doc = "              \"name\": {"]
#[doc = "                \"type\": \"string\","]
#[doc = "                \"maxLength\": 15,"]
#[doc = "                \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "              },"]
#[doc = "              \"path\": {"]
#[doc = "                \"description\": \"Path of the endpoint URL\","]
#[doc = "                \"type\": \"string\""]
#[doc = "              },"]
#[doc = "              \"protocol\": {"]
#[doc = "                \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "                \"type\": \"string\","]
#[doc = "                \"enum\": ["]
#[doc = "                  \"http\","]
#[doc = "                  \"https\","]
#[doc = "                  \"ws\","]
#[doc = "                  \"wss\","]
#[doc = "                  \"tcp\","]
#[doc = "                  \"udp\""]
#[doc = "                ]"]
#[doc = "              },"]
#[doc = "              \"secure\": {"]
#[doc = "                \"description\": \"Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.\","]
#[doc = "                \"type\": \"boolean\""]
#[doc = "              },"]
#[doc = "              \"targetPort\": {"]
#[doc = "                \"description\": \"Port number to be used within the container component. The same port cannot be used by two different container components.\","]
#[doc = "                \"type\": \"integer\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"additionalProperties\": false"]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"inlined\": {"]
#[doc = "          \"description\": \"Inlined manifest\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"uri\": {"]
#[doc = "          \"description\": \"Location in a file fetched from a uri.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"volume\": {"]
#[doc = "      \"description\": \"Allows specifying the definition of a volume shared by several other components\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"ephemeral\": {"]
#[doc = "          \"description\": \"Ephemeral volumes are not stored persistently across restarts. Defaults to false\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"size\": {"]
#[doc = "          \"description\": \"Size of the volume\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged, deny_unknown_fields)]
pub enum DevfileSchemaVersion222ParentVariant1ComponentsItem {
    Variant0 {
        #[doc = "Map of implementation-dependant free-form YAML attributes."]
        #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
        attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
        container: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0Container,
        #[doc = "Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin."]
        name: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0Name,
    },
    Variant1 {
        #[doc = "Map of implementation-dependant free-form YAML attributes."]
        #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
        attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
        kubernetes: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1Kubernetes,
        #[doc = "Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin."]
        name: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1Name,
    },
    Variant2 {
        #[doc = "Map of implementation-dependant free-form YAML attributes."]
        #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
        attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
        #[doc = "Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin."]
        name: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2Name,
        openshift: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2Openshift,
    },
    Variant3 {
        #[doc = "Map of implementation-dependant free-form YAML attributes."]
        #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
        attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
        #[doc = "Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin."]
        name: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant3Name,
        volume: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant3Volume,
    },
    Variant4 {
        #[doc = "Map of implementation-dependant free-form YAML attributes."]
        #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
        attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
        image: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4Image,
        #[doc = "Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin."]
        name: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4Name,
    },
}
impl ::std::convert::From<&Self> for DevfileSchemaVersion222ParentVariant1ComponentsItem {
    fn from(value: &DevfileSchemaVersion222ParentVariant1ComponentsItem) -> Self {
        value.clone()
    }
}
#[doc = "Allows adding and configuring devworkspace-related containers"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Allows adding and configuring devworkspace-related containers\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"annotation\": {"]
#[doc = "      \"description\": \"Annotations that should be added to specific resources for this container\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"deployment\": {"]
#[doc = "          \"description\": \"Annotations to be added to deployment\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"additionalProperties\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"service\": {"]
#[doc = "          \"description\": \"Annotations to be added to service\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"additionalProperties\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"args\": {"]
#[doc = "      \"description\": \"The arguments to supply to the command running the dockerimage component. The arguments are supplied either to the default command provided in the image or to the overridden command.\\n\\nDefaults to an empty array, meaning use whatever is defined in the image.\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"command\": {"]
#[doc = "      \"description\": \"The command to run in the dockerimage component instead of the default one provided in the image.\\n\\nDefaults to an empty array, meaning use whatever is defined in the image.\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"cpuLimit\": {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"cpuRequest\": {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"dedicatedPod\": {"]
#[doc = "      \"description\": \"Specify if a container should run in its own separated pod, instead of running as part of the main development environment pod.\\n\\nDefault value is `false`\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"endpoints\": {"]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"object\","]
#[doc = "        \"required\": ["]
#[doc = "          \"name\""]
#[doc = "        ],"]
#[doc = "        \"properties\": {"]
#[doc = "          \"annotation\": {"]
#[doc = "            \"description\": \"Annotations to be added to Kubernetes Ingress or Openshift Route\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"additionalProperties\": {"]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"attributes\": {"]
#[doc = "            \"description\": \"Map of implementation-dependant string-based free-form attributes.\\n\\nExamples of Che-specific attributes:\\n- cookiesAuthEnabled: \\\"true\\\" / \\\"false\\\",\\n- type: \\\"terminal\\\" / \\\"ide\\\" / \\\"ide-dev\\\",\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"additionalProperties\": true"]
#[doc = "          },"]
#[doc = "          \"exposure\": {"]
#[doc = "            \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "            \"type\": \"string\","]
#[doc = "            \"enum\": ["]
#[doc = "              \"public\","]
#[doc = "              \"internal\","]
#[doc = "              \"none\""]
#[doc = "            ]"]
#[doc = "          },"]
#[doc = "          \"name\": {"]
#[doc = "            \"type\": \"string\","]
#[doc = "            \"maxLength\": 15,"]
#[doc = "            \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "          },"]
#[doc = "          \"path\": {"]
#[doc = "            \"description\": \"Path of the endpoint URL\","]
#[doc = "            \"type\": \"string\""]
#[doc = "          },"]
#[doc = "          \"protocol\": {"]
#[doc = "            \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "            \"type\": \"string\","]
#[doc = "            \"enum\": ["]
#[doc = "              \"http\","]
#[doc = "              \"https\","]
#[doc = "              \"ws\","]
#[doc = "              \"wss\","]
#[doc = "              \"tcp\","]
#[doc = "              \"udp\""]
#[doc = "            ]"]
#[doc = "          },"]
#[doc = "          \"secure\": {"]
#[doc = "            \"description\": \"Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.\","]
#[doc = "            \"type\": \"boolean\""]
#[doc = "          },"]
#[doc = "          \"targetPort\": {"]
#[doc = "            \"description\": \"Port number to be used within the container component. The same port cannot be used by two different container components.\","]
#[doc = "            \"type\": \"integer\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"additionalProperties\": false"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"env\": {"]
#[doc = "      \"description\": \"Environment variables used in this container.\\n\\nThe following variables are reserved and cannot be overridden via env:\\n\\n - `$PROJECTS_ROOT`\\n\\n - `$PROJECT_SOURCE`\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"object\","]
#[doc = "        \"required\": ["]
#[doc = "          \"name\""]
#[doc = "        ],"]
#[doc = "        \"properties\": {"]
#[doc = "          \"name\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          },"]
#[doc = "          \"value\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"additionalProperties\": false"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"image\": {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"memoryLimit\": {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"memoryRequest\": {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"mountSources\": {"]
#[doc = "      \"description\": \"Toggles whether or not the project source code should be mounted in the component.\\n\\nDefaults to true for all component types except plugins and components that set `dedicatedPod` to true.\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"sourceMapping\": {"]
#[doc = "      \"description\": \"Optional specification of the path in the container where project sources should be transferred/mounted when `mountSources` is `true`. When omitted, the default value of /projects is used.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"volumeMounts\": {"]
#[doc = "      \"description\": \"List of volumes mounts that should be mounted is this container.\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"description\": \"Volume that should be mounted to a component container\","]
#[doc = "        \"type\": \"object\","]
#[doc = "        \"required\": ["]
#[doc = "          \"name\""]
#[doc = "        ],"]
#[doc = "        \"properties\": {"]
#[doc = "          \"name\": {"]
#[doc = "            \"description\": \"The volume mount name is the name of an existing `Volume` component. If several containers mount the same volume name then they will reuse the same volume and will be able to access to the same files.\","]
#[doc = "            \"type\": \"string\","]
#[doc = "            \"maxLength\": 63,"]
#[doc = "            \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "          },"]
#[doc = "          \"path\": {"]
#[doc = "            \"description\": \"The path in the component container where the volume should be mounted. If not path is mentioned, default path is the is `/<name>`.\","]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"additionalProperties\": false"]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0Container {
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub annotation: ::std::option::Option<
        DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerAnnotation,
    >,
    #[doc = "The arguments to supply to the command running the dockerimage component. The arguments are supplied either to the default command provided in the image or to the overridden command.\n\nDefaults to an empty array, meaning use whatever is defined in the image."]
    #[serde(default, skip_serializing_if = "::std::vec::Vec::is_empty")]
    pub args: ::std::vec::Vec<::std::string::String>,
    #[doc = "The command to run in the dockerimage component instead of the default one provided in the image.\n\nDefaults to an empty array, meaning use whatever is defined in the image."]
    #[serde(default, skip_serializing_if = "::std::vec::Vec::is_empty")]
    pub command: ::std::vec::Vec<::std::string::String>,
    #[serde(
        rename = "cpuLimit",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub cpu_limit: ::std::option::Option<::std::string::String>,
    #[serde(
        rename = "cpuRequest",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub cpu_request: ::std::option::Option<::std::string::String>,
    #[doc = "Specify if a container should run in its own separated pod, instead of running as part of the main development environment pod.\n\nDefault value is `false`"]
    #[serde(
        rename = "dedicatedPod",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub dedicated_pod: ::std::option::Option<bool>,
    #[serde(default, skip_serializing_if = "::std::vec::Vec::is_empty")]
    pub endpoints: ::std::vec::Vec<
        DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEndpointsItem,
    >,
    #[doc = "Environment variables used in this container.\n\nThe following variables are reserved and cannot be overridden via env:\n\n - `$PROJECTS_ROOT`\n\n - `$PROJECT_SOURCE`"]
    #[serde(default, skip_serializing_if = "::std::vec::Vec::is_empty")]
    pub env: ::std::vec::Vec<
        DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEnvItem,
    >,
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub image: ::std::option::Option<::std::string::String>,
    #[serde(
        rename = "memoryLimit",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub memory_limit: ::std::option::Option<::std::string::String>,
    #[serde(
        rename = "memoryRequest",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub memory_request: ::std::option::Option<::std::string::String>,
    #[doc = "Toggles whether or not the project source code should be mounted in the component.\n\nDefaults to true for all component types except plugins and components that set `dedicatedPod` to true."]
    #[serde(
        rename = "mountSources",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub mount_sources: ::std::option::Option<bool>,
    #[doc = "Optional specification of the path in the container where project sources should be transferred/mounted when `mountSources` is `true`. When omitted, the default value of /projects is used."]
    #[serde(
        rename = "sourceMapping",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub source_mapping: ::std::option::Option<::std::string::String>,
    #[doc = "List of volumes mounts that should be mounted is this container."]
    #[serde(
        rename = "volumeMounts",
        default,
        skip_serializing_if = "::std::vec::Vec::is_empty"
    )]
    pub volume_mounts: ::std::vec::Vec<
        DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerVolumeMountsItem,
    >,
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0Container>
    for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0Container
{
    fn from(value: &DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0Container) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0Container {
    pub fn builder() -> builder::DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0Container
    {
        Default::default()
    }
}
#[doc = "Annotations that should be added to specific resources for this container"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Annotations that should be added to specific resources for this container\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"deployment\": {"]
#[doc = "      \"description\": \"Annotations to be added to deployment\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"service\": {"]
#[doc = "      \"description\": \"Annotations to be added to service\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerAnnotation {
    #[doc = "Annotations to be added to deployment"]
    #[serde(
        default,
        skip_serializing_if = ":: std :: collections :: HashMap::is_empty"
    )]
    pub deployment: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    #[doc = "Annotations to be added to service"]
    #[serde(
        default,
        skip_serializing_if = ":: std :: collections :: HashMap::is_empty"
    )]
    pub service: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
}
impl
    ::std::convert::From<
        &DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerAnnotation,
    > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerAnnotation
{
    fn from(
        value: &DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerAnnotation,
    ) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerAnnotation {
    pub fn builder(
    ) -> builder::DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerAnnotation
    {
        Default::default()
    }
}
#[doc = "`DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEndpointsItem`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"name\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"annotation\": {"]
#[doc = "      \"description\": \"Annotations to be added to Kubernetes Ingress or Openshift Route\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"attributes\": {"]
#[doc = "      \"description\": \"Map of implementation-dependant string-based free-form attributes.\\n\\nExamples of Che-specific attributes:\\n- cookiesAuthEnabled: \\\"true\\\" / \\\"false\\\",\\n- type: \\\"terminal\\\" / \\\"ide\\\" / \\\"ide-dev\\\",\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": true"]
#[doc = "    },"]
#[doc = "    \"exposure\": {"]
#[doc = "      \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"public\","]
#[doc = "        \"internal\","]
#[doc = "        \"none\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"maxLength\": 15,"]
#[doc = "      \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "    },"]
#[doc = "    \"path\": {"]
#[doc = "      \"description\": \"Path of the endpoint URL\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"protocol\": {"]
#[doc = "      \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"http\","]
#[doc = "        \"https\","]
#[doc = "        \"ws\","]
#[doc = "        \"wss\","]
#[doc = "        \"tcp\","]
#[doc = "        \"udp\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"secure\": {"]
#[doc = "      \"description\": \"Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"targetPort\": {"]
#[doc = "      \"description\": \"Port number to be used within the container component. The same port cannot be used by two different container components.\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
pub struct DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEndpointsItem {
    #[doc = "Annotations to be added to Kubernetes Ingress or Openshift Route"]
    #[serde(
        default,
        skip_serializing_if = ":: std :: collections :: HashMap::is_empty"
    )]
    pub annotation: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    #[doc = "Map of implementation-dependant string-based free-form attributes.\n\nExamples of Che-specific attributes:\n- cookiesAuthEnabled: \"true\" / \"false\",\n- type: \"terminal\" / \"ide\" / \"ide-dev\","]
    #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
    pub attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
    #[doc = "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub exposure: ::std::option::Option<
        DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEndpointsItemExposure,
    >,
    pub name: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEndpointsItemName,
    #[doc = "Path of the endpoint URL"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub path: ::std::option::Option<::std::string::String>,
    #[doc = "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub protocol: ::std::option::Option<
        DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEndpointsItemProtocol,
    >,
    #[doc = "Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`."]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub secure: ::std::option::Option<bool>,
    #[doc = "Port number to be used within the container component. The same port cannot be used by two different container components."]
    #[serde(
        rename = "targetPort",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub target_port: ::std::option::Option<i64>,
}
impl
    ::std::convert::From<
        &DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEndpointsItem,
    > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEndpointsItem
{
    fn from(
        value: &DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEndpointsItem,
    ) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEndpointsItem {
    pub fn builder(
    ) -> builder::DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEndpointsItem
    {
        Default::default()
    }
}
#[doc = "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"public\","]
#[doc = "    \"internal\","]
#[doc = "    \"none\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEndpointsItemExposure {
    #[serde(rename = "public")]
    Public,
    #[serde(rename = "internal")]
    Internal,
    #[serde(rename = "none")]
    None,
}
impl ::std::convert::From<&Self>
    for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEndpointsItemExposure
{
    fn from(
        value : & DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEndpointsItemExposure,
    ) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display
    for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEndpointsItemExposure
{
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Public => f.write_str("public"),
            Self::Internal => f.write_str("internal"),
            Self::None => f.write_str("none"),
        }
    }
}
impl ::std::str::FromStr
    for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEndpointsItemExposure
{
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        match value {
            "public" => Ok(Self::Public),
            "internal" => Ok(Self::Internal),
            "none" => Ok(Self::None),
            _ => Err("invalid value".into()),
        }
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEndpointsItemExposure
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEndpointsItemExposure
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEndpointsItemExposure
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "`DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEndpointsItemName`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 15,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEndpointsItemName(
    ::std::string::String,
);
impl ::std::ops::Deref
    for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEndpointsItemName
{
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl
    ::std::convert::From<
        DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEndpointsItemName,
    > for ::std::string::String
{
    fn from(
        value : DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEndpointsItemName,
    ) -> Self {
        value.0
    }
}
impl
    ::std::convert::From<
        &DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEndpointsItemName,
    > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEndpointsItemName
{
    fn from(
        value : & DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEndpointsItemName,
    ) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr
    for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEndpointsItemName
{
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 15usize {
            return Err("longer than 15 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEndpointsItemName
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEndpointsItemName
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEndpointsItemName
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de>
    for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEndpointsItemName
{
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"http\","]
#[doc = "    \"https\","]
#[doc = "    \"ws\","]
#[doc = "    \"wss\","]
#[doc = "    \"tcp\","]
#[doc = "    \"udp\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEndpointsItemProtocol {
    #[serde(rename = "http")]
    Http,
    #[serde(rename = "https")]
    Https,
    #[serde(rename = "ws")]
    Ws,
    #[serde(rename = "wss")]
    Wss,
    #[serde(rename = "tcp")]
    Tcp,
    #[serde(rename = "udp")]
    Udp,
}
impl ::std::convert::From<&Self>
    for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEndpointsItemProtocol
{
    fn from(
        value : & DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEndpointsItemProtocol,
    ) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display
    for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEndpointsItemProtocol
{
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Http => f.write_str("http"),
            Self::Https => f.write_str("https"),
            Self::Ws => f.write_str("ws"),
            Self::Wss => f.write_str("wss"),
            Self::Tcp => f.write_str("tcp"),
            Self::Udp => f.write_str("udp"),
        }
    }
}
impl ::std::str::FromStr
    for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEndpointsItemProtocol
{
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        match value {
            "http" => Ok(Self::Http),
            "https" => Ok(Self::Https),
            "ws" => Ok(Self::Ws),
            "wss" => Ok(Self::Wss),
            "tcp" => Ok(Self::Tcp),
            "udp" => Ok(Self::Udp),
            _ => Err("invalid value".into()),
        }
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEndpointsItemProtocol
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEndpointsItemProtocol
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEndpointsItemProtocol
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "`DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEnvItem`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"name\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"name\": {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"value\": {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
pub struct DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEnvItem {
    pub name: ::std::string::String,
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub value: ::std::option::Option<::std::string::String>,
}
impl
    ::std::convert::From<
        &DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEnvItem,
    > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEnvItem
{
    fn from(
        value: &DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEnvItem,
    ) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEnvItem {
    pub fn builder(
    ) -> builder::DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEnvItem {
        Default::default()
    }
}
#[doc = "Volume that should be mounted to a component container"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Volume that should be mounted to a component container\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"name\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"name\": {"]
#[doc = "      \"description\": \"The volume mount name is the name of an existing `Volume` component. If several containers mount the same volume name then they will reuse the same volume and will be able to access to the same files.\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"maxLength\": 63,"]
#[doc = "      \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "    },"]
#[doc = "    \"path\": {"]
#[doc = "      \"description\": \"The path in the component container where the volume should be mounted. If not path is mentioned, default path is the is `/<name>`.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
pub struct DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerVolumeMountsItem {
    #[doc = "The volume mount name is the name of an existing `Volume` component. If several containers mount the same volume name then they will reuse the same volume and will be able to access to the same files."]
    pub name:
        DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerVolumeMountsItemName,
    #[doc = "The path in the component container where the volume should be mounted. If not path is mentioned, default path is the is `/<name>`."]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub path: ::std::option::Option<::std::string::String>,
}
impl
    ::std::convert::From<
        &DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerVolumeMountsItem,
    > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerVolumeMountsItem
{
    fn from(
        value : & DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerVolumeMountsItem,
    ) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerVolumeMountsItem {
    pub fn builder(
    ) -> builder::DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerVolumeMountsItem
    {
        Default::default()
    }
}
#[doc = "The volume mount name is the name of an existing `Volume` component. If several containers mount the same volume name then they will reuse the same volume and will be able to access to the same files."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"The volume mount name is the name of an existing `Volume` component. If several containers mount the same volume name then they will reuse the same volume and will be able to access to the same files.\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerVolumeMountsItemName(
    ::std::string::String,
);
impl ::std::ops::Deref
    for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerVolumeMountsItemName
{
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl
    ::std::convert::From<
        DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerVolumeMountsItemName,
    > for ::std::string::String
{
    fn from(
        value : DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerVolumeMountsItemName,
    ) -> Self {
        value.0
    }
}
impl
    ::std::convert::From<
        &DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerVolumeMountsItemName,
    > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerVolumeMountsItemName
{
    fn from(
        value : & DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerVolumeMountsItemName,
    ) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr
    for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerVolumeMountsItemName
{
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerVolumeMountsItemName
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerVolumeMountsItemName
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerVolumeMountsItemName
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de>
    for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerVolumeMountsItemName
{
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin.\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0Name(::std::string::String);
impl ::std::ops::Deref for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0Name {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0Name>
    for ::std::string::String
{
    fn from(value: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0Name) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0Name>
    for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0Name
{
    fn from(value: &DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0Name) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0Name {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0Name
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de>
    for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0Name
{
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Allows importing into the devworkspace the Kubernetes resources defined in a given manifest. For example this allows reusing the Kubernetes definitions used to deploy some runtime components in production."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Allows importing into the devworkspace the Kubernetes resources defined in a given manifest. For example this allows reusing the Kubernetes definitions used to deploy some runtime components in production.\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"uri\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"inlined\""]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"deployByDefault\": {"]
#[doc = "      \"description\": \"Defines if the component should be deployed during startup.\\n\\nDefault value is `false`\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"endpoints\": {"]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"object\","]
#[doc = "        \"required\": ["]
#[doc = "          \"name\""]
#[doc = "        ],"]
#[doc = "        \"properties\": {"]
#[doc = "          \"annotation\": {"]
#[doc = "            \"description\": \"Annotations to be added to Kubernetes Ingress or Openshift Route\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"additionalProperties\": {"]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"attributes\": {"]
#[doc = "            \"description\": \"Map of implementation-dependant string-based free-form attributes.\\n\\nExamples of Che-specific attributes:\\n- cookiesAuthEnabled: \\\"true\\\" / \\\"false\\\",\\n- type: \\\"terminal\\\" / \\\"ide\\\" / \\\"ide-dev\\\",\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"additionalProperties\": true"]
#[doc = "          },"]
#[doc = "          \"exposure\": {"]
#[doc = "            \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "            \"type\": \"string\","]
#[doc = "            \"enum\": ["]
#[doc = "              \"public\","]
#[doc = "              \"internal\","]
#[doc = "              \"none\""]
#[doc = "            ]"]
#[doc = "          },"]
#[doc = "          \"name\": {"]
#[doc = "            \"type\": \"string\","]
#[doc = "            \"maxLength\": 15,"]
#[doc = "            \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "          },"]
#[doc = "          \"path\": {"]
#[doc = "            \"description\": \"Path of the endpoint URL\","]
#[doc = "            \"type\": \"string\""]
#[doc = "          },"]
#[doc = "          \"protocol\": {"]
#[doc = "            \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "            \"type\": \"string\","]
#[doc = "            \"enum\": ["]
#[doc = "              \"http\","]
#[doc = "              \"https\","]
#[doc = "              \"ws\","]
#[doc = "              \"wss\","]
#[doc = "              \"tcp\","]
#[doc = "              \"udp\""]
#[doc = "            ]"]
#[doc = "          },"]
#[doc = "          \"secure\": {"]
#[doc = "            \"description\": \"Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.\","]
#[doc = "            \"type\": \"boolean\""]
#[doc = "          },"]
#[doc = "          \"targetPort\": {"]
#[doc = "            \"description\": \"Port number to be used within the container component. The same port cannot be used by two different container components.\","]
#[doc = "            \"type\": \"integer\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"additionalProperties\": false"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"inlined\": {"]
#[doc = "      \"description\": \"Inlined manifest\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"uri\": {"]
#[doc = "      \"description\": \"Location in a file fetched from a uri.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged, deny_unknown_fields)]
pub enum DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1Kubernetes {
    Variant0 { # [doc = "Defines if the component should be deployed during startup.\n\nDefault value is `false`"] # [serde (rename = "deployByDefault" , default , skip_serializing_if = "::std::option::Option::is_none")] deploy_by_default : :: std :: option :: Option < bool > , # [serde (default , skip_serializing_if = "::std::vec::Vec::is_empty")] endpoints : :: std :: vec :: Vec < DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant0EndpointsItem > , # [doc = "Location in a file fetched from a uri."] uri : :: std :: string :: String , } , Variant1 { # [doc = "Defines if the component should be deployed during startup.\n\nDefault value is `false`"] # [serde (rename = "deployByDefault" , default , skip_serializing_if = "::std::option::Option::is_none")] deploy_by_default : :: std :: option :: Option < bool > , # [serde (default , skip_serializing_if = "::std::vec::Vec::is_empty")] endpoints : :: std :: vec :: Vec < DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant1EndpointsItem > , # [doc = "Inlined manifest"] inlined : :: std :: string :: String , } , }
impl ::std::convert::From<&Self>
    for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1Kubernetes
{
    fn from(value: &DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1Kubernetes) -> Self {
        value.clone()
    }
}
#[doc = "`DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant0EndpointsItem`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"name\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"annotation\": {"]
#[doc = "      \"description\": \"Annotations to be added to Kubernetes Ingress or Openshift Route\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"attributes\": {"]
#[doc = "      \"description\": \"Map of implementation-dependant string-based free-form attributes.\\n\\nExamples of Che-specific attributes:\\n- cookiesAuthEnabled: \\\"true\\\" / \\\"false\\\",\\n- type: \\\"terminal\\\" / \\\"ide\\\" / \\\"ide-dev\\\",\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": true"]
#[doc = "    },"]
#[doc = "    \"exposure\": {"]
#[doc = "      \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"public\","]
#[doc = "        \"internal\","]
#[doc = "        \"none\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"maxLength\": 15,"]
#[doc = "      \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "    },"]
#[doc = "    \"path\": {"]
#[doc = "      \"description\": \"Path of the endpoint URL\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"protocol\": {"]
#[doc = "      \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"http\","]
#[doc = "        \"https\","]
#[doc = "        \"ws\","]
#[doc = "        \"wss\","]
#[doc = "        \"tcp\","]
#[doc = "        \"udp\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"secure\": {"]
#[doc = "      \"description\": \"Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"targetPort\": {"]
#[doc = "      \"description\": \"Port number to be used within the container component. The same port cannot be used by two different container components.\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
pub struct DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant0EndpointsItem { # [doc = "Annotations to be added to Kubernetes Ingress or Openshift Route"] # [serde (default , skip_serializing_if = ":: std :: collections :: HashMap::is_empty")] pub annotation : :: std :: collections :: HashMap < :: std :: string :: String , :: std :: string :: String > , # [doc = "Map of implementation-dependant string-based free-form attributes.\n\nExamples of Che-specific attributes:\n- cookiesAuthEnabled: \"true\" / \"false\",\n- type: \"terminal\" / \"ide\" / \"ide-dev\","] # [serde (default , skip_serializing_if = "::serde_json::Map::is_empty")] pub attributes : :: serde_json :: Map < :: std :: string :: String , :: serde_json :: Value > , # [doc = "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`"] # [serde (default , skip_serializing_if = "::std::option::Option::is_none")] pub exposure : :: std :: option :: Option < DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant0EndpointsItemExposure > , pub name : DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant0EndpointsItemName , # [doc = "Path of the endpoint URL"] # [serde (default , skip_serializing_if = "::std::option::Option::is_none")] pub path : :: std :: option :: Option < :: std :: string :: String > , # [doc = "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`"] # [serde (default , skip_serializing_if = "::std::option::Option::is_none")] pub protocol : :: std :: option :: Option < DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant0EndpointsItemProtocol > , # [doc = "Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`."] # [serde (default , skip_serializing_if = "::std::option::Option::is_none")] pub secure : :: std :: option :: Option < bool > , # [doc = "Port number to be used within the container component. The same port cannot be used by two different container components."] # [serde (rename = "targetPort" , default , skip_serializing_if = "::std::option::Option::is_none")] pub target_port : :: std :: option :: Option < i64 > , }
impl
    ::std::convert::From<
        &DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant0EndpointsItem,
    >
    for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant0EndpointsItem
{
    fn from(
        value : & DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant0EndpointsItem,
    ) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant0EndpointsItem {
    pub fn builder () -> builder :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant0EndpointsItem{
        Default::default()
    }
}
#[doc = "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"public\","]
#[doc = "    \"internal\","]
#[doc = "    \"none\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant0EndpointsItemExposure
{
    #[serde(rename = "public")]
    Public,
    #[serde(rename = "internal")]
    Internal,
    #[serde(rename = "none")]
    None,
}
impl :: std :: convert :: From < & Self > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant0EndpointsItemExposure { fn from (value : & DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant0EndpointsItemExposure) -> Self { value . clone () } }
impl :: std :: fmt :: Display for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant0EndpointsItemExposure { fn fmt (& self , f : & mut :: std :: fmt :: Formatter < '_ >) -> :: std :: fmt :: Result { match * self { Self :: Public => f . write_str ("public") , Self :: Internal => f . write_str ("internal") , Self :: None => f . write_str ("none") , } } }
impl :: std :: str :: FromStr for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant0EndpointsItemExposure { type Err = self :: error :: ConversionError ; fn from_str (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { match value { "public" => Ok (Self :: Public) , "internal" => Ok (Self :: Internal) , "none" => Ok (Self :: None) , _ => Err ("invalid value" . into ()) , } } }
impl :: std :: convert :: TryFrom < & str > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant0EndpointsItemExposure { type Error = self :: error :: ConversionError ; fn try_from (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < & :: std :: string :: String > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant0EndpointsItemExposure { type Error = self :: error :: ConversionError ; fn try_from (value : & :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < :: std :: string :: String > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant0EndpointsItemExposure { type Error = self :: error :: ConversionError ; fn try_from (value : :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
#[doc = "`DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant0EndpointsItemName`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 15,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant0EndpointsItemName(
    ::std::string::String,
);
impl :: std :: ops :: Deref for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant0EndpointsItemName { type Target = :: std :: string :: String ; fn deref (& self) -> & :: std :: string :: String { & self . 0 } }
impl :: std :: convert :: From < DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant0EndpointsItemName > for :: std :: string :: String { fn from (value : DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant0EndpointsItemName) -> Self { value . 0 } }
impl :: std :: convert :: From < & DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant0EndpointsItemName > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant0EndpointsItemName { fn from (value : & DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant0EndpointsItemName) -> Self { value . clone () } }
impl :: std :: str :: FromStr for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant0EndpointsItemName { type Err = self :: error :: ConversionError ; fn from_str (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { if value . chars () . count () > 15usize { return Err ("longer than 15 characters" . into ()) ; } static PATTERN : :: std :: sync :: LazyLock < :: regress :: Regex > = :: std :: sync :: LazyLock :: new (|| { :: regress :: Regex :: new ("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") . unwrap () }) ; if PATTERN . find (value) . is_none () { return Err ("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"" . into ()) ; } Ok (Self (value . to_string ())) } }
impl :: std :: convert :: TryFrom < & str > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant0EndpointsItemName { type Error = self :: error :: ConversionError ; fn try_from (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < & :: std :: string :: String > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant0EndpointsItemName { type Error = self :: error :: ConversionError ; fn try_from (value : & :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < :: std :: string :: String > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant0EndpointsItemName { type Error = self :: error :: ConversionError ; fn try_from (value : :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl < 'de > :: serde :: Deserialize < 'de > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant0EndpointsItemName { fn deserialize < D > (deserializer : D ,) -> :: std :: result :: Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { :: std :: string :: String :: deserialize (deserializer) ? . parse () . map_err (| e : self :: error :: ConversionError | { < D :: Error as :: serde :: de :: Error > :: custom (e . to_string () ,) }) } }
#[doc = "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"http\","]
#[doc = "    \"https\","]
#[doc = "    \"ws\","]
#[doc = "    \"wss\","]
#[doc = "    \"tcp\","]
#[doc = "    \"udp\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant0EndpointsItemProtocol
{
    #[serde(rename = "http")]
    Http,
    #[serde(rename = "https")]
    Https,
    #[serde(rename = "ws")]
    Ws,
    #[serde(rename = "wss")]
    Wss,
    #[serde(rename = "tcp")]
    Tcp,
    #[serde(rename = "udp")]
    Udp,
}
impl :: std :: convert :: From < & Self > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant0EndpointsItemProtocol { fn from (value : & DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant0EndpointsItemProtocol) -> Self { value . clone () } }
impl :: std :: fmt :: Display for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant0EndpointsItemProtocol { fn fmt (& self , f : & mut :: std :: fmt :: Formatter < '_ >) -> :: std :: fmt :: Result { match * self { Self :: Http => f . write_str ("http") , Self :: Https => f . write_str ("https") , Self :: Ws => f . write_str ("ws") , Self :: Wss => f . write_str ("wss") , Self :: Tcp => f . write_str ("tcp") , Self :: Udp => f . write_str ("udp") , } } }
impl :: std :: str :: FromStr for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant0EndpointsItemProtocol { type Err = self :: error :: ConversionError ; fn from_str (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { match value { "http" => Ok (Self :: Http) , "https" => Ok (Self :: Https) , "ws" => Ok (Self :: Ws) , "wss" => Ok (Self :: Wss) , "tcp" => Ok (Self :: Tcp) , "udp" => Ok (Self :: Udp) , _ => Err ("invalid value" . into ()) , } } }
impl :: std :: convert :: TryFrom < & str > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant0EndpointsItemProtocol { type Error = self :: error :: ConversionError ; fn try_from (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < & :: std :: string :: String > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant0EndpointsItemProtocol { type Error = self :: error :: ConversionError ; fn try_from (value : & :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < :: std :: string :: String > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant0EndpointsItemProtocol { type Error = self :: error :: ConversionError ; fn try_from (value : :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
#[doc = "`DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant1EndpointsItem`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"name\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"annotation\": {"]
#[doc = "      \"description\": \"Annotations to be added to Kubernetes Ingress or Openshift Route\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"attributes\": {"]
#[doc = "      \"description\": \"Map of implementation-dependant string-based free-form attributes.\\n\\nExamples of Che-specific attributes:\\n- cookiesAuthEnabled: \\\"true\\\" / \\\"false\\\",\\n- type: \\\"terminal\\\" / \\\"ide\\\" / \\\"ide-dev\\\",\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": true"]
#[doc = "    },"]
#[doc = "    \"exposure\": {"]
#[doc = "      \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"public\","]
#[doc = "        \"internal\","]
#[doc = "        \"none\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"maxLength\": 15,"]
#[doc = "      \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "    },"]
#[doc = "    \"path\": {"]
#[doc = "      \"description\": \"Path of the endpoint URL\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"protocol\": {"]
#[doc = "      \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"http\","]
#[doc = "        \"https\","]
#[doc = "        \"ws\","]
#[doc = "        \"wss\","]
#[doc = "        \"tcp\","]
#[doc = "        \"udp\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"secure\": {"]
#[doc = "      \"description\": \"Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"targetPort\": {"]
#[doc = "      \"description\": \"Port number to be used within the container component. The same port cannot be used by two different container components.\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
pub struct DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant1EndpointsItem { # [doc = "Annotations to be added to Kubernetes Ingress or Openshift Route"] # [serde (default , skip_serializing_if = ":: std :: collections :: HashMap::is_empty")] pub annotation : :: std :: collections :: HashMap < :: std :: string :: String , :: std :: string :: String > , # [doc = "Map of implementation-dependant string-based free-form attributes.\n\nExamples of Che-specific attributes:\n- cookiesAuthEnabled: \"true\" / \"false\",\n- type: \"terminal\" / \"ide\" / \"ide-dev\","] # [serde (default , skip_serializing_if = "::serde_json::Map::is_empty")] pub attributes : :: serde_json :: Map < :: std :: string :: String , :: serde_json :: Value > , # [doc = "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`"] # [serde (default , skip_serializing_if = "::std::option::Option::is_none")] pub exposure : :: std :: option :: Option < DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant1EndpointsItemExposure > , pub name : DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant1EndpointsItemName , # [doc = "Path of the endpoint URL"] # [serde (default , skip_serializing_if = "::std::option::Option::is_none")] pub path : :: std :: option :: Option < :: std :: string :: String > , # [doc = "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`"] # [serde (default , skip_serializing_if = "::std::option::Option::is_none")] pub protocol : :: std :: option :: Option < DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant1EndpointsItemProtocol > , # [doc = "Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`."] # [serde (default , skip_serializing_if = "::std::option::Option::is_none")] pub secure : :: std :: option :: Option < bool > , # [doc = "Port number to be used within the container component. The same port cannot be used by two different container components."] # [serde (rename = "targetPort" , default , skip_serializing_if = "::std::option::Option::is_none")] pub target_port : :: std :: option :: Option < i64 > , }
impl
    ::std::convert::From<
        &DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant1EndpointsItem,
    >
    for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant1EndpointsItem
{
    fn from(
        value : & DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant1EndpointsItem,
    ) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant1EndpointsItem {
    pub fn builder () -> builder :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant1EndpointsItem{
        Default::default()
    }
}
#[doc = "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"public\","]
#[doc = "    \"internal\","]
#[doc = "    \"none\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant1EndpointsItemExposure
{
    #[serde(rename = "public")]
    Public,
    #[serde(rename = "internal")]
    Internal,
    #[serde(rename = "none")]
    None,
}
impl :: std :: convert :: From < & Self > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant1EndpointsItemExposure { fn from (value : & DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant1EndpointsItemExposure) -> Self { value . clone () } }
impl :: std :: fmt :: Display for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant1EndpointsItemExposure { fn fmt (& self , f : & mut :: std :: fmt :: Formatter < '_ >) -> :: std :: fmt :: Result { match * self { Self :: Public => f . write_str ("public") , Self :: Internal => f . write_str ("internal") , Self :: None => f . write_str ("none") , } } }
impl :: std :: str :: FromStr for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant1EndpointsItemExposure { type Err = self :: error :: ConversionError ; fn from_str (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { match value { "public" => Ok (Self :: Public) , "internal" => Ok (Self :: Internal) , "none" => Ok (Self :: None) , _ => Err ("invalid value" . into ()) , } } }
impl :: std :: convert :: TryFrom < & str > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant1EndpointsItemExposure { type Error = self :: error :: ConversionError ; fn try_from (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < & :: std :: string :: String > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant1EndpointsItemExposure { type Error = self :: error :: ConversionError ; fn try_from (value : & :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < :: std :: string :: String > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant1EndpointsItemExposure { type Error = self :: error :: ConversionError ; fn try_from (value : :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
#[doc = "`DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant1EndpointsItemName`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 15,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant1EndpointsItemName(
    ::std::string::String,
);
impl :: std :: ops :: Deref for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant1EndpointsItemName { type Target = :: std :: string :: String ; fn deref (& self) -> & :: std :: string :: String { & self . 0 } }
impl :: std :: convert :: From < DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant1EndpointsItemName > for :: std :: string :: String { fn from (value : DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant1EndpointsItemName) -> Self { value . 0 } }
impl :: std :: convert :: From < & DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant1EndpointsItemName > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant1EndpointsItemName { fn from (value : & DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant1EndpointsItemName) -> Self { value . clone () } }
impl :: std :: str :: FromStr for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant1EndpointsItemName { type Err = self :: error :: ConversionError ; fn from_str (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { if value . chars () . count () > 15usize { return Err ("longer than 15 characters" . into ()) ; } static PATTERN : :: std :: sync :: LazyLock < :: regress :: Regex > = :: std :: sync :: LazyLock :: new (|| { :: regress :: Regex :: new ("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") . unwrap () }) ; if PATTERN . find (value) . is_none () { return Err ("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"" . into ()) ; } Ok (Self (value . to_string ())) } }
impl :: std :: convert :: TryFrom < & str > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant1EndpointsItemName { type Error = self :: error :: ConversionError ; fn try_from (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < & :: std :: string :: String > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant1EndpointsItemName { type Error = self :: error :: ConversionError ; fn try_from (value : & :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < :: std :: string :: String > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant1EndpointsItemName { type Error = self :: error :: ConversionError ; fn try_from (value : :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl < 'de > :: serde :: Deserialize < 'de > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant1EndpointsItemName { fn deserialize < D > (deserializer : D ,) -> :: std :: result :: Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { :: std :: string :: String :: deserialize (deserializer) ? . parse () . map_err (| e : self :: error :: ConversionError | { < D :: Error as :: serde :: de :: Error > :: custom (e . to_string () ,) }) } }
#[doc = "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"http\","]
#[doc = "    \"https\","]
#[doc = "    \"ws\","]
#[doc = "    \"wss\","]
#[doc = "    \"tcp\","]
#[doc = "    \"udp\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant1EndpointsItemProtocol
{
    #[serde(rename = "http")]
    Http,
    #[serde(rename = "https")]
    Https,
    #[serde(rename = "ws")]
    Ws,
    #[serde(rename = "wss")]
    Wss,
    #[serde(rename = "tcp")]
    Tcp,
    #[serde(rename = "udp")]
    Udp,
}
impl :: std :: convert :: From < & Self > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant1EndpointsItemProtocol { fn from (value : & DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant1EndpointsItemProtocol) -> Self { value . clone () } }
impl :: std :: fmt :: Display for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant1EndpointsItemProtocol { fn fmt (& self , f : & mut :: std :: fmt :: Formatter < '_ >) -> :: std :: fmt :: Result { match * self { Self :: Http => f . write_str ("http") , Self :: Https => f . write_str ("https") , Self :: Ws => f . write_str ("ws") , Self :: Wss => f . write_str ("wss") , Self :: Tcp => f . write_str ("tcp") , Self :: Udp => f . write_str ("udp") , } } }
impl :: std :: str :: FromStr for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant1EndpointsItemProtocol { type Err = self :: error :: ConversionError ; fn from_str (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { match value { "http" => Ok (Self :: Http) , "https" => Ok (Self :: Https) , "ws" => Ok (Self :: Ws) , "wss" => Ok (Self :: Wss) , "tcp" => Ok (Self :: Tcp) , "udp" => Ok (Self :: Udp) , _ => Err ("invalid value" . into ()) , } } }
impl :: std :: convert :: TryFrom < & str > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant1EndpointsItemProtocol { type Error = self :: error :: ConversionError ; fn try_from (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < & :: std :: string :: String > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant1EndpointsItemProtocol { type Error = self :: error :: ConversionError ; fn try_from (value : & :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < :: std :: string :: String > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant1EndpointsItemProtocol { type Error = self :: error :: ConversionError ; fn try_from (value : :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
#[doc = "Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin.\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1Name(::std::string::String);
impl ::std::ops::Deref for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1Name {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1Name>
    for ::std::string::String
{
    fn from(value: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1Name) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1Name>
    for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1Name
{
    fn from(value: &DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1Name) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1Name {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1Name
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de>
    for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1Name
{
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin.\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2Name(::std::string::String);
impl ::std::ops::Deref for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2Name {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2Name>
    for ::std::string::String
{
    fn from(value: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2Name) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2Name>
    for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2Name
{
    fn from(value: &DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2Name) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2Name {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2Name
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de>
    for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2Name
{
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Allows importing into the devworkspace the OpenShift resources defined in a given manifest. For example this allows reusing the OpenShift definitions used to deploy some runtime components in production."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Allows importing into the devworkspace the OpenShift resources defined in a given manifest. For example this allows reusing the OpenShift definitions used to deploy some runtime components in production.\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"uri\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"inlined\""]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"deployByDefault\": {"]
#[doc = "      \"description\": \"Defines if the component should be deployed during startup.\\n\\nDefault value is `false`\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"endpoints\": {"]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"object\","]
#[doc = "        \"required\": ["]
#[doc = "          \"name\""]
#[doc = "        ],"]
#[doc = "        \"properties\": {"]
#[doc = "          \"annotation\": {"]
#[doc = "            \"description\": \"Annotations to be added to Kubernetes Ingress or Openshift Route\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"additionalProperties\": {"]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"attributes\": {"]
#[doc = "            \"description\": \"Map of implementation-dependant string-based free-form attributes.\\n\\nExamples of Che-specific attributes:\\n- cookiesAuthEnabled: \\\"true\\\" / \\\"false\\\",\\n- type: \\\"terminal\\\" / \\\"ide\\\" / \\\"ide-dev\\\",\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"additionalProperties\": true"]
#[doc = "          },"]
#[doc = "          \"exposure\": {"]
#[doc = "            \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "            \"type\": \"string\","]
#[doc = "            \"enum\": ["]
#[doc = "              \"public\","]
#[doc = "              \"internal\","]
#[doc = "              \"none\""]
#[doc = "            ]"]
#[doc = "          },"]
#[doc = "          \"name\": {"]
#[doc = "            \"type\": \"string\","]
#[doc = "            \"maxLength\": 15,"]
#[doc = "            \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "          },"]
#[doc = "          \"path\": {"]
#[doc = "            \"description\": \"Path of the endpoint URL\","]
#[doc = "            \"type\": \"string\""]
#[doc = "          },"]
#[doc = "          \"protocol\": {"]
#[doc = "            \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "            \"type\": \"string\","]
#[doc = "            \"enum\": ["]
#[doc = "              \"http\","]
#[doc = "              \"https\","]
#[doc = "              \"ws\","]
#[doc = "              \"wss\","]
#[doc = "              \"tcp\","]
#[doc = "              \"udp\""]
#[doc = "            ]"]
#[doc = "          },"]
#[doc = "          \"secure\": {"]
#[doc = "            \"description\": \"Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.\","]
#[doc = "            \"type\": \"boolean\""]
#[doc = "          },"]
#[doc = "          \"targetPort\": {"]
#[doc = "            \"description\": \"Port number to be used within the container component. The same port cannot be used by two different container components.\","]
#[doc = "            \"type\": \"integer\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"additionalProperties\": false"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"inlined\": {"]
#[doc = "      \"description\": \"Inlined manifest\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"uri\": {"]
#[doc = "      \"description\": \"Location in a file fetched from a uri.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged, deny_unknown_fields)]
pub enum DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2Openshift {
    Variant0 { # [doc = "Defines if the component should be deployed during startup.\n\nDefault value is `false`"] # [serde (rename = "deployByDefault" , default , skip_serializing_if = "::std::option::Option::is_none")] deploy_by_default : :: std :: option :: Option < bool > , # [serde (default , skip_serializing_if = "::std::vec::Vec::is_empty")] endpoints : :: std :: vec :: Vec < DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant0EndpointsItem > , # [doc = "Location in a file fetched from a uri."] uri : :: std :: string :: String , } , Variant1 { # [doc = "Defines if the component should be deployed during startup.\n\nDefault value is `false`"] # [serde (rename = "deployByDefault" , default , skip_serializing_if = "::std::option::Option::is_none")] deploy_by_default : :: std :: option :: Option < bool > , # [serde (default , skip_serializing_if = "::std::vec::Vec::is_empty")] endpoints : :: std :: vec :: Vec < DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant1EndpointsItem > , # [doc = "Inlined manifest"] inlined : :: std :: string :: String , } , }
impl ::std::convert::From<&Self>
    for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2Openshift
{
    fn from(value: &DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2Openshift) -> Self {
        value.clone()
    }
}
#[doc = "`DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant0EndpointsItem`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"name\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"annotation\": {"]
#[doc = "      \"description\": \"Annotations to be added to Kubernetes Ingress or Openshift Route\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"attributes\": {"]
#[doc = "      \"description\": \"Map of implementation-dependant string-based free-form attributes.\\n\\nExamples of Che-specific attributes:\\n- cookiesAuthEnabled: \\\"true\\\" / \\\"false\\\",\\n- type: \\\"terminal\\\" / \\\"ide\\\" / \\\"ide-dev\\\",\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": true"]
#[doc = "    },"]
#[doc = "    \"exposure\": {"]
#[doc = "      \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"public\","]
#[doc = "        \"internal\","]
#[doc = "        \"none\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"maxLength\": 15,"]
#[doc = "      \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "    },"]
#[doc = "    \"path\": {"]
#[doc = "      \"description\": \"Path of the endpoint URL\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"protocol\": {"]
#[doc = "      \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"http\","]
#[doc = "        \"https\","]
#[doc = "        \"ws\","]
#[doc = "        \"wss\","]
#[doc = "        \"tcp\","]
#[doc = "        \"udp\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"secure\": {"]
#[doc = "      \"description\": \"Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"targetPort\": {"]
#[doc = "      \"description\": \"Port number to be used within the container component. The same port cannot be used by two different container components.\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
pub struct DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant0EndpointsItem { # [doc = "Annotations to be added to Kubernetes Ingress or Openshift Route"] # [serde (default , skip_serializing_if = ":: std :: collections :: HashMap::is_empty")] pub annotation : :: std :: collections :: HashMap < :: std :: string :: String , :: std :: string :: String > , # [doc = "Map of implementation-dependant string-based free-form attributes.\n\nExamples of Che-specific attributes:\n- cookiesAuthEnabled: \"true\" / \"false\",\n- type: \"terminal\" / \"ide\" / \"ide-dev\","] # [serde (default , skip_serializing_if = "::serde_json::Map::is_empty")] pub attributes : :: serde_json :: Map < :: std :: string :: String , :: serde_json :: Value > , # [doc = "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`"] # [serde (default , skip_serializing_if = "::std::option::Option::is_none")] pub exposure : :: std :: option :: Option < DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant0EndpointsItemExposure > , pub name : DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant0EndpointsItemName , # [doc = "Path of the endpoint URL"] # [serde (default , skip_serializing_if = "::std::option::Option::is_none")] pub path : :: std :: option :: Option < :: std :: string :: String > , # [doc = "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`"] # [serde (default , skip_serializing_if = "::std::option::Option::is_none")] pub protocol : :: std :: option :: Option < DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant0EndpointsItemProtocol > , # [doc = "Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`."] # [serde (default , skip_serializing_if = "::std::option::Option::is_none")] pub secure : :: std :: option :: Option < bool > , # [doc = "Port number to be used within the container component. The same port cannot be used by two different container components."] # [serde (rename = "targetPort" , default , skip_serializing_if = "::std::option::Option::is_none")] pub target_port : :: std :: option :: Option < i64 > , }
impl
    ::std::convert::From<
        &DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant0EndpointsItem,
    >
    for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant0EndpointsItem
{
    fn from(
        value : & DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant0EndpointsItem,
    ) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant0EndpointsItem {
    pub fn builder () -> builder :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant0EndpointsItem{
        Default::default()
    }
}
#[doc = "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"public\","]
#[doc = "    \"internal\","]
#[doc = "    \"none\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant0EndpointsItemExposure
{
    #[serde(rename = "public")]
    Public,
    #[serde(rename = "internal")]
    Internal,
    #[serde(rename = "none")]
    None,
}
impl :: std :: convert :: From < & Self > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant0EndpointsItemExposure { fn from (value : & DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant0EndpointsItemExposure) -> Self { value . clone () } }
impl :: std :: fmt :: Display for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant0EndpointsItemExposure { fn fmt (& self , f : & mut :: std :: fmt :: Formatter < '_ >) -> :: std :: fmt :: Result { match * self { Self :: Public => f . write_str ("public") , Self :: Internal => f . write_str ("internal") , Self :: None => f . write_str ("none") , } } }
impl :: std :: str :: FromStr for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant0EndpointsItemExposure { type Err = self :: error :: ConversionError ; fn from_str (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { match value { "public" => Ok (Self :: Public) , "internal" => Ok (Self :: Internal) , "none" => Ok (Self :: None) , _ => Err ("invalid value" . into ()) , } } }
impl :: std :: convert :: TryFrom < & str > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant0EndpointsItemExposure { type Error = self :: error :: ConversionError ; fn try_from (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < & :: std :: string :: String > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant0EndpointsItemExposure { type Error = self :: error :: ConversionError ; fn try_from (value : & :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < :: std :: string :: String > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant0EndpointsItemExposure { type Error = self :: error :: ConversionError ; fn try_from (value : :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
#[doc = "`DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant0EndpointsItemName`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 15,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant0EndpointsItemName(
    ::std::string::String,
);
impl :: std :: ops :: Deref for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant0EndpointsItemName { type Target = :: std :: string :: String ; fn deref (& self) -> & :: std :: string :: String { & self . 0 } }
impl :: std :: convert :: From < DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant0EndpointsItemName > for :: std :: string :: String { fn from (value : DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant0EndpointsItemName) -> Self { value . 0 } }
impl :: std :: convert :: From < & DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant0EndpointsItemName > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant0EndpointsItemName { fn from (value : & DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant0EndpointsItemName) -> Self { value . clone () } }
impl :: std :: str :: FromStr for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant0EndpointsItemName { type Err = self :: error :: ConversionError ; fn from_str (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { if value . chars () . count () > 15usize { return Err ("longer than 15 characters" . into ()) ; } static PATTERN : :: std :: sync :: LazyLock < :: regress :: Regex > = :: std :: sync :: LazyLock :: new (|| { :: regress :: Regex :: new ("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") . unwrap () }) ; if PATTERN . find (value) . is_none () { return Err ("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"" . into ()) ; } Ok (Self (value . to_string ())) } }
impl :: std :: convert :: TryFrom < & str > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant0EndpointsItemName { type Error = self :: error :: ConversionError ; fn try_from (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < & :: std :: string :: String > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant0EndpointsItemName { type Error = self :: error :: ConversionError ; fn try_from (value : & :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < :: std :: string :: String > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant0EndpointsItemName { type Error = self :: error :: ConversionError ; fn try_from (value : :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl < 'de > :: serde :: Deserialize < 'de > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant0EndpointsItemName { fn deserialize < D > (deserializer : D ,) -> :: std :: result :: Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { :: std :: string :: String :: deserialize (deserializer) ? . parse () . map_err (| e : self :: error :: ConversionError | { < D :: Error as :: serde :: de :: Error > :: custom (e . to_string () ,) }) } }
#[doc = "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"http\","]
#[doc = "    \"https\","]
#[doc = "    \"ws\","]
#[doc = "    \"wss\","]
#[doc = "    \"tcp\","]
#[doc = "    \"udp\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant0EndpointsItemProtocol
{
    #[serde(rename = "http")]
    Http,
    #[serde(rename = "https")]
    Https,
    #[serde(rename = "ws")]
    Ws,
    #[serde(rename = "wss")]
    Wss,
    #[serde(rename = "tcp")]
    Tcp,
    #[serde(rename = "udp")]
    Udp,
}
impl :: std :: convert :: From < & Self > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant0EndpointsItemProtocol { fn from (value : & DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant0EndpointsItemProtocol) -> Self { value . clone () } }
impl :: std :: fmt :: Display for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant0EndpointsItemProtocol { fn fmt (& self , f : & mut :: std :: fmt :: Formatter < '_ >) -> :: std :: fmt :: Result { match * self { Self :: Http => f . write_str ("http") , Self :: Https => f . write_str ("https") , Self :: Ws => f . write_str ("ws") , Self :: Wss => f . write_str ("wss") , Self :: Tcp => f . write_str ("tcp") , Self :: Udp => f . write_str ("udp") , } } }
impl :: std :: str :: FromStr for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant0EndpointsItemProtocol { type Err = self :: error :: ConversionError ; fn from_str (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { match value { "http" => Ok (Self :: Http) , "https" => Ok (Self :: Https) , "ws" => Ok (Self :: Ws) , "wss" => Ok (Self :: Wss) , "tcp" => Ok (Self :: Tcp) , "udp" => Ok (Self :: Udp) , _ => Err ("invalid value" . into ()) , } } }
impl :: std :: convert :: TryFrom < & str > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant0EndpointsItemProtocol { type Error = self :: error :: ConversionError ; fn try_from (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < & :: std :: string :: String > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant0EndpointsItemProtocol { type Error = self :: error :: ConversionError ; fn try_from (value : & :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < :: std :: string :: String > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant0EndpointsItemProtocol { type Error = self :: error :: ConversionError ; fn try_from (value : :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
#[doc = "`DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant1EndpointsItem`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"name\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"annotation\": {"]
#[doc = "      \"description\": \"Annotations to be added to Kubernetes Ingress or Openshift Route\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"attributes\": {"]
#[doc = "      \"description\": \"Map of implementation-dependant string-based free-form attributes.\\n\\nExamples of Che-specific attributes:\\n- cookiesAuthEnabled: \\\"true\\\" / \\\"false\\\",\\n- type: \\\"terminal\\\" / \\\"ide\\\" / \\\"ide-dev\\\",\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": true"]
#[doc = "    },"]
#[doc = "    \"exposure\": {"]
#[doc = "      \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"public\","]
#[doc = "        \"internal\","]
#[doc = "        \"none\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"maxLength\": 15,"]
#[doc = "      \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "    },"]
#[doc = "    \"path\": {"]
#[doc = "      \"description\": \"Path of the endpoint URL\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"protocol\": {"]
#[doc = "      \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"http\","]
#[doc = "        \"https\","]
#[doc = "        \"ws\","]
#[doc = "        \"wss\","]
#[doc = "        \"tcp\","]
#[doc = "        \"udp\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"secure\": {"]
#[doc = "      \"description\": \"Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"targetPort\": {"]
#[doc = "      \"description\": \"Port number to be used within the container component. The same port cannot be used by two different container components.\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
pub struct DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant1EndpointsItem { # [doc = "Annotations to be added to Kubernetes Ingress or Openshift Route"] # [serde (default , skip_serializing_if = ":: std :: collections :: HashMap::is_empty")] pub annotation : :: std :: collections :: HashMap < :: std :: string :: String , :: std :: string :: String > , # [doc = "Map of implementation-dependant string-based free-form attributes.\n\nExamples of Che-specific attributes:\n- cookiesAuthEnabled: \"true\" / \"false\",\n- type: \"terminal\" / \"ide\" / \"ide-dev\","] # [serde (default , skip_serializing_if = "::serde_json::Map::is_empty")] pub attributes : :: serde_json :: Map < :: std :: string :: String , :: serde_json :: Value > , # [doc = "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`"] # [serde (default , skip_serializing_if = "::std::option::Option::is_none")] pub exposure : :: std :: option :: Option < DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant1EndpointsItemExposure > , pub name : DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant1EndpointsItemName , # [doc = "Path of the endpoint URL"] # [serde (default , skip_serializing_if = "::std::option::Option::is_none")] pub path : :: std :: option :: Option < :: std :: string :: String > , # [doc = "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`"] # [serde (default , skip_serializing_if = "::std::option::Option::is_none")] pub protocol : :: std :: option :: Option < DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant1EndpointsItemProtocol > , # [doc = "Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`."] # [serde (default , skip_serializing_if = "::std::option::Option::is_none")] pub secure : :: std :: option :: Option < bool > , # [doc = "Port number to be used within the container component. The same port cannot be used by two different container components."] # [serde (rename = "targetPort" , default , skip_serializing_if = "::std::option::Option::is_none")] pub target_port : :: std :: option :: Option < i64 > , }
impl
    ::std::convert::From<
        &DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant1EndpointsItem,
    >
    for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant1EndpointsItem
{
    fn from(
        value : & DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant1EndpointsItem,
    ) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant1EndpointsItem {
    pub fn builder () -> builder :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant1EndpointsItem{
        Default::default()
    }
}
#[doc = "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"public\","]
#[doc = "    \"internal\","]
#[doc = "    \"none\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant1EndpointsItemExposure
{
    #[serde(rename = "public")]
    Public,
    #[serde(rename = "internal")]
    Internal,
    #[serde(rename = "none")]
    None,
}
impl :: std :: convert :: From < & Self > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant1EndpointsItemExposure { fn from (value : & DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant1EndpointsItemExposure) -> Self { value . clone () } }
impl :: std :: fmt :: Display for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant1EndpointsItemExposure { fn fmt (& self , f : & mut :: std :: fmt :: Formatter < '_ >) -> :: std :: fmt :: Result { match * self { Self :: Public => f . write_str ("public") , Self :: Internal => f . write_str ("internal") , Self :: None => f . write_str ("none") , } } }
impl :: std :: str :: FromStr for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant1EndpointsItemExposure { type Err = self :: error :: ConversionError ; fn from_str (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { match value { "public" => Ok (Self :: Public) , "internal" => Ok (Self :: Internal) , "none" => Ok (Self :: None) , _ => Err ("invalid value" . into ()) , } } }
impl :: std :: convert :: TryFrom < & str > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant1EndpointsItemExposure { type Error = self :: error :: ConversionError ; fn try_from (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < & :: std :: string :: String > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant1EndpointsItemExposure { type Error = self :: error :: ConversionError ; fn try_from (value : & :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < :: std :: string :: String > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant1EndpointsItemExposure { type Error = self :: error :: ConversionError ; fn try_from (value : :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
#[doc = "`DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant1EndpointsItemName`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 15,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant1EndpointsItemName(
    ::std::string::String,
);
impl :: std :: ops :: Deref for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant1EndpointsItemName { type Target = :: std :: string :: String ; fn deref (& self) -> & :: std :: string :: String { & self . 0 } }
impl :: std :: convert :: From < DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant1EndpointsItemName > for :: std :: string :: String { fn from (value : DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant1EndpointsItemName) -> Self { value . 0 } }
impl :: std :: convert :: From < & DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant1EndpointsItemName > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant1EndpointsItemName { fn from (value : & DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant1EndpointsItemName) -> Self { value . clone () } }
impl :: std :: str :: FromStr for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant1EndpointsItemName { type Err = self :: error :: ConversionError ; fn from_str (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { if value . chars () . count () > 15usize { return Err ("longer than 15 characters" . into ()) ; } static PATTERN : :: std :: sync :: LazyLock < :: regress :: Regex > = :: std :: sync :: LazyLock :: new (|| { :: regress :: Regex :: new ("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") . unwrap () }) ; if PATTERN . find (value) . is_none () { return Err ("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"" . into ()) ; } Ok (Self (value . to_string ())) } }
impl :: std :: convert :: TryFrom < & str > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant1EndpointsItemName { type Error = self :: error :: ConversionError ; fn try_from (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < & :: std :: string :: String > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant1EndpointsItemName { type Error = self :: error :: ConversionError ; fn try_from (value : & :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < :: std :: string :: String > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant1EndpointsItemName { type Error = self :: error :: ConversionError ; fn try_from (value : :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl < 'de > :: serde :: Deserialize < 'de > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant1EndpointsItemName { fn deserialize < D > (deserializer : D ,) -> :: std :: result :: Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { :: std :: string :: String :: deserialize (deserializer) ? . parse () . map_err (| e : self :: error :: ConversionError | { < D :: Error as :: serde :: de :: Error > :: custom (e . to_string () ,) }) } }
#[doc = "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"http\","]
#[doc = "    \"https\","]
#[doc = "    \"ws\","]
#[doc = "    \"wss\","]
#[doc = "    \"tcp\","]
#[doc = "    \"udp\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant1EndpointsItemProtocol
{
    #[serde(rename = "http")]
    Http,
    #[serde(rename = "https")]
    Https,
    #[serde(rename = "ws")]
    Ws,
    #[serde(rename = "wss")]
    Wss,
    #[serde(rename = "tcp")]
    Tcp,
    #[serde(rename = "udp")]
    Udp,
}
impl :: std :: convert :: From < & Self > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant1EndpointsItemProtocol { fn from (value : & DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant1EndpointsItemProtocol) -> Self { value . clone () } }
impl :: std :: fmt :: Display for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant1EndpointsItemProtocol { fn fmt (& self , f : & mut :: std :: fmt :: Formatter < '_ >) -> :: std :: fmt :: Result { match * self { Self :: Http => f . write_str ("http") , Self :: Https => f . write_str ("https") , Self :: Ws => f . write_str ("ws") , Self :: Wss => f . write_str ("wss") , Self :: Tcp => f . write_str ("tcp") , Self :: Udp => f . write_str ("udp") , } } }
impl :: std :: str :: FromStr for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant1EndpointsItemProtocol { type Err = self :: error :: ConversionError ; fn from_str (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { match value { "http" => Ok (Self :: Http) , "https" => Ok (Self :: Https) , "ws" => Ok (Self :: Ws) , "wss" => Ok (Self :: Wss) , "tcp" => Ok (Self :: Tcp) , "udp" => Ok (Self :: Udp) , _ => Err ("invalid value" . into ()) , } } }
impl :: std :: convert :: TryFrom < & str > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant1EndpointsItemProtocol { type Error = self :: error :: ConversionError ; fn try_from (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < & :: std :: string :: String > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant1EndpointsItemProtocol { type Error = self :: error :: ConversionError ; fn try_from (value : & :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < :: std :: string :: String > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant1EndpointsItemProtocol { type Error = self :: error :: ConversionError ; fn try_from (value : :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
#[doc = "Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin.\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant1ComponentsItemVariant3Name(::std::string::String);
impl ::std::ops::Deref for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant3Name {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222ParentVariant1ComponentsItemVariant3Name>
    for ::std::string::String
{
    fn from(value: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant3Name) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant1ComponentsItemVariant3Name>
    for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant3Name
{
    fn from(value: &DevfileSchemaVersion222ParentVariant1ComponentsItemVariant3Name) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant3Name {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant3Name
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant3Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant3Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de>
    for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant3Name
{
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Allows specifying the definition of a volume shared by several other components"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Allows specifying the definition of a volume shared by several other components\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"ephemeral\": {"]
#[doc = "      \"description\": \"Ephemeral volumes are not stored persistently across restarts. Defaults to false\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"size\": {"]
#[doc = "      \"description\": \"Size of the volume\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant1ComponentsItemVariant3Volume {
    #[doc = "Ephemeral volumes are not stored persistently across restarts. Defaults to false"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub ephemeral: ::std::option::Option<bool>,
    #[doc = "Size of the volume"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub size: ::std::option::Option<::std::string::String>,
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant1ComponentsItemVariant3Volume>
    for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant3Volume
{
    fn from(value: &DevfileSchemaVersion222ParentVariant1ComponentsItemVariant3Volume) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant1ComponentsItemVariant3Volume {
    pub fn builder() -> builder::DevfileSchemaVersion222ParentVariant1ComponentsItemVariant3Volume {
        Default::default()
    }
}
#[doc = "Allows specifying the definition of an image for outer loop builds"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Allows specifying the definition of an image for outer loop builds\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"dockerfile\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"autoBuild\""]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"autoBuild\": {"]
#[doc = "      \"description\": \"Defines if the image should be built during startup.\\n\\nDefault value is `false`\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"dockerfile\": {"]
#[doc = "      \"description\": \"Allows specifying dockerfile type build\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"required\": ["]
#[doc = "            \"uri\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"required\": ["]
#[doc = "            \"devfileRegistry\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"required\": ["]
#[doc = "            \"git\""]
#[doc = "          ]"]
#[doc = "        }"]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"args\": {"]
#[doc = "          \"description\": \"The arguments to supply to the dockerfile build.\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"buildContext\": {"]
#[doc = "          \"description\": \"Path of source directory to establish build context. Defaults to ${PROJECT_SOURCE} in the container\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"devfileRegistry\": {"]
#[doc = "          \"description\": \"Dockerfile's Devfile Registry source\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"properties\": {"]
#[doc = "            \"id\": {"]
#[doc = "              \"description\": \"Id in a devfile registry that contains a Dockerfile. The src in the OCI registry required for the Dockerfile build will be downloaded for building the image.\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"registryUrl\": {"]
#[doc = "              \"description\": \"Devfile Registry URL to pull the Dockerfile from when using the Devfile Registry as Dockerfile src. To ensure the Dockerfile gets resolved consistently in different environments, it is recommended to always specify the `devfileRegistryUrl` when `Id` is used.\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"git\": {"]
#[doc = "          \"description\": \"Dockerfile's Git source\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"properties\": {"]
#[doc = "            \"checkoutFrom\": {"]
#[doc = "              \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"properties\": {"]
#[doc = "                \"remote\": {"]
#[doc = "                  \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                },"]
#[doc = "                \"revision\": {"]
#[doc = "                  \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            },"]
#[doc = "            \"fileLocation\": {"]
#[doc = "              \"description\": \"Location of the Dockerfile in the Git repository when using git as Dockerfile src. Defaults to Dockerfile.\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"remotes\": {"]
#[doc = "              \"description\": \"The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"additionalProperties\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"rootRequired\": {"]
#[doc = "          \"description\": \"Specify if a privileged builder pod is required.\\n\\nDefault value is `false`\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"uri\": {"]
#[doc = "          \"description\": \"URI Reference of a Dockerfile. It can be a full URL or a relative URI from the current devfile as the base URI.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"imageName\": {"]
#[doc = "      \"description\": \"Name of the image for the resulting outerloop build\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged, deny_unknown_fields)]
pub enum DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4Image {
    Variant0 {
        dockerfile:
            DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4ImageVariant0Dockerfile,
        #[doc = "Name of the image for the resulting outerloop build"]
        #[serde(
            rename = "imageName",
            default,
            skip_serializing_if = "::std::option::Option::is_none"
        )]
        image_name: ::std::option::Option<::std::string::String>,
    },
    Variant1 {
        #[doc = "Defines if the image should be built during startup.\n\nDefault value is `false`"]
        #[serde(rename = "autoBuild")]
        auto_build: bool,
        #[doc = "Name of the image for the resulting outerloop build"]
        #[serde(
            rename = "imageName",
            default,
            skip_serializing_if = "::std::option::Option::is_none"
        )]
        image_name: ::std::option::Option<::std::string::String>,
    },
}
impl ::std::convert::From<&Self>
    for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4Image
{
    fn from(value: &DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4Image) -> Self {
        value.clone()
    }
}
#[doc = "Allows specifying dockerfile type build"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Allows specifying dockerfile type build\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"uri\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"devfileRegistry\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"git\""]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"args\": {"]
#[doc = "      \"description\": \"The arguments to supply to the dockerfile build.\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"buildContext\": {"]
#[doc = "      \"description\": \"Path of source directory to establish build context. Defaults to ${PROJECT_SOURCE} in the container\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"devfileRegistry\": {"]
#[doc = "      \"description\": \"Dockerfile's Devfile Registry source\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"id\": {"]
#[doc = "          \"description\": \"Id in a devfile registry that contains a Dockerfile. The src in the OCI registry required for the Dockerfile build will be downloaded for building the image.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"registryUrl\": {"]
#[doc = "          \"description\": \"Devfile Registry URL to pull the Dockerfile from when using the Devfile Registry as Dockerfile src. To ensure the Dockerfile gets resolved consistently in different environments, it is recommended to always specify the `devfileRegistryUrl` when `Id` is used.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"git\": {"]
#[doc = "      \"description\": \"Dockerfile's Git source\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"checkoutFrom\": {"]
#[doc = "          \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"properties\": {"]
#[doc = "            \"remote\": {"]
#[doc = "              \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"revision\": {"]
#[doc = "              \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"fileLocation\": {"]
#[doc = "          \"description\": \"Location of the Dockerfile in the Git repository when using git as Dockerfile src. Defaults to Dockerfile.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"remotes\": {"]
#[doc = "          \"description\": \"The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"additionalProperties\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"rootRequired\": {"]
#[doc = "      \"description\": \"Specify if a privileged builder pod is required.\\n\\nDefault value is `false`\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"uri\": {"]
#[doc = "      \"description\": \"URI Reference of a Dockerfile. It can be a full URL or a relative URI from the current devfile as the base URI.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged, deny_unknown_fields)]
pub enum DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4ImageVariant0Dockerfile {
    Variant0 { # [doc = "The arguments to supply to the dockerfile build."] # [serde (default , skip_serializing_if = "::std::vec::Vec::is_empty")] args : :: std :: vec :: Vec < :: std :: string :: String > , # [doc = "Path of source directory to establish build context. Defaults to ${PROJECT_SOURCE} in the container"] # [serde (rename = "buildContext" , default , skip_serializing_if = "::std::option::Option::is_none")] build_context : :: std :: option :: Option < :: std :: string :: String > , # [doc = "Specify if a privileged builder pod is required.\n\nDefault value is `false`"] # [serde (rename = "rootRequired" , default , skip_serializing_if = "::std::option::Option::is_none")] root_required : :: std :: option :: Option < bool > , # [doc = "URI Reference of a Dockerfile. It can be a full URL or a relative URI from the current devfile as the base URI."] uri : :: std :: string :: String , } , Variant1 { # [doc = "The arguments to supply to the dockerfile build."] # [serde (default , skip_serializing_if = "::std::vec::Vec::is_empty")] args : :: std :: vec :: Vec < :: std :: string :: String > , # [doc = "Path of source directory to establish build context. Defaults to ${PROJECT_SOURCE} in the container"] # [serde (rename = "buildContext" , default , skip_serializing_if = "::std::option::Option::is_none")] build_context : :: std :: option :: Option < :: std :: string :: String > , # [serde (rename = "devfileRegistry")] devfile_registry : DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4ImageVariant0DockerfileVariant1DevfileRegistry , # [doc = "Specify if a privileged builder pod is required.\n\nDefault value is `false`"] # [serde (rename = "rootRequired" , default , skip_serializing_if = "::std::option::Option::is_none")] root_required : :: std :: option :: Option < bool > , } , Variant2 { # [doc = "The arguments to supply to the dockerfile build."] # [serde (default , skip_serializing_if = "::std::vec::Vec::is_empty")] args : :: std :: vec :: Vec < :: std :: string :: String > , # [doc = "Path of source directory to establish build context. Defaults to ${PROJECT_SOURCE} in the container"] # [serde (rename = "buildContext" , default , skip_serializing_if = "::std::option::Option::is_none")] build_context : :: std :: option :: Option < :: std :: string :: String > , git : DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4ImageVariant0DockerfileVariant2Git , # [doc = "Specify if a privileged builder pod is required.\n\nDefault value is `false`"] # [serde (rename = "rootRequired" , default , skip_serializing_if = "::std::option::Option::is_none")] root_required : :: std :: option :: Option < bool > , } , }
impl ::std::convert::From<&Self>
    for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4ImageVariant0Dockerfile
{
    fn from(
        value: &DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4ImageVariant0Dockerfile,
    ) -> Self {
        value.clone()
    }
}
#[doc = "Dockerfile's Devfile Registry source"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Dockerfile's Devfile Registry source\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"id\": {"]
#[doc = "      \"description\": \"Id in a devfile registry that contains a Dockerfile. The src in the OCI registry required for the Dockerfile build will be downloaded for building the image.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"registryUrl\": {"]
#[doc = "      \"description\": \"Devfile Registry URL to pull the Dockerfile from when using the Devfile Registry as Dockerfile src. To ensure the Dockerfile gets resolved consistently in different environments, it is recommended to always specify the `devfileRegistryUrl` when `Id` is used.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4ImageVariant0DockerfileVariant1DevfileRegistry
{
    #[doc = "Id in a devfile registry that contains a Dockerfile. The src in the OCI registry required for the Dockerfile build will be downloaded for building the image."]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub id: ::std::option::Option<::std::string::String>,
    #[doc = "Devfile Registry URL to pull the Dockerfile from when using the Devfile Registry as Dockerfile src. To ensure the Dockerfile gets resolved consistently in different environments, it is recommended to always specify the `devfileRegistryUrl` when `Id` is used."]
    #[serde(
        rename = "registryUrl",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub registry_url: ::std::option::Option<::std::string::String>,
}
impl :: std :: convert :: From < & DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4ImageVariant0DockerfileVariant1DevfileRegistry > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4ImageVariant0DockerfileVariant1DevfileRegistry { fn from (value : & DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4ImageVariant0DockerfileVariant1DevfileRegistry) -> Self { value . clone () } }
impl DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4ImageVariant0DockerfileVariant1DevfileRegistry { pub fn builder () -> builder :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4ImageVariant0DockerfileVariant1DevfileRegistry { Default :: default () } }
#[doc = "Dockerfile's Git source"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Dockerfile's Git source\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"checkoutFrom\": {"]
#[doc = "      \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"remote\": {"]
#[doc = "          \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"revision\": {"]
#[doc = "          \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"fileLocation\": {"]
#[doc = "      \"description\": \"Location of the Dockerfile in the Git repository when using git as Dockerfile src. Defaults to Dockerfile.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"remotes\": {"]
#[doc = "      \"description\": \"The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4ImageVariant0DockerfileVariant2Git { # [serde (rename = "checkoutFrom" , default , skip_serializing_if = "::std::option::Option::is_none")] pub checkout_from : :: std :: option :: Option < DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4ImageVariant0DockerfileVariant2GitCheckoutFrom > , # [doc = "Location of the Dockerfile in the Git repository when using git as Dockerfile src. Defaults to Dockerfile."] # [serde (rename = "fileLocation" , default , skip_serializing_if = "::std::option::Option::is_none")] pub file_location : :: std :: option :: Option < :: std :: string :: String > , # [doc = "The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured."] # [serde (default , skip_serializing_if = ":: std :: collections :: HashMap::is_empty")] pub remotes : :: std :: collections :: HashMap < :: std :: string :: String , :: std :: string :: String > , }
impl :: std :: convert :: From < & DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4ImageVariant0DockerfileVariant2Git > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4ImageVariant0DockerfileVariant2Git { fn from (value : & DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4ImageVariant0DockerfileVariant2Git) -> Self { value . clone () } }
impl DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4ImageVariant0DockerfileVariant2Git {
    pub fn builder () -> builder :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4ImageVariant0DockerfileVariant2Git{
        Default::default()
    }
}
#[doc = "Defines from what the project should be checked out. Required if there are more than one remote configured"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"remote\": {"]
#[doc = "      \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"revision\": {"]
#[doc = "      \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4ImageVariant0DockerfileVariant2GitCheckoutFrom
{
    #[doc = "The remote name should be used as init. Required if there are more than one remote configured"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub remote: ::std::option::Option<::std::string::String>,
    #[doc = "The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found."]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub revision: ::std::option::Option<::std::string::String>,
}
impl :: std :: convert :: From < & DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4ImageVariant0DockerfileVariant2GitCheckoutFrom > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4ImageVariant0DockerfileVariant2GitCheckoutFrom { fn from (value : & DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4ImageVariant0DockerfileVariant2GitCheckoutFrom) -> Self { value . clone () } }
impl DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4ImageVariant0DockerfileVariant2GitCheckoutFrom { pub fn builder () -> builder :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4ImageVariant0DockerfileVariant2GitCheckoutFrom { Default :: default () } }
#[doc = "Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin.\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4Name(::std::string::String);
impl ::std::ops::Deref for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4Name {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4Name>
    for ::std::string::String
{
    fn from(value: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4Name) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4Name>
    for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4Name
{
    fn from(value: &DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4Name) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4Name {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4Name
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de>
    for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4Name
{
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "`DevfileSchemaVersion222ParentVariant1DependentProjectsItem`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"git\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"zip\""]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  ],"]
#[doc = "  \"required\": ["]
#[doc = "    \"name\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"attributes\": {"]
#[doc = "      \"description\": \"Map of implementation-dependant free-form YAML attributes.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": true"]
#[doc = "    },"]
#[doc = "    \"clonePath\": {"]
#[doc = "      \"description\": \"Path relative to the root of the projects to which this project should be cloned into. This is a unix-style relative path (i.e. uses forward slashes). The path is invalid if it is absolute or tries to escape the project root through the usage of '..'. If not specified, defaults to the project name.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git\": {"]
#[doc = "      \"description\": \"Project's Git source\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"checkoutFrom\": {"]
#[doc = "          \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"properties\": {"]
#[doc = "            \"remote\": {"]
#[doc = "              \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"revision\": {"]
#[doc = "              \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"remotes\": {"]
#[doc = "          \"description\": \"The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"additionalProperties\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"description\": \"Project name\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"maxLength\": 63,"]
#[doc = "      \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "    },"]
#[doc = "    \"zip\": {"]
#[doc = "      \"description\": \"Project's Zip source\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"location\": {"]
#[doc = "          \"description\": \"Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged, deny_unknown_fields)]
pub enum DevfileSchemaVersion222ParentVariant1DependentProjectsItem {
    Variant0 {
        #[doc = "Map of implementation-dependant free-form YAML attributes."]
        #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
        attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
        #[doc = "Path relative to the root of the projects to which this project should be cloned into. This is a unix-style relative path (i.e. uses forward slashes). The path is invalid if it is absolute or tries to escape the project root through the usage of '..'. If not specified, defaults to the project name."]
        #[serde(
            rename = "clonePath",
            default,
            skip_serializing_if = "::std::option::Option::is_none"
        )]
        clone_path: ::std::option::Option<::std::string::String>,
        git: DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant0Git,
        #[doc = "Project name"]
        name: DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant0Name,
    },
    Variant1 {
        #[doc = "Map of implementation-dependant free-form YAML attributes."]
        #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
        attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
        #[doc = "Path relative to the root of the projects to which this project should be cloned into. This is a unix-style relative path (i.e. uses forward slashes). The path is invalid if it is absolute or tries to escape the project root through the usage of '..'. If not specified, defaults to the project name."]
        #[serde(
            rename = "clonePath",
            default,
            skip_serializing_if = "::std::option::Option::is_none"
        )]
        clone_path: ::std::option::Option<::std::string::String>,
        #[doc = "Project name"]
        name: DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant1Name,
        zip: DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant1Zip,
    },
}
impl ::std::convert::From<&Self> for DevfileSchemaVersion222ParentVariant1DependentProjectsItem {
    fn from(value: &DevfileSchemaVersion222ParentVariant1DependentProjectsItem) -> Self {
        value.clone()
    }
}
#[doc = "Project's Git source"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Project's Git source\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"checkoutFrom\": {"]
#[doc = "      \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"remote\": {"]
#[doc = "          \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"revision\": {"]
#[doc = "          \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"remotes\": {"]
#[doc = "      \"description\": \"The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant0Git {
    #[serde(
        rename = "checkoutFrom",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub checkout_from: ::std::option::Option<
        DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant0GitCheckoutFrom,
    >,
    #[doc = "The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured."]
    #[serde(
        default,
        skip_serializing_if = ":: std :: collections :: HashMap::is_empty"
    )]
    pub remotes: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant0Git>
    for DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant0Git
{
    fn from(value: &DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant0Git) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant0Git {
    pub fn builder(
    ) -> builder::DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant0Git {
        Default::default()
    }
}
#[doc = "Defines from what the project should be checked out. Required if there are more than one remote configured"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"remote\": {"]
#[doc = "      \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"revision\": {"]
#[doc = "      \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant0GitCheckoutFrom {
    #[doc = "The remote name should be used as init. Required if there are more than one remote configured"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub remote: ::std::option::Option<::std::string::String>,
    #[doc = "The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found."]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub revision: ::std::option::Option<::std::string::String>,
}
impl
    ::std::convert::From<
        &DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant0GitCheckoutFrom,
    > for DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant0GitCheckoutFrom
{
    fn from(
        value: &DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant0GitCheckoutFrom,
    ) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant0GitCheckoutFrom {
    pub fn builder(
    ) -> builder::DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant0GitCheckoutFrom
    {
        Default::default()
    }
}
#[doc = "Project name"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Project name\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant0Name(
    ::std::string::String,
);
impl ::std::ops::Deref for DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant0Name {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant0Name>
    for ::std::string::String
{
    fn from(value: DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant0Name) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant0Name>
    for DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant0Name
{
    fn from(
        value: &DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant0Name,
    ) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr
    for DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant0Name
{
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant0Name
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant0Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant0Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de>
    for DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant0Name
{
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Project name"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Project name\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant1Name(
    ::std::string::String,
);
impl ::std::ops::Deref for DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant1Name {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant1Name>
    for ::std::string::String
{
    fn from(value: DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant1Name) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant1Name>
    for DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant1Name
{
    fn from(
        value: &DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant1Name,
    ) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr
    for DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant1Name
{
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant1Name
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant1Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant1Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de>
    for DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant1Name
{
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Project's Zip source"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Project's Zip source\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"location\": {"]
#[doc = "      \"description\": \"Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant1Zip {
    #[doc = "Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub location: ::std::option::Option<::std::string::String>,
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant1Zip>
    for DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant1Zip
{
    fn from(value: &DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant1Zip) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant1Zip {
    pub fn builder(
    ) -> builder::DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant1Zip {
        Default::default()
    }
}
#[doc = "`DevfileSchemaVersion222ParentVariant1ProjectsItem`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"git\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"zip\""]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  ],"]
#[doc = "  \"required\": ["]
#[doc = "    \"name\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"attributes\": {"]
#[doc = "      \"description\": \"Map of implementation-dependant free-form YAML attributes.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": true"]
#[doc = "    },"]
#[doc = "    \"clonePath\": {"]
#[doc = "      \"description\": \"Path relative to the root of the projects to which this project should be cloned into. This is a unix-style relative path (i.e. uses forward slashes). The path is invalid if it is absolute or tries to escape the project root through the usage of '..'. If not specified, defaults to the project name.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git\": {"]
#[doc = "      \"description\": \"Project's Git source\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"checkoutFrom\": {"]
#[doc = "          \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"properties\": {"]
#[doc = "            \"remote\": {"]
#[doc = "              \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"revision\": {"]
#[doc = "              \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"remotes\": {"]
#[doc = "          \"description\": \"The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"additionalProperties\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"description\": \"Project name\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"maxLength\": 63,"]
#[doc = "      \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "    },"]
#[doc = "    \"zip\": {"]
#[doc = "      \"description\": \"Project's Zip source\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"location\": {"]
#[doc = "          \"description\": \"Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged, deny_unknown_fields)]
pub enum DevfileSchemaVersion222ParentVariant1ProjectsItem {
    Variant0 {
        #[doc = "Map of implementation-dependant free-form YAML attributes."]
        #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
        attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
        #[doc = "Path relative to the root of the projects to which this project should be cloned into. This is a unix-style relative path (i.e. uses forward slashes). The path is invalid if it is absolute or tries to escape the project root through the usage of '..'. If not specified, defaults to the project name."]
        #[serde(
            rename = "clonePath",
            default,
            skip_serializing_if = "::std::option::Option::is_none"
        )]
        clone_path: ::std::option::Option<::std::string::String>,
        git: DevfileSchemaVersion222ParentVariant1ProjectsItemVariant0Git,
        #[doc = "Project name"]
        name: DevfileSchemaVersion222ParentVariant1ProjectsItemVariant0Name,
    },
    Variant1 {
        #[doc = "Map of implementation-dependant free-form YAML attributes."]
        #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
        attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
        #[doc = "Path relative to the root of the projects to which this project should be cloned into. This is a unix-style relative path (i.e. uses forward slashes). The path is invalid if it is absolute or tries to escape the project root through the usage of '..'. If not specified, defaults to the project name."]
        #[serde(
            rename = "clonePath",
            default,
            skip_serializing_if = "::std::option::Option::is_none"
        )]
        clone_path: ::std::option::Option<::std::string::String>,
        #[doc = "Project name"]
        name: DevfileSchemaVersion222ParentVariant1ProjectsItemVariant1Name,
        zip: DevfileSchemaVersion222ParentVariant1ProjectsItemVariant1Zip,
    },
}
impl ::std::convert::From<&Self> for DevfileSchemaVersion222ParentVariant1ProjectsItem {
    fn from(value: &DevfileSchemaVersion222ParentVariant1ProjectsItem) -> Self {
        value.clone()
    }
}
#[doc = "Project's Git source"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Project's Git source\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"checkoutFrom\": {"]
#[doc = "      \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"remote\": {"]
#[doc = "          \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"revision\": {"]
#[doc = "          \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"remotes\": {"]
#[doc = "      \"description\": \"The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant1ProjectsItemVariant0Git {
    #[serde(
        rename = "checkoutFrom",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub checkout_from: ::std::option::Option<
        DevfileSchemaVersion222ParentVariant1ProjectsItemVariant0GitCheckoutFrom,
    >,
    #[doc = "The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured."]
    #[serde(
        default,
        skip_serializing_if = ":: std :: collections :: HashMap::is_empty"
    )]
    pub remotes: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant1ProjectsItemVariant0Git>
    for DevfileSchemaVersion222ParentVariant1ProjectsItemVariant0Git
{
    fn from(value: &DevfileSchemaVersion222ParentVariant1ProjectsItemVariant0Git) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant1ProjectsItemVariant0Git {
    pub fn builder() -> builder::DevfileSchemaVersion222ParentVariant1ProjectsItemVariant0Git {
        Default::default()
    }
}
#[doc = "Defines from what the project should be checked out. Required if there are more than one remote configured"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"remote\": {"]
#[doc = "      \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"revision\": {"]
#[doc = "      \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant1ProjectsItemVariant0GitCheckoutFrom {
    #[doc = "The remote name should be used as init. Required if there are more than one remote configured"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub remote: ::std::option::Option<::std::string::String>,
    #[doc = "The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found."]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub revision: ::std::option::Option<::std::string::String>,
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant1ProjectsItemVariant0GitCheckoutFrom>
    for DevfileSchemaVersion222ParentVariant1ProjectsItemVariant0GitCheckoutFrom
{
    fn from(
        value: &DevfileSchemaVersion222ParentVariant1ProjectsItemVariant0GitCheckoutFrom,
    ) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant1ProjectsItemVariant0GitCheckoutFrom {
    pub fn builder(
    ) -> builder::DevfileSchemaVersion222ParentVariant1ProjectsItemVariant0GitCheckoutFrom {
        Default::default()
    }
}
#[doc = "Project name"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Project name\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant1ProjectsItemVariant0Name(::std::string::String);
impl ::std::ops::Deref for DevfileSchemaVersion222ParentVariant1ProjectsItemVariant0Name {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222ParentVariant1ProjectsItemVariant0Name>
    for ::std::string::String
{
    fn from(value: DevfileSchemaVersion222ParentVariant1ProjectsItemVariant0Name) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant1ProjectsItemVariant0Name>
    for DevfileSchemaVersion222ParentVariant1ProjectsItemVariant0Name
{
    fn from(value: &DevfileSchemaVersion222ParentVariant1ProjectsItemVariant0Name) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for DevfileSchemaVersion222ParentVariant1ProjectsItemVariant0Name {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ParentVariant1ProjectsItemVariant0Name
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant1ProjectsItemVariant0Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant1ProjectsItemVariant0Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de>
    for DevfileSchemaVersion222ParentVariant1ProjectsItemVariant0Name
{
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Project name"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Project name\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant1ProjectsItemVariant1Name(::std::string::String);
impl ::std::ops::Deref for DevfileSchemaVersion222ParentVariant1ProjectsItemVariant1Name {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222ParentVariant1ProjectsItemVariant1Name>
    for ::std::string::String
{
    fn from(value: DevfileSchemaVersion222ParentVariant1ProjectsItemVariant1Name) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant1ProjectsItemVariant1Name>
    for DevfileSchemaVersion222ParentVariant1ProjectsItemVariant1Name
{
    fn from(value: &DevfileSchemaVersion222ParentVariant1ProjectsItemVariant1Name) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for DevfileSchemaVersion222ParentVariant1ProjectsItemVariant1Name {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ParentVariant1ProjectsItemVariant1Name
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant1ProjectsItemVariant1Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant1ProjectsItemVariant1Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de>
    for DevfileSchemaVersion222ParentVariant1ProjectsItemVariant1Name
{
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Project's Zip source"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Project's Zip source\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"location\": {"]
#[doc = "      \"description\": \"Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant1ProjectsItemVariant1Zip {
    #[doc = "Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub location: ::std::option::Option<::std::string::String>,
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant1ProjectsItemVariant1Zip>
    for DevfileSchemaVersion222ParentVariant1ProjectsItemVariant1Zip
{
    fn from(value: &DevfileSchemaVersion222ParentVariant1ProjectsItemVariant1Zip) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant1ProjectsItemVariant1Zip {
    pub fn builder() -> builder::DevfileSchemaVersion222ParentVariant1ProjectsItemVariant1Zip {
        Default::default()
    }
}
#[doc = "`DevfileSchemaVersion222ParentVariant1StarterProjectsItem`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"git\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"zip\""]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  ],"]
#[doc = "  \"required\": ["]
#[doc = "    \"name\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"attributes\": {"]
#[doc = "      \"description\": \"Map of implementation-dependant free-form YAML attributes.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": true"]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"description\": \"Description of a starter project\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git\": {"]
#[doc = "      \"description\": \"Project's Git source\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"checkoutFrom\": {"]
#[doc = "          \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"properties\": {"]
#[doc = "            \"remote\": {"]
#[doc = "              \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"revision\": {"]
#[doc = "              \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"remotes\": {"]
#[doc = "          \"description\": \"The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"additionalProperties\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"description\": \"Project name\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"maxLength\": 63,"]
#[doc = "      \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "    },"]
#[doc = "    \"subDir\": {"]
#[doc = "      \"description\": \"Sub-directory from a starter project to be used as root for starter project.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"zip\": {"]
#[doc = "      \"description\": \"Project's Zip source\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"location\": {"]
#[doc = "          \"description\": \"Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged, deny_unknown_fields)]
pub enum DevfileSchemaVersion222ParentVariant1StarterProjectsItem {
    Variant0 {
        #[doc = "Map of implementation-dependant free-form YAML attributes."]
        #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
        attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
        #[doc = "Description of a starter project"]
        #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
        description: ::std::option::Option<::std::string::String>,
        git: DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant0Git,
        #[doc = "Project name"]
        name: DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant0Name,
        #[doc = "Sub-directory from a starter project to be used as root for starter project."]
        #[serde(
            rename = "subDir",
            default,
            skip_serializing_if = "::std::option::Option::is_none"
        )]
        sub_dir: ::std::option::Option<::std::string::String>,
    },
    Variant1 {
        #[doc = "Map of implementation-dependant free-form YAML attributes."]
        #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
        attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
        #[doc = "Description of a starter project"]
        #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
        description: ::std::option::Option<::std::string::String>,
        #[doc = "Project name"]
        name: DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant1Name,
        #[doc = "Sub-directory from a starter project to be used as root for starter project."]
        #[serde(
            rename = "subDir",
            default,
            skip_serializing_if = "::std::option::Option::is_none"
        )]
        sub_dir: ::std::option::Option<::std::string::String>,
        zip: DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant1Zip,
    },
}
impl ::std::convert::From<&Self> for DevfileSchemaVersion222ParentVariant1StarterProjectsItem {
    fn from(value: &DevfileSchemaVersion222ParentVariant1StarterProjectsItem) -> Self {
        value.clone()
    }
}
#[doc = "Project's Git source"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Project's Git source\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"checkoutFrom\": {"]
#[doc = "      \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"remote\": {"]
#[doc = "          \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"revision\": {"]
#[doc = "          \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"remotes\": {"]
#[doc = "      \"description\": \"The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant0Git {
    #[serde(
        rename = "checkoutFrom",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub checkout_from: ::std::option::Option<
        DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant0GitCheckoutFrom,
    >,
    #[doc = "The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured."]
    #[serde(
        default,
        skip_serializing_if = ":: std :: collections :: HashMap::is_empty"
    )]
    pub remotes: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant0Git>
    for DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant0Git
{
    fn from(value: &DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant0Git) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant0Git {
    pub fn builder() -> builder::DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant0Git
    {
        Default::default()
    }
}
#[doc = "Defines from what the project should be checked out. Required if there are more than one remote configured"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"remote\": {"]
#[doc = "      \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"revision\": {"]
#[doc = "      \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant0GitCheckoutFrom {
    #[doc = "The remote name should be used as init. Required if there are more than one remote configured"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub remote: ::std::option::Option<::std::string::String>,
    #[doc = "The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found."]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub revision: ::std::option::Option<::std::string::String>,
}
impl
    ::std::convert::From<
        &DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant0GitCheckoutFrom,
    > for DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant0GitCheckoutFrom
{
    fn from(
        value: &DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant0GitCheckoutFrom,
    ) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant0GitCheckoutFrom {
    pub fn builder(
    ) -> builder::DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant0GitCheckoutFrom
    {
        Default::default()
    }
}
#[doc = "Project name"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Project name\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant0Name(
    ::std::string::String,
);
impl ::std::ops::Deref for DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant0Name {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant0Name>
    for ::std::string::String
{
    fn from(value: DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant0Name) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant0Name>
    for DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant0Name
{
    fn from(value: &DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant0Name) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant0Name {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant0Name
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant0Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant0Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de>
    for DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant0Name
{
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Project name"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Project name\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant1Name(
    ::std::string::String,
);
impl ::std::ops::Deref for DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant1Name {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant1Name>
    for ::std::string::String
{
    fn from(value: DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant1Name) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant1Name>
    for DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant1Name
{
    fn from(value: &DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant1Name) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant1Name {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant1Name
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant1Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant1Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de>
    for DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant1Name
{
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Project's Zip source"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Project's Zip source\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"location\": {"]
#[doc = "      \"description\": \"Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant1Zip {
    #[doc = "Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub location: ::std::option::Option<::std::string::String>,
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant1Zip>
    for DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant1Zip
{
    fn from(value: &DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant1Zip) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant1Zip {
    pub fn builder() -> builder::DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant1Zip
    {
        Default::default()
    }
}
#[doc = "Specific stack/sample version to pull the parent devfile from, when using id in the parent reference. To specify `version`, `id` must be defined and used as the import reference source. `version` can be either a specific stack version, or `latest`. If no `version` specified, default version will be used."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Specific stack/sample version to pull the parent devfile from, when using id in the parent reference. To specify `version`, `id` must be defined and used as the import reference source. `version` can be either a specific stack version, or `latest`. If no `version` specified, default version will be used.\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"pattern\": \"^(latest)|(([1-9])\\\\.([0-9]+)\\\\.([0-9]+)(\\\\-[0-9a-z-]+(\\\\.[0-9a-z-]+)*)?(\\\\+[0-9A-Za-z-]+(\\\\.[0-9A-Za-z-]+)*)?)$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant1Version(::std::string::String);
impl ::std::ops::Deref for DevfileSchemaVersion222ParentVariant1Version {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222ParentVariant1Version> for ::std::string::String {
    fn from(value: DevfileSchemaVersion222ParentVariant1Version) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant1Version>
    for DevfileSchemaVersion222ParentVariant1Version
{
    fn from(value: &DevfileSchemaVersion222ParentVariant1Version) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for DevfileSchemaVersion222ParentVariant1Version {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> = ::std::sync::LazyLock::new(
            || {
                :: regress :: Regex :: new ("^(latest)|(([1-9])\\.([0-9]+)\\.([0-9]+)(\\-[0-9a-z-]+(\\.[0-9a-z-]+)*)?(\\+[0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*)?)$") . unwrap ()
            },
        );
        if PATTERN.find(value).is_none() {
            return Err ("doesn't match pattern \"^(latest)|(([1-9])\\.([0-9]+)\\.([0-9]+)(\\-[0-9a-z-]+(\\.[0-9a-z-]+)*)?(\\+[0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*)?)$\"" . into ()) ;
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str> for DevfileSchemaVersion222ParentVariant1Version {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant1Version
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant1Version
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de> for DevfileSchemaVersion222ParentVariant1Version {
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "`DevfileSchemaVersion222ParentVariant2CommandsItem`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"exec\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"apply\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"composite\""]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  ],"]
#[doc = "  \"required\": ["]
#[doc = "    \"id\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"apply\": {"]
#[doc = "      \"description\": \"Command that consists in applying a given component definition, typically bound to a devworkspace event.\\n\\nFor example, when an `apply` command is bound to a `preStart` event, and references a `container` component, it will start the container as a K8S initContainer in the devworkspace POD, unless the component has its `dedicatedPod` field set to `true`.\\n\\nWhen no `apply` command exist for a given component, it is assumed the component will be applied at devworkspace start by default, unless `deployByDefault` for that component is set to false.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"component\": {"]
#[doc = "          \"description\": \"Describes component that will be applied\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"group\": {"]
#[doc = "          \"description\": \"Defines the group this command is part of\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"properties\": {"]
#[doc = "            \"isDefault\": {"]
#[doc = "              \"description\": \"Identifies the default command for a given group kind\","]
#[doc = "              \"type\": \"boolean\""]
#[doc = "            },"]
#[doc = "            \"kind\": {"]
#[doc = "              \"description\": \"Kind of group the command is part of\","]
#[doc = "              \"type\": \"string\","]
#[doc = "              \"enum\": ["]
#[doc = "                \"build\","]
#[doc = "                \"run\","]
#[doc = "                \"test\","]
#[doc = "                \"debug\","]
#[doc = "                \"deploy\""]
#[doc = "              ]"]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"label\": {"]
#[doc = "          \"description\": \"Optional label that provides a label for this command to be used in Editor UI menus for example\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"attributes\": {"]
#[doc = "      \"description\": \"Map of implementation-dependant free-form YAML attributes.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": true"]
#[doc = "    },"]
#[doc = "    \"composite\": {"]
#[doc = "      \"description\": \"Composite command that allows executing several sub-commands either sequentially or concurrently\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"commands\": {"]
#[doc = "          \"description\": \"The commands that comprise this composite command\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"group\": {"]
#[doc = "          \"description\": \"Defines the group this command is part of\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"properties\": {"]
#[doc = "            \"isDefault\": {"]
#[doc = "              \"description\": \"Identifies the default command for a given group kind\","]
#[doc = "              \"type\": \"boolean\""]
#[doc = "            },"]
#[doc = "            \"kind\": {"]
#[doc = "              \"description\": \"Kind of group the command is part of\","]
#[doc = "              \"type\": \"string\","]
#[doc = "              \"enum\": ["]
#[doc = "                \"build\","]
#[doc = "                \"run\","]
#[doc = "                \"test\","]
#[doc = "                \"debug\","]
#[doc = "                \"deploy\""]
#[doc = "              ]"]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"label\": {"]
#[doc = "          \"description\": \"Optional label that provides a label for this command to be used in Editor UI menus for example\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"parallel\": {"]
#[doc = "          \"description\": \"Indicates if the sub-commands should be executed concurrently\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"exec\": {"]
#[doc = "      \"description\": \"CLI Command executed in an existing component container\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"commandLine\": {"]
#[doc = "          \"description\": \"The actual command-line string\\n\\nSpecial variables that can be used:\\n\\n - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping.\\n\\n - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"component\": {"]
#[doc = "          \"description\": \"Describes component to which given action relates\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"env\": {"]
#[doc = "          \"description\": \"Optional list of environment variables that have to be set before running the command\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"required\": ["]
#[doc = "              \"name\""]
#[doc = "            ],"]
#[doc = "            \"properties\": {"]
#[doc = "              \"name\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              },"]
#[doc = "              \"value\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"additionalProperties\": false"]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"group\": {"]
#[doc = "          \"description\": \"Defines the group this command is part of\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"properties\": {"]
#[doc = "            \"isDefault\": {"]
#[doc = "              \"description\": \"Identifies the default command for a given group kind\","]
#[doc = "              \"type\": \"boolean\""]
#[doc = "            },"]
#[doc = "            \"kind\": {"]
#[doc = "              \"description\": \"Kind of group the command is part of\","]
#[doc = "              \"type\": \"string\","]
#[doc = "              \"enum\": ["]
#[doc = "                \"build\","]
#[doc = "                \"run\","]
#[doc = "                \"test\","]
#[doc = "                \"debug\","]
#[doc = "                \"deploy\""]
#[doc = "              ]"]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"hotReloadCapable\": {"]
#[doc = "          \"description\": \"Specify whether the command is restarted or not when the source code changes. If set to `true` the command won't be restarted. A *hotReloadCapable* `run` or `debug` command is expected to handle file changes on its own and won't be restarted. A *hotReloadCapable* `build` command is expected to be executed only once and won't be executed again. This field is taken into account only for commands `build`, `run` and `debug` with `isDefault` set to `true`.\\n\\nDefault value is `false`\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"label\": {"]
#[doc = "          \"description\": \"Optional label that provides a label for this command to be used in Editor UI menus for example\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"workingDir\": {"]
#[doc = "          \"description\": \"Working directory where the command should be executed\\n\\nSpecial variables that can be used:\\n\\n - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping.\\n\\n - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"description\": \"Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"maxLength\": 63,"]
#[doc = "      \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged, deny_unknown_fields)]
pub enum DevfileSchemaVersion222ParentVariant2CommandsItem {
    Variant0 {
        #[doc = "Map of implementation-dependant free-form YAML attributes."]
        #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
        attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
        exec: DevfileSchemaVersion222ParentVariant2CommandsItemVariant0Exec,
        #[doc = "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events."]
        id: DevfileSchemaVersion222ParentVariant2CommandsItemVariant0Id,
    },
    Variant1 {
        apply: DevfileSchemaVersion222ParentVariant2CommandsItemVariant1Apply,
        #[doc = "Map of implementation-dependant free-form YAML attributes."]
        #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
        attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
        #[doc = "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events."]
        id: DevfileSchemaVersion222ParentVariant2CommandsItemVariant1Id,
    },
    Variant2 {
        #[doc = "Map of implementation-dependant free-form YAML attributes."]
        #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
        attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
        composite: DevfileSchemaVersion222ParentVariant2CommandsItemVariant2Composite,
        #[doc = "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events."]
        id: DevfileSchemaVersion222ParentVariant2CommandsItemVariant2Id,
    },
}
impl ::std::convert::From<&Self> for DevfileSchemaVersion222ParentVariant2CommandsItem {
    fn from(value: &DevfileSchemaVersion222ParentVariant2CommandsItem) -> Self {
        value.clone()
    }
}
#[doc = "CLI Command executed in an existing component container"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"CLI Command executed in an existing component container\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"commandLine\": {"]
#[doc = "      \"description\": \"The actual command-line string\\n\\nSpecial variables that can be used:\\n\\n - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping.\\n\\n - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"component\": {"]
#[doc = "      \"description\": \"Describes component to which given action relates\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"env\": {"]
#[doc = "      \"description\": \"Optional list of environment variables that have to be set before running the command\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"object\","]
#[doc = "        \"required\": ["]
#[doc = "          \"name\""]
#[doc = "        ],"]
#[doc = "        \"properties\": {"]
#[doc = "          \"name\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          },"]
#[doc = "          \"value\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"additionalProperties\": false"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"group\": {"]
#[doc = "      \"description\": \"Defines the group this command is part of\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"isDefault\": {"]
#[doc = "          \"description\": \"Identifies the default command for a given group kind\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"kind\": {"]
#[doc = "          \"description\": \"Kind of group the command is part of\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"enum\": ["]
#[doc = "            \"build\","]
#[doc = "            \"run\","]
#[doc = "            \"test\","]
#[doc = "            \"debug\","]
#[doc = "            \"deploy\""]
#[doc = "          ]"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"hotReloadCapable\": {"]
#[doc = "      \"description\": \"Specify whether the command is restarted or not when the source code changes. If set to `true` the command won't be restarted. A *hotReloadCapable* `run` or `debug` command is expected to handle file changes on its own and won't be restarted. A *hotReloadCapable* `build` command is expected to be executed only once and won't be executed again. This field is taken into account only for commands `build`, `run` and `debug` with `isDefault` set to `true`.\\n\\nDefault value is `false`\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"label\": {"]
#[doc = "      \"description\": \"Optional label that provides a label for this command to be used in Editor UI menus for example\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"workingDir\": {"]
#[doc = "      \"description\": \"Working directory where the command should be executed\\n\\nSpecial variables that can be used:\\n\\n - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping.\\n\\n - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant2CommandsItemVariant0Exec {
    #[doc = "The actual command-line string\n\nSpecial variables that can be used:\n\n - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping.\n\n - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one."]
    #[serde(
        rename = "commandLine",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub command_line: ::std::option::Option<::std::string::String>,
    #[doc = "Describes component to which given action relates"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub component: ::std::option::Option<::std::string::String>,
    #[doc = "Optional list of environment variables that have to be set before running the command"]
    #[serde(default, skip_serializing_if = "::std::vec::Vec::is_empty")]
    pub env: ::std::vec::Vec<DevfileSchemaVersion222ParentVariant2CommandsItemVariant0ExecEnvItem>,
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub group:
        ::std::option::Option<DevfileSchemaVersion222ParentVariant2CommandsItemVariant0ExecGroup>,
    #[doc = "Specify whether the command is restarted or not when the source code changes. If set to `true` the command won't be restarted. A *hotReloadCapable* `run` or `debug` command is expected to handle file changes on its own and won't be restarted. A *hotReloadCapable* `build` command is expected to be executed only once and won't be executed again. This field is taken into account only for commands `build`, `run` and `debug` with `isDefault` set to `true`.\n\nDefault value is `false`"]
    #[serde(
        rename = "hotReloadCapable",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub hot_reload_capable: ::std::option::Option<bool>,
    #[doc = "Optional label that provides a label for this command to be used in Editor UI menus for example"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub label: ::std::option::Option<::std::string::String>,
    #[doc = "Working directory where the command should be executed\n\nSpecial variables that can be used:\n\n - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping.\n\n - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one."]
    #[serde(
        rename = "workingDir",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub working_dir: ::std::option::Option<::std::string::String>,
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant2CommandsItemVariant0Exec>
    for DevfileSchemaVersion222ParentVariant2CommandsItemVariant0Exec
{
    fn from(value: &DevfileSchemaVersion222ParentVariant2CommandsItemVariant0Exec) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant2CommandsItemVariant0Exec {
    pub fn builder() -> builder::DevfileSchemaVersion222ParentVariant2CommandsItemVariant0Exec {
        Default::default()
    }
}
#[doc = "`DevfileSchemaVersion222ParentVariant2CommandsItemVariant0ExecEnvItem`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"name\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"name\": {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"value\": {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
pub struct DevfileSchemaVersion222ParentVariant2CommandsItemVariant0ExecEnvItem {
    pub name: ::std::string::String,
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub value: ::std::option::Option<::std::string::String>,
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant2CommandsItemVariant0ExecEnvItem>
    for DevfileSchemaVersion222ParentVariant2CommandsItemVariant0ExecEnvItem
{
    fn from(value: &DevfileSchemaVersion222ParentVariant2CommandsItemVariant0ExecEnvItem) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant2CommandsItemVariant0ExecEnvItem {
    pub fn builder() -> builder::DevfileSchemaVersion222ParentVariant2CommandsItemVariant0ExecEnvItem
    {
        Default::default()
    }
}
#[doc = "Defines the group this command is part of"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Defines the group this command is part of\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"isDefault\": {"]
#[doc = "      \"description\": \"Identifies the default command for a given group kind\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"kind\": {"]
#[doc = "      \"description\": \"Kind of group the command is part of\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"build\","]
#[doc = "        \"run\","]
#[doc = "        \"test\","]
#[doc = "        \"debug\","]
#[doc = "        \"deploy\""]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant2CommandsItemVariant0ExecGroup {
    #[doc = "Identifies the default command for a given group kind"]
    #[serde(
        rename = "isDefault",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub is_default: ::std::option::Option<bool>,
    #[doc = "Kind of group the command is part of"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub kind: ::std::option::Option<
        DevfileSchemaVersion222ParentVariant2CommandsItemVariant0ExecGroupKind,
    >,
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant2CommandsItemVariant0ExecGroup>
    for DevfileSchemaVersion222ParentVariant2CommandsItemVariant0ExecGroup
{
    fn from(value: &DevfileSchemaVersion222ParentVariant2CommandsItemVariant0ExecGroup) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant2CommandsItemVariant0ExecGroup {
    pub fn builder() -> builder::DevfileSchemaVersion222ParentVariant2CommandsItemVariant0ExecGroup
    {
        Default::default()
    }
}
#[doc = "Kind of group the command is part of"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Kind of group the command is part of\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"build\","]
#[doc = "    \"run\","]
#[doc = "    \"test\","]
#[doc = "    \"debug\","]
#[doc = "    \"deploy\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DevfileSchemaVersion222ParentVariant2CommandsItemVariant0ExecGroupKind {
    #[serde(rename = "build")]
    Build,
    #[serde(rename = "run")]
    Run,
    #[serde(rename = "test")]
    Test,
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "deploy")]
    Deploy,
}
impl ::std::convert::From<&Self>
    for DevfileSchemaVersion222ParentVariant2CommandsItemVariant0ExecGroupKind
{
    fn from(
        value: &DevfileSchemaVersion222ParentVariant2CommandsItemVariant0ExecGroupKind,
    ) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display
    for DevfileSchemaVersion222ParentVariant2CommandsItemVariant0ExecGroupKind
{
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Build => f.write_str("build"),
            Self::Run => f.write_str("run"),
            Self::Test => f.write_str("test"),
            Self::Debug => f.write_str("debug"),
            Self::Deploy => f.write_str("deploy"),
        }
    }
}
impl ::std::str::FromStr
    for DevfileSchemaVersion222ParentVariant2CommandsItemVariant0ExecGroupKind
{
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        match value {
            "build" => Ok(Self::Build),
            "run" => Ok(Self::Run),
            "test" => Ok(Self::Test),
            "debug" => Ok(Self::Debug),
            "deploy" => Ok(Self::Deploy),
            _ => Err("invalid value".into()),
        }
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ParentVariant2CommandsItemVariant0ExecGroupKind
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant2CommandsItemVariant0ExecGroupKind
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant2CommandsItemVariant0ExecGroupKind
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant2CommandsItemVariant0Id(::std::string::String);
impl ::std::ops::Deref for DevfileSchemaVersion222ParentVariant2CommandsItemVariant0Id {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222ParentVariant2CommandsItemVariant0Id>
    for ::std::string::String
{
    fn from(value: DevfileSchemaVersion222ParentVariant2CommandsItemVariant0Id) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant2CommandsItemVariant0Id>
    for DevfileSchemaVersion222ParentVariant2CommandsItemVariant0Id
{
    fn from(value: &DevfileSchemaVersion222ParentVariant2CommandsItemVariant0Id) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for DevfileSchemaVersion222ParentVariant2CommandsItemVariant0Id {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str> for DevfileSchemaVersion222ParentVariant2CommandsItemVariant0Id {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant2CommandsItemVariant0Id
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant2CommandsItemVariant0Id
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de>
    for DevfileSchemaVersion222ParentVariant2CommandsItemVariant0Id
{
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Command that consists in applying a given component definition, typically bound to a devworkspace event.\n\nFor example, when an `apply` command is bound to a `preStart` event, and references a `container` component, it will start the container as a K8S initContainer in the devworkspace POD, unless the component has its `dedicatedPod` field set to `true`.\n\nWhen no `apply` command exist for a given component, it is assumed the component will be applied at devworkspace start by default, unless `deployByDefault` for that component is set to false."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Command that consists in applying a given component definition, typically bound to a devworkspace event.\\n\\nFor example, when an `apply` command is bound to a `preStart` event, and references a `container` component, it will start the container as a K8S initContainer in the devworkspace POD, unless the component has its `dedicatedPod` field set to `true`.\\n\\nWhen no `apply` command exist for a given component, it is assumed the component will be applied at devworkspace start by default, unless `deployByDefault` for that component is set to false.\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"component\": {"]
#[doc = "      \"description\": \"Describes component that will be applied\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"group\": {"]
#[doc = "      \"description\": \"Defines the group this command is part of\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"isDefault\": {"]
#[doc = "          \"description\": \"Identifies the default command for a given group kind\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"kind\": {"]
#[doc = "          \"description\": \"Kind of group the command is part of\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"enum\": ["]
#[doc = "            \"build\","]
#[doc = "            \"run\","]
#[doc = "            \"test\","]
#[doc = "            \"debug\","]
#[doc = "            \"deploy\""]
#[doc = "          ]"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"label\": {"]
#[doc = "      \"description\": \"Optional label that provides a label for this command to be used in Editor UI menus for example\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant2CommandsItemVariant1Apply {
    #[doc = "Describes component that will be applied"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub component: ::std::option::Option<::std::string::String>,
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub group:
        ::std::option::Option<DevfileSchemaVersion222ParentVariant2CommandsItemVariant1ApplyGroup>,
    #[doc = "Optional label that provides a label for this command to be used in Editor UI menus for example"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub label: ::std::option::Option<::std::string::String>,
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant2CommandsItemVariant1Apply>
    for DevfileSchemaVersion222ParentVariant2CommandsItemVariant1Apply
{
    fn from(value: &DevfileSchemaVersion222ParentVariant2CommandsItemVariant1Apply) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant2CommandsItemVariant1Apply {
    pub fn builder() -> builder::DevfileSchemaVersion222ParentVariant2CommandsItemVariant1Apply {
        Default::default()
    }
}
#[doc = "Defines the group this command is part of"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Defines the group this command is part of\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"isDefault\": {"]
#[doc = "      \"description\": \"Identifies the default command for a given group kind\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"kind\": {"]
#[doc = "      \"description\": \"Kind of group the command is part of\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"build\","]
#[doc = "        \"run\","]
#[doc = "        \"test\","]
#[doc = "        \"debug\","]
#[doc = "        \"deploy\""]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant2CommandsItemVariant1ApplyGroup {
    #[doc = "Identifies the default command for a given group kind"]
    #[serde(
        rename = "isDefault",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub is_default: ::std::option::Option<bool>,
    #[doc = "Kind of group the command is part of"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub kind: ::std::option::Option<
        DevfileSchemaVersion222ParentVariant2CommandsItemVariant1ApplyGroupKind,
    >,
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant2CommandsItemVariant1ApplyGroup>
    for DevfileSchemaVersion222ParentVariant2CommandsItemVariant1ApplyGroup
{
    fn from(value: &DevfileSchemaVersion222ParentVariant2CommandsItemVariant1ApplyGroup) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant2CommandsItemVariant1ApplyGroup {
    pub fn builder() -> builder::DevfileSchemaVersion222ParentVariant2CommandsItemVariant1ApplyGroup
    {
        Default::default()
    }
}
#[doc = "Kind of group the command is part of"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Kind of group the command is part of\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"build\","]
#[doc = "    \"run\","]
#[doc = "    \"test\","]
#[doc = "    \"debug\","]
#[doc = "    \"deploy\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DevfileSchemaVersion222ParentVariant2CommandsItemVariant1ApplyGroupKind {
    #[serde(rename = "build")]
    Build,
    #[serde(rename = "run")]
    Run,
    #[serde(rename = "test")]
    Test,
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "deploy")]
    Deploy,
}
impl ::std::convert::From<&Self>
    for DevfileSchemaVersion222ParentVariant2CommandsItemVariant1ApplyGroupKind
{
    fn from(
        value: &DevfileSchemaVersion222ParentVariant2CommandsItemVariant1ApplyGroupKind,
    ) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display
    for DevfileSchemaVersion222ParentVariant2CommandsItemVariant1ApplyGroupKind
{
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Build => f.write_str("build"),
            Self::Run => f.write_str("run"),
            Self::Test => f.write_str("test"),
            Self::Debug => f.write_str("debug"),
            Self::Deploy => f.write_str("deploy"),
        }
    }
}
impl ::std::str::FromStr
    for DevfileSchemaVersion222ParentVariant2CommandsItemVariant1ApplyGroupKind
{
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        match value {
            "build" => Ok(Self::Build),
            "run" => Ok(Self::Run),
            "test" => Ok(Self::Test),
            "debug" => Ok(Self::Debug),
            "deploy" => Ok(Self::Deploy),
            _ => Err("invalid value".into()),
        }
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ParentVariant2CommandsItemVariant1ApplyGroupKind
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant2CommandsItemVariant1ApplyGroupKind
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant2CommandsItemVariant1ApplyGroupKind
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant2CommandsItemVariant1Id(::std::string::String);
impl ::std::ops::Deref for DevfileSchemaVersion222ParentVariant2CommandsItemVariant1Id {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222ParentVariant2CommandsItemVariant1Id>
    for ::std::string::String
{
    fn from(value: DevfileSchemaVersion222ParentVariant2CommandsItemVariant1Id) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant2CommandsItemVariant1Id>
    for DevfileSchemaVersion222ParentVariant2CommandsItemVariant1Id
{
    fn from(value: &DevfileSchemaVersion222ParentVariant2CommandsItemVariant1Id) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for DevfileSchemaVersion222ParentVariant2CommandsItemVariant1Id {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str> for DevfileSchemaVersion222ParentVariant2CommandsItemVariant1Id {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant2CommandsItemVariant1Id
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant2CommandsItemVariant1Id
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de>
    for DevfileSchemaVersion222ParentVariant2CommandsItemVariant1Id
{
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Composite command that allows executing several sub-commands either sequentially or concurrently"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Composite command that allows executing several sub-commands either sequentially or concurrently\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"commands\": {"]
#[doc = "      \"description\": \"The commands that comprise this composite command\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"group\": {"]
#[doc = "      \"description\": \"Defines the group this command is part of\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"isDefault\": {"]
#[doc = "          \"description\": \"Identifies the default command for a given group kind\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"kind\": {"]
#[doc = "          \"description\": \"Kind of group the command is part of\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"enum\": ["]
#[doc = "            \"build\","]
#[doc = "            \"run\","]
#[doc = "            \"test\","]
#[doc = "            \"debug\","]
#[doc = "            \"deploy\""]
#[doc = "          ]"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"label\": {"]
#[doc = "      \"description\": \"Optional label that provides a label for this command to be used in Editor UI menus for example\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"parallel\": {"]
#[doc = "      \"description\": \"Indicates if the sub-commands should be executed concurrently\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant2CommandsItemVariant2Composite {
    #[doc = "The commands that comprise this composite command"]
    #[serde(default, skip_serializing_if = "::std::vec::Vec::is_empty")]
    pub commands: ::std::vec::Vec<::std::string::String>,
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub group: ::std::option::Option<
        DevfileSchemaVersion222ParentVariant2CommandsItemVariant2CompositeGroup,
    >,
    #[doc = "Optional label that provides a label for this command to be used in Editor UI menus for example"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub label: ::std::option::Option<::std::string::String>,
    #[doc = "Indicates if the sub-commands should be executed concurrently"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub parallel: ::std::option::Option<bool>,
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant2CommandsItemVariant2Composite>
    for DevfileSchemaVersion222ParentVariant2CommandsItemVariant2Composite
{
    fn from(value: &DevfileSchemaVersion222ParentVariant2CommandsItemVariant2Composite) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant2CommandsItemVariant2Composite {
    pub fn builder() -> builder::DevfileSchemaVersion222ParentVariant2CommandsItemVariant2Composite
    {
        Default::default()
    }
}
#[doc = "Defines the group this command is part of"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Defines the group this command is part of\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"isDefault\": {"]
#[doc = "      \"description\": \"Identifies the default command for a given group kind\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"kind\": {"]
#[doc = "      \"description\": \"Kind of group the command is part of\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"build\","]
#[doc = "        \"run\","]
#[doc = "        \"test\","]
#[doc = "        \"debug\","]
#[doc = "        \"deploy\""]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant2CommandsItemVariant2CompositeGroup {
    #[doc = "Identifies the default command for a given group kind"]
    #[serde(
        rename = "isDefault",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub is_default: ::std::option::Option<bool>,
    #[doc = "Kind of group the command is part of"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub kind: ::std::option::Option<
        DevfileSchemaVersion222ParentVariant2CommandsItemVariant2CompositeGroupKind,
    >,
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant2CommandsItemVariant2CompositeGroup>
    for DevfileSchemaVersion222ParentVariant2CommandsItemVariant2CompositeGroup
{
    fn from(
        value: &DevfileSchemaVersion222ParentVariant2CommandsItemVariant2CompositeGroup,
    ) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant2CommandsItemVariant2CompositeGroup {
    pub fn builder(
    ) -> builder::DevfileSchemaVersion222ParentVariant2CommandsItemVariant2CompositeGroup {
        Default::default()
    }
}
#[doc = "Kind of group the command is part of"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Kind of group the command is part of\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"build\","]
#[doc = "    \"run\","]
#[doc = "    \"test\","]
#[doc = "    \"debug\","]
#[doc = "    \"deploy\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DevfileSchemaVersion222ParentVariant2CommandsItemVariant2CompositeGroupKind {
    #[serde(rename = "build")]
    Build,
    #[serde(rename = "run")]
    Run,
    #[serde(rename = "test")]
    Test,
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "deploy")]
    Deploy,
}
impl ::std::convert::From<&Self>
    for DevfileSchemaVersion222ParentVariant2CommandsItemVariant2CompositeGroupKind
{
    fn from(
        value: &DevfileSchemaVersion222ParentVariant2CommandsItemVariant2CompositeGroupKind,
    ) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display
    for DevfileSchemaVersion222ParentVariant2CommandsItemVariant2CompositeGroupKind
{
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Build => f.write_str("build"),
            Self::Run => f.write_str("run"),
            Self::Test => f.write_str("test"),
            Self::Debug => f.write_str("debug"),
            Self::Deploy => f.write_str("deploy"),
        }
    }
}
impl ::std::str::FromStr
    for DevfileSchemaVersion222ParentVariant2CommandsItemVariant2CompositeGroupKind
{
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        match value {
            "build" => Ok(Self::Build),
            "run" => Ok(Self::Run),
            "test" => Ok(Self::Test),
            "debug" => Ok(Self::Debug),
            "deploy" => Ok(Self::Deploy),
            _ => Err("invalid value".into()),
        }
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ParentVariant2CommandsItemVariant2CompositeGroupKind
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant2CommandsItemVariant2CompositeGroupKind
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant2CommandsItemVariant2CompositeGroupKind
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant2CommandsItemVariant2Id(::std::string::String);
impl ::std::ops::Deref for DevfileSchemaVersion222ParentVariant2CommandsItemVariant2Id {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222ParentVariant2CommandsItemVariant2Id>
    for ::std::string::String
{
    fn from(value: DevfileSchemaVersion222ParentVariant2CommandsItemVariant2Id) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant2CommandsItemVariant2Id>
    for DevfileSchemaVersion222ParentVariant2CommandsItemVariant2Id
{
    fn from(value: &DevfileSchemaVersion222ParentVariant2CommandsItemVariant2Id) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for DevfileSchemaVersion222ParentVariant2CommandsItemVariant2Id {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str> for DevfileSchemaVersion222ParentVariant2CommandsItemVariant2Id {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant2CommandsItemVariant2Id
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant2CommandsItemVariant2Id
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de>
    for DevfileSchemaVersion222ParentVariant2CommandsItemVariant2Id
{
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "`DevfileSchemaVersion222ParentVariant2ComponentsItem`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"container\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"kubernetes\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"openshift\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"volume\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"image\""]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  ],"]
#[doc = "  \"required\": ["]
#[doc = "    \"name\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"attributes\": {"]
#[doc = "      \"description\": \"Map of implementation-dependant free-form YAML attributes.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": true"]
#[doc = "    },"]
#[doc = "    \"container\": {"]
#[doc = "      \"description\": \"Allows adding and configuring devworkspace-related containers\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"annotation\": {"]
#[doc = "          \"description\": \"Annotations that should be added to specific resources for this container\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"properties\": {"]
#[doc = "            \"deployment\": {"]
#[doc = "              \"description\": \"Annotations to be added to deployment\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"additionalProperties\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"service\": {"]
#[doc = "              \"description\": \"Annotations to be added to service\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"additionalProperties\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"args\": {"]
#[doc = "          \"description\": \"The arguments to supply to the command running the dockerimage component. The arguments are supplied either to the default command provided in the image or to the overridden command.\\n\\nDefaults to an empty array, meaning use whatever is defined in the image.\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"command\": {"]
#[doc = "          \"description\": \"The command to run in the dockerimage component instead of the default one provided in the image.\\n\\nDefaults to an empty array, meaning use whatever is defined in the image.\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"cpuLimit\": {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"cpuRequest\": {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"dedicatedPod\": {"]
#[doc = "          \"description\": \"Specify if a container should run in its own separated pod, instead of running as part of the main development environment pod.\\n\\nDefault value is `false`\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"endpoints\": {"]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"required\": ["]
#[doc = "              \"name\""]
#[doc = "            ],"]
#[doc = "            \"properties\": {"]
#[doc = "              \"annotation\": {"]
#[doc = "                \"description\": \"Annotations to be added to Kubernetes Ingress or Openshift Route\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"additionalProperties\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"attributes\": {"]
#[doc = "                \"description\": \"Map of implementation-dependant string-based free-form attributes.\\n\\nExamples of Che-specific attributes:\\n- cookiesAuthEnabled: \\\"true\\\" / \\\"false\\\",\\n- type: \\\"terminal\\\" / \\\"ide\\\" / \\\"ide-dev\\\",\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"additionalProperties\": true"]
#[doc = "              },"]
#[doc = "              \"exposure\": {"]
#[doc = "                \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "                \"type\": \"string\","]
#[doc = "                \"enum\": ["]
#[doc = "                  \"public\","]
#[doc = "                  \"internal\","]
#[doc = "                  \"none\""]
#[doc = "                ]"]
#[doc = "              },"]
#[doc = "              \"name\": {"]
#[doc = "                \"type\": \"string\","]
#[doc = "                \"maxLength\": 15,"]
#[doc = "                \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "              },"]
#[doc = "              \"path\": {"]
#[doc = "                \"description\": \"Path of the endpoint URL\","]
#[doc = "                \"type\": \"string\""]
#[doc = "              },"]
#[doc = "              \"protocol\": {"]
#[doc = "                \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "                \"type\": \"string\","]
#[doc = "                \"enum\": ["]
#[doc = "                  \"http\","]
#[doc = "                  \"https\","]
#[doc = "                  \"ws\","]
#[doc = "                  \"wss\","]
#[doc = "                  \"tcp\","]
#[doc = "                  \"udp\""]
#[doc = "                ]"]
#[doc = "              },"]
#[doc = "              \"secure\": {"]
#[doc = "                \"description\": \"Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.\","]
#[doc = "                \"type\": \"boolean\""]
#[doc = "              },"]
#[doc = "              \"targetPort\": {"]
#[doc = "                \"description\": \"Port number to be used within the container component. The same port cannot be used by two different container components.\","]
#[doc = "                \"type\": \"integer\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"additionalProperties\": false"]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"env\": {"]
#[doc = "          \"description\": \"Environment variables used in this container.\\n\\nThe following variables are reserved and cannot be overridden via env:\\n\\n - `$PROJECTS_ROOT`\\n\\n - `$PROJECT_SOURCE`\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"required\": ["]
#[doc = "              \"name\""]
#[doc = "            ],"]
#[doc = "            \"properties\": {"]
#[doc = "              \"name\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              },"]
#[doc = "              \"value\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"additionalProperties\": false"]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"image\": {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"memoryLimit\": {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"memoryRequest\": {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"mountSources\": {"]
#[doc = "          \"description\": \"Toggles whether or not the project source code should be mounted in the component.\\n\\nDefaults to true for all component types except plugins and components that set `dedicatedPod` to true.\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"sourceMapping\": {"]
#[doc = "          \"description\": \"Optional specification of the path in the container where project sources should be transferred/mounted when `mountSources` is `true`. When omitted, the default value of /projects is used.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"volumeMounts\": {"]
#[doc = "          \"description\": \"List of volumes mounts that should be mounted is this container.\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"description\": \"Volume that should be mounted to a component container\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"required\": ["]
#[doc = "              \"name\""]
#[doc = "            ],"]
#[doc = "            \"properties\": {"]
#[doc = "              \"name\": {"]
#[doc = "                \"description\": \"The volume mount name is the name of an existing `Volume` component. If several containers mount the same volume name then they will reuse the same volume and will be able to access to the same files.\","]
#[doc = "                \"type\": \"string\","]
#[doc = "                \"maxLength\": 63,"]
#[doc = "                \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "              },"]
#[doc = "              \"path\": {"]
#[doc = "                \"description\": \"The path in the component container where the volume should be mounted. If not path is mentioned, default path is the is `/<name>`.\","]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"additionalProperties\": false"]
#[doc = "          }"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"image\": {"]
#[doc = "      \"description\": \"Allows specifying the definition of an image for outer loop builds\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"required\": ["]
#[doc = "            \"dockerfile\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"required\": ["]
#[doc = "            \"autoBuild\""]
#[doc = "          ]"]
#[doc = "        }"]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"autoBuild\": {"]
#[doc = "          \"description\": \"Defines if the image should be built during startup.\\n\\nDefault value is `false`\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"dockerfile\": {"]
#[doc = "          \"description\": \"Allows specifying dockerfile type build\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"required\": ["]
#[doc = "                \"uri\""]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"required\": ["]
#[doc = "                \"devfileRegistry\""]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"required\": ["]
#[doc = "                \"git\""]
#[doc = "              ]"]
#[doc = "            }"]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"args\": {"]
#[doc = "              \"description\": \"The arguments to supply to the dockerfile build.\","]
#[doc = "              \"type\": \"array\","]
#[doc = "              \"items\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"buildContext\": {"]
#[doc = "              \"description\": \"Path of source directory to establish build context. Defaults to ${PROJECT_SOURCE} in the container\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"devfileRegistry\": {"]
#[doc = "              \"description\": \"Dockerfile's Devfile Registry source\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"properties\": {"]
#[doc = "                \"id\": {"]
#[doc = "                  \"description\": \"Id in a devfile registry that contains a Dockerfile. The src in the OCI registry required for the Dockerfile build will be downloaded for building the image.\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                },"]
#[doc = "                \"registryUrl\": {"]
#[doc = "                  \"description\": \"Devfile Registry URL to pull the Dockerfile from when using the Devfile Registry as Dockerfile src. To ensure the Dockerfile gets resolved consistently in different environments, it is recommended to always specify the `devfileRegistryUrl` when `Id` is used.\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            },"]
#[doc = "            \"git\": {"]
#[doc = "              \"description\": \"Dockerfile's Git source\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"properties\": {"]
#[doc = "                \"checkoutFrom\": {"]
#[doc = "                  \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"remote\": {"]
#[doc = "                      \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"revision\": {"]
#[doc = "                      \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                },"]
#[doc = "                \"fileLocation\": {"]
#[doc = "                  \"description\": \"Location of the Dockerfile in the Git repository when using git as Dockerfile src. Defaults to Dockerfile.\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                },"]
#[doc = "                \"remotes\": {"]
#[doc = "                  \"description\": \"The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"additionalProperties\": {"]
#[doc = "                    \"type\": \"string\""]
#[doc = "                  }"]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            },"]
#[doc = "            \"rootRequired\": {"]
#[doc = "              \"description\": \"Specify if a privileged builder pod is required.\\n\\nDefault value is `false`\","]
#[doc = "              \"type\": \"boolean\""]
#[doc = "            },"]
#[doc = "            \"uri\": {"]
#[doc = "              \"description\": \"URI Reference of a Dockerfile. It can be a full URL or a relative URI from the current devfile as the base URI.\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"imageName\": {"]
#[doc = "          \"description\": \"Name of the image for the resulting outerloop build\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"kubernetes\": {"]
#[doc = "      \"description\": \"Allows importing into the devworkspace the Kubernetes resources defined in a given manifest. For example this allows reusing the Kubernetes definitions used to deploy some runtime components in production.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"required\": ["]
#[doc = "            \"uri\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"required\": ["]
#[doc = "            \"inlined\""]
#[doc = "          ]"]
#[doc = "        }"]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"deployByDefault\": {"]
#[doc = "          \"description\": \"Defines if the component should be deployed during startup.\\n\\nDefault value is `false`\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"endpoints\": {"]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"required\": ["]
#[doc = "              \"name\""]
#[doc = "            ],"]
#[doc = "            \"properties\": {"]
#[doc = "              \"annotation\": {"]
#[doc = "                \"description\": \"Annotations to be added to Kubernetes Ingress or Openshift Route\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"additionalProperties\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"attributes\": {"]
#[doc = "                \"description\": \"Map of implementation-dependant string-based free-form attributes.\\n\\nExamples of Che-specific attributes:\\n- cookiesAuthEnabled: \\\"true\\\" / \\\"false\\\",\\n- type: \\\"terminal\\\" / \\\"ide\\\" / \\\"ide-dev\\\",\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"additionalProperties\": true"]
#[doc = "              },"]
#[doc = "              \"exposure\": {"]
#[doc = "                \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "                \"type\": \"string\","]
#[doc = "                \"enum\": ["]
#[doc = "                  \"public\","]
#[doc = "                  \"internal\","]
#[doc = "                  \"none\""]
#[doc = "                ]"]
#[doc = "              },"]
#[doc = "              \"name\": {"]
#[doc = "                \"type\": \"string\","]
#[doc = "                \"maxLength\": 15,"]
#[doc = "                \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "              },"]
#[doc = "              \"path\": {"]
#[doc = "                \"description\": \"Path of the endpoint URL\","]
#[doc = "                \"type\": \"string\""]
#[doc = "              },"]
#[doc = "              \"protocol\": {"]
#[doc = "                \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "                \"type\": \"string\","]
#[doc = "                \"enum\": ["]
#[doc = "                  \"http\","]
#[doc = "                  \"https\","]
#[doc = "                  \"ws\","]
#[doc = "                  \"wss\","]
#[doc = "                  \"tcp\","]
#[doc = "                  \"udp\""]
#[doc = "                ]"]
#[doc = "              },"]
#[doc = "              \"secure\": {"]
#[doc = "                \"description\": \"Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.\","]
#[doc = "                \"type\": \"boolean\""]
#[doc = "              },"]
#[doc = "              \"targetPort\": {"]
#[doc = "                \"description\": \"Port number to be used within the container component. The same port cannot be used by two different container components.\","]
#[doc = "                \"type\": \"integer\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"additionalProperties\": false"]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"inlined\": {"]
#[doc = "          \"description\": \"Inlined manifest\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"uri\": {"]
#[doc = "          \"description\": \"Location in a file fetched from a uri.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"description\": \"Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin.\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"maxLength\": 63,"]
#[doc = "      \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "    },"]
#[doc = "    \"openshift\": {"]
#[doc = "      \"description\": \"Allows importing into the devworkspace the OpenShift resources defined in a given manifest. For example this allows reusing the OpenShift definitions used to deploy some runtime components in production.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"required\": ["]
#[doc = "            \"uri\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"required\": ["]
#[doc = "            \"inlined\""]
#[doc = "          ]"]
#[doc = "        }"]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"deployByDefault\": {"]
#[doc = "          \"description\": \"Defines if the component should be deployed during startup.\\n\\nDefault value is `false`\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"endpoints\": {"]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"required\": ["]
#[doc = "              \"name\""]
#[doc = "            ],"]
#[doc = "            \"properties\": {"]
#[doc = "              \"annotation\": {"]
#[doc = "                \"description\": \"Annotations to be added to Kubernetes Ingress or Openshift Route\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"additionalProperties\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"attributes\": {"]
#[doc = "                \"description\": \"Map of implementation-dependant string-based free-form attributes.\\n\\nExamples of Che-specific attributes:\\n- cookiesAuthEnabled: \\\"true\\\" / \\\"false\\\",\\n- type: \\\"terminal\\\" / \\\"ide\\\" / \\\"ide-dev\\\",\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"additionalProperties\": true"]
#[doc = "              },"]
#[doc = "              \"exposure\": {"]
#[doc = "                \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "                \"type\": \"string\","]
#[doc = "                \"enum\": ["]
#[doc = "                  \"public\","]
#[doc = "                  \"internal\","]
#[doc = "                  \"none\""]
#[doc = "                ]"]
#[doc = "              },"]
#[doc = "              \"name\": {"]
#[doc = "                \"type\": \"string\","]
#[doc = "                \"maxLength\": 15,"]
#[doc = "                \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "              },"]
#[doc = "              \"path\": {"]
#[doc = "                \"description\": \"Path of the endpoint URL\","]
#[doc = "                \"type\": \"string\""]
#[doc = "              },"]
#[doc = "              \"protocol\": {"]
#[doc = "                \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "                \"type\": \"string\","]
#[doc = "                \"enum\": ["]
#[doc = "                  \"http\","]
#[doc = "                  \"https\","]
#[doc = "                  \"ws\","]
#[doc = "                  \"wss\","]
#[doc = "                  \"tcp\","]
#[doc = "                  \"udp\""]
#[doc = "                ]"]
#[doc = "              },"]
#[doc = "              \"secure\": {"]
#[doc = "                \"description\": \"Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.\","]
#[doc = "                \"type\": \"boolean\""]
#[doc = "              },"]
#[doc = "              \"targetPort\": {"]
#[doc = "                \"description\": \"Port number to be used within the container component. The same port cannot be used by two different container components.\","]
#[doc = "                \"type\": \"integer\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"additionalProperties\": false"]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"inlined\": {"]
#[doc = "          \"description\": \"Inlined manifest\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"uri\": {"]
#[doc = "          \"description\": \"Location in a file fetched from a uri.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"volume\": {"]
#[doc = "      \"description\": \"Allows specifying the definition of a volume shared by several other components\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"ephemeral\": {"]
#[doc = "          \"description\": \"Ephemeral volumes are not stored persistently across restarts. Defaults to false\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"size\": {"]
#[doc = "          \"description\": \"Size of the volume\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged, deny_unknown_fields)]
pub enum DevfileSchemaVersion222ParentVariant2ComponentsItem {
    Variant0 {
        #[doc = "Map of implementation-dependant free-form YAML attributes."]
        #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
        attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
        container: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0Container,
        #[doc = "Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin."]
        name: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0Name,
    },
    Variant1 {
        #[doc = "Map of implementation-dependant free-form YAML attributes."]
        #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
        attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
        kubernetes: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1Kubernetes,
        #[doc = "Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin."]
        name: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1Name,
    },
    Variant2 {
        #[doc = "Map of implementation-dependant free-form YAML attributes."]
        #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
        attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
        #[doc = "Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin."]
        name: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2Name,
        openshift: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2Openshift,
    },
    Variant3 {
        #[doc = "Map of implementation-dependant free-form YAML attributes."]
        #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
        attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
        #[doc = "Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin."]
        name: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant3Name,
        volume: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant3Volume,
    },
    Variant4 {
        #[doc = "Map of implementation-dependant free-form YAML attributes."]
        #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
        attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
        image: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4Image,
        #[doc = "Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin."]
        name: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4Name,
    },
}
impl ::std::convert::From<&Self> for DevfileSchemaVersion222ParentVariant2ComponentsItem {
    fn from(value: &DevfileSchemaVersion222ParentVariant2ComponentsItem) -> Self {
        value.clone()
    }
}
#[doc = "Allows adding and configuring devworkspace-related containers"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Allows adding and configuring devworkspace-related containers\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"annotation\": {"]
#[doc = "      \"description\": \"Annotations that should be added to specific resources for this container\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"deployment\": {"]
#[doc = "          \"description\": \"Annotations to be added to deployment\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"additionalProperties\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"service\": {"]
#[doc = "          \"description\": \"Annotations to be added to service\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"additionalProperties\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"args\": {"]
#[doc = "      \"description\": \"The arguments to supply to the command running the dockerimage component. The arguments are supplied either to the default command provided in the image or to the overridden command.\\n\\nDefaults to an empty array, meaning use whatever is defined in the image.\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"command\": {"]
#[doc = "      \"description\": \"The command to run in the dockerimage component instead of the default one provided in the image.\\n\\nDefaults to an empty array, meaning use whatever is defined in the image.\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"cpuLimit\": {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"cpuRequest\": {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"dedicatedPod\": {"]
#[doc = "      \"description\": \"Specify if a container should run in its own separated pod, instead of running as part of the main development environment pod.\\n\\nDefault value is `false`\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"endpoints\": {"]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"object\","]
#[doc = "        \"required\": ["]
#[doc = "          \"name\""]
#[doc = "        ],"]
#[doc = "        \"properties\": {"]
#[doc = "          \"annotation\": {"]
#[doc = "            \"description\": \"Annotations to be added to Kubernetes Ingress or Openshift Route\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"additionalProperties\": {"]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"attributes\": {"]
#[doc = "            \"description\": \"Map of implementation-dependant string-based free-form attributes.\\n\\nExamples of Che-specific attributes:\\n- cookiesAuthEnabled: \\\"true\\\" / \\\"false\\\",\\n- type: \\\"terminal\\\" / \\\"ide\\\" / \\\"ide-dev\\\",\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"additionalProperties\": true"]
#[doc = "          },"]
#[doc = "          \"exposure\": {"]
#[doc = "            \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "            \"type\": \"string\","]
#[doc = "            \"enum\": ["]
#[doc = "              \"public\","]
#[doc = "              \"internal\","]
#[doc = "              \"none\""]
#[doc = "            ]"]
#[doc = "          },"]
#[doc = "          \"name\": {"]
#[doc = "            \"type\": \"string\","]
#[doc = "            \"maxLength\": 15,"]
#[doc = "            \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "          },"]
#[doc = "          \"path\": {"]
#[doc = "            \"description\": \"Path of the endpoint URL\","]
#[doc = "            \"type\": \"string\""]
#[doc = "          },"]
#[doc = "          \"protocol\": {"]
#[doc = "            \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "            \"type\": \"string\","]
#[doc = "            \"enum\": ["]
#[doc = "              \"http\","]
#[doc = "              \"https\","]
#[doc = "              \"ws\","]
#[doc = "              \"wss\","]
#[doc = "              \"tcp\","]
#[doc = "              \"udp\""]
#[doc = "            ]"]
#[doc = "          },"]
#[doc = "          \"secure\": {"]
#[doc = "            \"description\": \"Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.\","]
#[doc = "            \"type\": \"boolean\""]
#[doc = "          },"]
#[doc = "          \"targetPort\": {"]
#[doc = "            \"description\": \"Port number to be used within the container component. The same port cannot be used by two different container components.\","]
#[doc = "            \"type\": \"integer\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"additionalProperties\": false"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"env\": {"]
#[doc = "      \"description\": \"Environment variables used in this container.\\n\\nThe following variables are reserved and cannot be overridden via env:\\n\\n - `$PROJECTS_ROOT`\\n\\n - `$PROJECT_SOURCE`\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"object\","]
#[doc = "        \"required\": ["]
#[doc = "          \"name\""]
#[doc = "        ],"]
#[doc = "        \"properties\": {"]
#[doc = "          \"name\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          },"]
#[doc = "          \"value\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"additionalProperties\": false"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"image\": {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"memoryLimit\": {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"memoryRequest\": {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"mountSources\": {"]
#[doc = "      \"description\": \"Toggles whether or not the project source code should be mounted in the component.\\n\\nDefaults to true for all component types except plugins and components that set `dedicatedPod` to true.\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"sourceMapping\": {"]
#[doc = "      \"description\": \"Optional specification of the path in the container where project sources should be transferred/mounted when `mountSources` is `true`. When omitted, the default value of /projects is used.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"volumeMounts\": {"]
#[doc = "      \"description\": \"List of volumes mounts that should be mounted is this container.\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"description\": \"Volume that should be mounted to a component container\","]
#[doc = "        \"type\": \"object\","]
#[doc = "        \"required\": ["]
#[doc = "          \"name\""]
#[doc = "        ],"]
#[doc = "        \"properties\": {"]
#[doc = "          \"name\": {"]
#[doc = "            \"description\": \"The volume mount name is the name of an existing `Volume` component. If several containers mount the same volume name then they will reuse the same volume and will be able to access to the same files.\","]
#[doc = "            \"type\": \"string\","]
#[doc = "            \"maxLength\": 63,"]
#[doc = "            \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "          },"]
#[doc = "          \"path\": {"]
#[doc = "            \"description\": \"The path in the component container where the volume should be mounted. If not path is mentioned, default path is the is `/<name>`.\","]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"additionalProperties\": false"]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0Container {
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub annotation: ::std::option::Option<
        DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerAnnotation,
    >,
    #[doc = "The arguments to supply to the command running the dockerimage component. The arguments are supplied either to the default command provided in the image or to the overridden command.\n\nDefaults to an empty array, meaning use whatever is defined in the image."]
    #[serde(default, skip_serializing_if = "::std::vec::Vec::is_empty")]
    pub args: ::std::vec::Vec<::std::string::String>,
    #[doc = "The command to run in the dockerimage component instead of the default one provided in the image.\n\nDefaults to an empty array, meaning use whatever is defined in the image."]
    #[serde(default, skip_serializing_if = "::std::vec::Vec::is_empty")]
    pub command: ::std::vec::Vec<::std::string::String>,
    #[serde(
        rename = "cpuLimit",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub cpu_limit: ::std::option::Option<::std::string::String>,
    #[serde(
        rename = "cpuRequest",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub cpu_request: ::std::option::Option<::std::string::String>,
    #[doc = "Specify if a container should run in its own separated pod, instead of running as part of the main development environment pod.\n\nDefault value is `false`"]
    #[serde(
        rename = "dedicatedPod",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub dedicated_pod: ::std::option::Option<bool>,
    #[serde(default, skip_serializing_if = "::std::vec::Vec::is_empty")]
    pub endpoints: ::std::vec::Vec<
        DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEndpointsItem,
    >,
    #[doc = "Environment variables used in this container.\n\nThe following variables are reserved and cannot be overridden via env:\n\n - `$PROJECTS_ROOT`\n\n - `$PROJECT_SOURCE`"]
    #[serde(default, skip_serializing_if = "::std::vec::Vec::is_empty")]
    pub env: ::std::vec::Vec<
        DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEnvItem,
    >,
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub image: ::std::option::Option<::std::string::String>,
    #[serde(
        rename = "memoryLimit",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub memory_limit: ::std::option::Option<::std::string::String>,
    #[serde(
        rename = "memoryRequest",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub memory_request: ::std::option::Option<::std::string::String>,
    #[doc = "Toggles whether or not the project source code should be mounted in the component.\n\nDefaults to true for all component types except plugins and components that set `dedicatedPod` to true."]
    #[serde(
        rename = "mountSources",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub mount_sources: ::std::option::Option<bool>,
    #[doc = "Optional specification of the path in the container where project sources should be transferred/mounted when `mountSources` is `true`. When omitted, the default value of /projects is used."]
    #[serde(
        rename = "sourceMapping",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub source_mapping: ::std::option::Option<::std::string::String>,
    #[doc = "List of volumes mounts that should be mounted is this container."]
    #[serde(
        rename = "volumeMounts",
        default,
        skip_serializing_if = "::std::vec::Vec::is_empty"
    )]
    pub volume_mounts: ::std::vec::Vec<
        DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerVolumeMountsItem,
    >,
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0Container>
    for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0Container
{
    fn from(value: &DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0Container) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0Container {
    pub fn builder() -> builder::DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0Container
    {
        Default::default()
    }
}
#[doc = "Annotations that should be added to specific resources for this container"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Annotations that should be added to specific resources for this container\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"deployment\": {"]
#[doc = "      \"description\": \"Annotations to be added to deployment\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"service\": {"]
#[doc = "      \"description\": \"Annotations to be added to service\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerAnnotation {
    #[doc = "Annotations to be added to deployment"]
    #[serde(
        default,
        skip_serializing_if = ":: std :: collections :: HashMap::is_empty"
    )]
    pub deployment: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    #[doc = "Annotations to be added to service"]
    #[serde(
        default,
        skip_serializing_if = ":: std :: collections :: HashMap::is_empty"
    )]
    pub service: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
}
impl
    ::std::convert::From<
        &DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerAnnotation,
    > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerAnnotation
{
    fn from(
        value: &DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerAnnotation,
    ) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerAnnotation {
    pub fn builder(
    ) -> builder::DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerAnnotation
    {
        Default::default()
    }
}
#[doc = "`DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEndpointsItem`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"name\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"annotation\": {"]
#[doc = "      \"description\": \"Annotations to be added to Kubernetes Ingress or Openshift Route\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"attributes\": {"]
#[doc = "      \"description\": \"Map of implementation-dependant string-based free-form attributes.\\n\\nExamples of Che-specific attributes:\\n- cookiesAuthEnabled: \\\"true\\\" / \\\"false\\\",\\n- type: \\\"terminal\\\" / \\\"ide\\\" / \\\"ide-dev\\\",\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": true"]
#[doc = "    },"]
#[doc = "    \"exposure\": {"]
#[doc = "      \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"public\","]
#[doc = "        \"internal\","]
#[doc = "        \"none\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"maxLength\": 15,"]
#[doc = "      \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "    },"]
#[doc = "    \"path\": {"]
#[doc = "      \"description\": \"Path of the endpoint URL\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"protocol\": {"]
#[doc = "      \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"http\","]
#[doc = "        \"https\","]
#[doc = "        \"ws\","]
#[doc = "        \"wss\","]
#[doc = "        \"tcp\","]
#[doc = "        \"udp\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"secure\": {"]
#[doc = "      \"description\": \"Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"targetPort\": {"]
#[doc = "      \"description\": \"Port number to be used within the container component. The same port cannot be used by two different container components.\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
pub struct DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEndpointsItem {
    #[doc = "Annotations to be added to Kubernetes Ingress or Openshift Route"]
    #[serde(
        default,
        skip_serializing_if = ":: std :: collections :: HashMap::is_empty"
    )]
    pub annotation: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    #[doc = "Map of implementation-dependant string-based free-form attributes.\n\nExamples of Che-specific attributes:\n- cookiesAuthEnabled: \"true\" / \"false\",\n- type: \"terminal\" / \"ide\" / \"ide-dev\","]
    #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
    pub attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
    #[doc = "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub exposure: ::std::option::Option<
        DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEndpointsItemExposure,
    >,
    pub name: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEndpointsItemName,
    #[doc = "Path of the endpoint URL"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub path: ::std::option::Option<::std::string::String>,
    #[doc = "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub protocol: ::std::option::Option<
        DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEndpointsItemProtocol,
    >,
    #[doc = "Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`."]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub secure: ::std::option::Option<bool>,
    #[doc = "Port number to be used within the container component. The same port cannot be used by two different container components."]
    #[serde(
        rename = "targetPort",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub target_port: ::std::option::Option<i64>,
}
impl
    ::std::convert::From<
        &DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEndpointsItem,
    > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEndpointsItem
{
    fn from(
        value: &DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEndpointsItem,
    ) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEndpointsItem {
    pub fn builder(
    ) -> builder::DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEndpointsItem
    {
        Default::default()
    }
}
#[doc = "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"public\","]
#[doc = "    \"internal\","]
#[doc = "    \"none\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEndpointsItemExposure {
    #[serde(rename = "public")]
    Public,
    #[serde(rename = "internal")]
    Internal,
    #[serde(rename = "none")]
    None,
}
impl ::std::convert::From<&Self>
    for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEndpointsItemExposure
{
    fn from(
        value : & DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEndpointsItemExposure,
    ) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display
    for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEndpointsItemExposure
{
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Public => f.write_str("public"),
            Self::Internal => f.write_str("internal"),
            Self::None => f.write_str("none"),
        }
    }
}
impl ::std::str::FromStr
    for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEndpointsItemExposure
{
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        match value {
            "public" => Ok(Self::Public),
            "internal" => Ok(Self::Internal),
            "none" => Ok(Self::None),
            _ => Err("invalid value".into()),
        }
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEndpointsItemExposure
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEndpointsItemExposure
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEndpointsItemExposure
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "`DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEndpointsItemName`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 15,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEndpointsItemName(
    ::std::string::String,
);
impl ::std::ops::Deref
    for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEndpointsItemName
{
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl
    ::std::convert::From<
        DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEndpointsItemName,
    > for ::std::string::String
{
    fn from(
        value : DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEndpointsItemName,
    ) -> Self {
        value.0
    }
}
impl
    ::std::convert::From<
        &DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEndpointsItemName,
    > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEndpointsItemName
{
    fn from(
        value : & DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEndpointsItemName,
    ) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr
    for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEndpointsItemName
{
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 15usize {
            return Err("longer than 15 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEndpointsItemName
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEndpointsItemName
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEndpointsItemName
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de>
    for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEndpointsItemName
{
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"http\","]
#[doc = "    \"https\","]
#[doc = "    \"ws\","]
#[doc = "    \"wss\","]
#[doc = "    \"tcp\","]
#[doc = "    \"udp\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEndpointsItemProtocol {
    #[serde(rename = "http")]
    Http,
    #[serde(rename = "https")]
    Https,
    #[serde(rename = "ws")]
    Ws,
    #[serde(rename = "wss")]
    Wss,
    #[serde(rename = "tcp")]
    Tcp,
    #[serde(rename = "udp")]
    Udp,
}
impl ::std::convert::From<&Self>
    for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEndpointsItemProtocol
{
    fn from(
        value : & DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEndpointsItemProtocol,
    ) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display
    for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEndpointsItemProtocol
{
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Http => f.write_str("http"),
            Self::Https => f.write_str("https"),
            Self::Ws => f.write_str("ws"),
            Self::Wss => f.write_str("wss"),
            Self::Tcp => f.write_str("tcp"),
            Self::Udp => f.write_str("udp"),
        }
    }
}
impl ::std::str::FromStr
    for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEndpointsItemProtocol
{
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        match value {
            "http" => Ok(Self::Http),
            "https" => Ok(Self::Https),
            "ws" => Ok(Self::Ws),
            "wss" => Ok(Self::Wss),
            "tcp" => Ok(Self::Tcp),
            "udp" => Ok(Self::Udp),
            _ => Err("invalid value".into()),
        }
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEndpointsItemProtocol
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEndpointsItemProtocol
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEndpointsItemProtocol
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "`DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEnvItem`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"name\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"name\": {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"value\": {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
pub struct DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEnvItem {
    pub name: ::std::string::String,
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub value: ::std::option::Option<::std::string::String>,
}
impl
    ::std::convert::From<
        &DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEnvItem,
    > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEnvItem
{
    fn from(
        value: &DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEnvItem,
    ) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEnvItem {
    pub fn builder(
    ) -> builder::DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEnvItem {
        Default::default()
    }
}
#[doc = "Volume that should be mounted to a component container"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Volume that should be mounted to a component container\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"name\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"name\": {"]
#[doc = "      \"description\": \"The volume mount name is the name of an existing `Volume` component. If several containers mount the same volume name then they will reuse the same volume and will be able to access to the same files.\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"maxLength\": 63,"]
#[doc = "      \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "    },"]
#[doc = "    \"path\": {"]
#[doc = "      \"description\": \"The path in the component container where the volume should be mounted. If not path is mentioned, default path is the is `/<name>`.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
pub struct DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerVolumeMountsItem {
    #[doc = "The volume mount name is the name of an existing `Volume` component. If several containers mount the same volume name then they will reuse the same volume and will be able to access to the same files."]
    pub name:
        DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerVolumeMountsItemName,
    #[doc = "The path in the component container where the volume should be mounted. If not path is mentioned, default path is the is `/<name>`."]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub path: ::std::option::Option<::std::string::String>,
}
impl
    ::std::convert::From<
        &DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerVolumeMountsItem,
    > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerVolumeMountsItem
{
    fn from(
        value : & DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerVolumeMountsItem,
    ) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerVolumeMountsItem {
    pub fn builder(
    ) -> builder::DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerVolumeMountsItem
    {
        Default::default()
    }
}
#[doc = "The volume mount name is the name of an existing `Volume` component. If several containers mount the same volume name then they will reuse the same volume and will be able to access to the same files."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"The volume mount name is the name of an existing `Volume` component. If several containers mount the same volume name then they will reuse the same volume and will be able to access to the same files.\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerVolumeMountsItemName(
    ::std::string::String,
);
impl ::std::ops::Deref
    for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerVolumeMountsItemName
{
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl
    ::std::convert::From<
        DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerVolumeMountsItemName,
    > for ::std::string::String
{
    fn from(
        value : DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerVolumeMountsItemName,
    ) -> Self {
        value.0
    }
}
impl
    ::std::convert::From<
        &DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerVolumeMountsItemName,
    > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerVolumeMountsItemName
{
    fn from(
        value : & DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerVolumeMountsItemName,
    ) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr
    for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerVolumeMountsItemName
{
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerVolumeMountsItemName
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerVolumeMountsItemName
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerVolumeMountsItemName
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de>
    for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerVolumeMountsItemName
{
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin.\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0Name(::std::string::String);
impl ::std::ops::Deref for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0Name {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0Name>
    for ::std::string::String
{
    fn from(value: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0Name) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0Name>
    for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0Name
{
    fn from(value: &DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0Name) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0Name {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0Name
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de>
    for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0Name
{
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Allows importing into the devworkspace the Kubernetes resources defined in a given manifest. For example this allows reusing the Kubernetes definitions used to deploy some runtime components in production."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Allows importing into the devworkspace the Kubernetes resources defined in a given manifest. For example this allows reusing the Kubernetes definitions used to deploy some runtime components in production.\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"uri\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"inlined\""]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"deployByDefault\": {"]
#[doc = "      \"description\": \"Defines if the component should be deployed during startup.\\n\\nDefault value is `false`\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"endpoints\": {"]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"object\","]
#[doc = "        \"required\": ["]
#[doc = "          \"name\""]
#[doc = "        ],"]
#[doc = "        \"properties\": {"]
#[doc = "          \"annotation\": {"]
#[doc = "            \"description\": \"Annotations to be added to Kubernetes Ingress or Openshift Route\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"additionalProperties\": {"]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"attributes\": {"]
#[doc = "            \"description\": \"Map of implementation-dependant string-based free-form attributes.\\n\\nExamples of Che-specific attributes:\\n- cookiesAuthEnabled: \\\"true\\\" / \\\"false\\\",\\n- type: \\\"terminal\\\" / \\\"ide\\\" / \\\"ide-dev\\\",\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"additionalProperties\": true"]
#[doc = "          },"]
#[doc = "          \"exposure\": {"]
#[doc = "            \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "            \"type\": \"string\","]
#[doc = "            \"enum\": ["]
#[doc = "              \"public\","]
#[doc = "              \"internal\","]
#[doc = "              \"none\""]
#[doc = "            ]"]
#[doc = "          },"]
#[doc = "          \"name\": {"]
#[doc = "            \"type\": \"string\","]
#[doc = "            \"maxLength\": 15,"]
#[doc = "            \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "          },"]
#[doc = "          \"path\": {"]
#[doc = "            \"description\": \"Path of the endpoint URL\","]
#[doc = "            \"type\": \"string\""]
#[doc = "          },"]
#[doc = "          \"protocol\": {"]
#[doc = "            \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "            \"type\": \"string\","]
#[doc = "            \"enum\": ["]
#[doc = "              \"http\","]
#[doc = "              \"https\","]
#[doc = "              \"ws\","]
#[doc = "              \"wss\","]
#[doc = "              \"tcp\","]
#[doc = "              \"udp\""]
#[doc = "            ]"]
#[doc = "          },"]
#[doc = "          \"secure\": {"]
#[doc = "            \"description\": \"Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.\","]
#[doc = "            \"type\": \"boolean\""]
#[doc = "          },"]
#[doc = "          \"targetPort\": {"]
#[doc = "            \"description\": \"Port number to be used within the container component. The same port cannot be used by two different container components.\","]
#[doc = "            \"type\": \"integer\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"additionalProperties\": false"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"inlined\": {"]
#[doc = "      \"description\": \"Inlined manifest\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"uri\": {"]
#[doc = "      \"description\": \"Location in a file fetched from a uri.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged, deny_unknown_fields)]
pub enum DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1Kubernetes {
    Variant0 { # [doc = "Defines if the component should be deployed during startup.\n\nDefault value is `false`"] # [serde (rename = "deployByDefault" , default , skip_serializing_if = "::std::option::Option::is_none")] deploy_by_default : :: std :: option :: Option < bool > , # [serde (default , skip_serializing_if = "::std::vec::Vec::is_empty")] endpoints : :: std :: vec :: Vec < DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant0EndpointsItem > , # [doc = "Location in a file fetched from a uri."] uri : :: std :: string :: String , } , Variant1 { # [doc = "Defines if the component should be deployed during startup.\n\nDefault value is `false`"] # [serde (rename = "deployByDefault" , default , skip_serializing_if = "::std::option::Option::is_none")] deploy_by_default : :: std :: option :: Option < bool > , # [serde (default , skip_serializing_if = "::std::vec::Vec::is_empty")] endpoints : :: std :: vec :: Vec < DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant1EndpointsItem > , # [doc = "Inlined manifest"] inlined : :: std :: string :: String , } , }
impl ::std::convert::From<&Self>
    for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1Kubernetes
{
    fn from(value: &DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1Kubernetes) -> Self {
        value.clone()
    }
}
#[doc = "`DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant0EndpointsItem`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"name\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"annotation\": {"]
#[doc = "      \"description\": \"Annotations to be added to Kubernetes Ingress or Openshift Route\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"attributes\": {"]
#[doc = "      \"description\": \"Map of implementation-dependant string-based free-form attributes.\\n\\nExamples of Che-specific attributes:\\n- cookiesAuthEnabled: \\\"true\\\" / \\\"false\\\",\\n- type: \\\"terminal\\\" / \\\"ide\\\" / \\\"ide-dev\\\",\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": true"]
#[doc = "    },"]
#[doc = "    \"exposure\": {"]
#[doc = "      \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"public\","]
#[doc = "        \"internal\","]
#[doc = "        \"none\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"maxLength\": 15,"]
#[doc = "      \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "    },"]
#[doc = "    \"path\": {"]
#[doc = "      \"description\": \"Path of the endpoint URL\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"protocol\": {"]
#[doc = "      \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"http\","]
#[doc = "        \"https\","]
#[doc = "        \"ws\","]
#[doc = "        \"wss\","]
#[doc = "        \"tcp\","]
#[doc = "        \"udp\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"secure\": {"]
#[doc = "      \"description\": \"Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"targetPort\": {"]
#[doc = "      \"description\": \"Port number to be used within the container component. The same port cannot be used by two different container components.\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
pub struct DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant0EndpointsItem { # [doc = "Annotations to be added to Kubernetes Ingress or Openshift Route"] # [serde (default , skip_serializing_if = ":: std :: collections :: HashMap::is_empty")] pub annotation : :: std :: collections :: HashMap < :: std :: string :: String , :: std :: string :: String > , # [doc = "Map of implementation-dependant string-based free-form attributes.\n\nExamples of Che-specific attributes:\n- cookiesAuthEnabled: \"true\" / \"false\",\n- type: \"terminal\" / \"ide\" / \"ide-dev\","] # [serde (default , skip_serializing_if = "::serde_json::Map::is_empty")] pub attributes : :: serde_json :: Map < :: std :: string :: String , :: serde_json :: Value > , # [doc = "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`"] # [serde (default , skip_serializing_if = "::std::option::Option::is_none")] pub exposure : :: std :: option :: Option < DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant0EndpointsItemExposure > , pub name : DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant0EndpointsItemName , # [doc = "Path of the endpoint URL"] # [serde (default , skip_serializing_if = "::std::option::Option::is_none")] pub path : :: std :: option :: Option < :: std :: string :: String > , # [doc = "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`"] # [serde (default , skip_serializing_if = "::std::option::Option::is_none")] pub protocol : :: std :: option :: Option < DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant0EndpointsItemProtocol > , # [doc = "Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`."] # [serde (default , skip_serializing_if = "::std::option::Option::is_none")] pub secure : :: std :: option :: Option < bool > , # [doc = "Port number to be used within the container component. The same port cannot be used by two different container components."] # [serde (rename = "targetPort" , default , skip_serializing_if = "::std::option::Option::is_none")] pub target_port : :: std :: option :: Option < i64 > , }
impl
    ::std::convert::From<
        &DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant0EndpointsItem,
    >
    for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant0EndpointsItem
{
    fn from(
        value : & DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant0EndpointsItem,
    ) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant0EndpointsItem {
    pub fn builder () -> builder :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant0EndpointsItem{
        Default::default()
    }
}
#[doc = "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"public\","]
#[doc = "    \"internal\","]
#[doc = "    \"none\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant0EndpointsItemExposure
{
    #[serde(rename = "public")]
    Public,
    #[serde(rename = "internal")]
    Internal,
    #[serde(rename = "none")]
    None,
}
impl :: std :: convert :: From < & Self > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant0EndpointsItemExposure { fn from (value : & DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant0EndpointsItemExposure) -> Self { value . clone () } }
impl :: std :: fmt :: Display for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant0EndpointsItemExposure { fn fmt (& self , f : & mut :: std :: fmt :: Formatter < '_ >) -> :: std :: fmt :: Result { match * self { Self :: Public => f . write_str ("public") , Self :: Internal => f . write_str ("internal") , Self :: None => f . write_str ("none") , } } }
impl :: std :: str :: FromStr for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant0EndpointsItemExposure { type Err = self :: error :: ConversionError ; fn from_str (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { match value { "public" => Ok (Self :: Public) , "internal" => Ok (Self :: Internal) , "none" => Ok (Self :: None) , _ => Err ("invalid value" . into ()) , } } }
impl :: std :: convert :: TryFrom < & str > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant0EndpointsItemExposure { type Error = self :: error :: ConversionError ; fn try_from (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < & :: std :: string :: String > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant0EndpointsItemExposure { type Error = self :: error :: ConversionError ; fn try_from (value : & :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < :: std :: string :: String > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant0EndpointsItemExposure { type Error = self :: error :: ConversionError ; fn try_from (value : :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
#[doc = "`DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant0EndpointsItemName`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 15,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant0EndpointsItemName(
    ::std::string::String,
);
impl :: std :: ops :: Deref for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant0EndpointsItemName { type Target = :: std :: string :: String ; fn deref (& self) -> & :: std :: string :: String { & self . 0 } }
impl :: std :: convert :: From < DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant0EndpointsItemName > for :: std :: string :: String { fn from (value : DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant0EndpointsItemName) -> Self { value . 0 } }
impl :: std :: convert :: From < & DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant0EndpointsItemName > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant0EndpointsItemName { fn from (value : & DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant0EndpointsItemName) -> Self { value . clone () } }
impl :: std :: str :: FromStr for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant0EndpointsItemName { type Err = self :: error :: ConversionError ; fn from_str (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { if value . chars () . count () > 15usize { return Err ("longer than 15 characters" . into ()) ; } static PATTERN : :: std :: sync :: LazyLock < :: regress :: Regex > = :: std :: sync :: LazyLock :: new (|| { :: regress :: Regex :: new ("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") . unwrap () }) ; if PATTERN . find (value) . is_none () { return Err ("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"" . into ()) ; } Ok (Self (value . to_string ())) } }
impl :: std :: convert :: TryFrom < & str > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant0EndpointsItemName { type Error = self :: error :: ConversionError ; fn try_from (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < & :: std :: string :: String > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant0EndpointsItemName { type Error = self :: error :: ConversionError ; fn try_from (value : & :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < :: std :: string :: String > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant0EndpointsItemName { type Error = self :: error :: ConversionError ; fn try_from (value : :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl < 'de > :: serde :: Deserialize < 'de > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant0EndpointsItemName { fn deserialize < D > (deserializer : D ,) -> :: std :: result :: Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { :: std :: string :: String :: deserialize (deserializer) ? . parse () . map_err (| e : self :: error :: ConversionError | { < D :: Error as :: serde :: de :: Error > :: custom (e . to_string () ,) }) } }
#[doc = "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"http\","]
#[doc = "    \"https\","]
#[doc = "    \"ws\","]
#[doc = "    \"wss\","]
#[doc = "    \"tcp\","]
#[doc = "    \"udp\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant0EndpointsItemProtocol
{
    #[serde(rename = "http")]
    Http,
    #[serde(rename = "https")]
    Https,
    #[serde(rename = "ws")]
    Ws,
    #[serde(rename = "wss")]
    Wss,
    #[serde(rename = "tcp")]
    Tcp,
    #[serde(rename = "udp")]
    Udp,
}
impl :: std :: convert :: From < & Self > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant0EndpointsItemProtocol { fn from (value : & DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant0EndpointsItemProtocol) -> Self { value . clone () } }
impl :: std :: fmt :: Display for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant0EndpointsItemProtocol { fn fmt (& self , f : & mut :: std :: fmt :: Formatter < '_ >) -> :: std :: fmt :: Result { match * self { Self :: Http => f . write_str ("http") , Self :: Https => f . write_str ("https") , Self :: Ws => f . write_str ("ws") , Self :: Wss => f . write_str ("wss") , Self :: Tcp => f . write_str ("tcp") , Self :: Udp => f . write_str ("udp") , } } }
impl :: std :: str :: FromStr for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant0EndpointsItemProtocol { type Err = self :: error :: ConversionError ; fn from_str (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { match value { "http" => Ok (Self :: Http) , "https" => Ok (Self :: Https) , "ws" => Ok (Self :: Ws) , "wss" => Ok (Self :: Wss) , "tcp" => Ok (Self :: Tcp) , "udp" => Ok (Self :: Udp) , _ => Err ("invalid value" . into ()) , } } }
impl :: std :: convert :: TryFrom < & str > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant0EndpointsItemProtocol { type Error = self :: error :: ConversionError ; fn try_from (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < & :: std :: string :: String > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant0EndpointsItemProtocol { type Error = self :: error :: ConversionError ; fn try_from (value : & :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < :: std :: string :: String > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant0EndpointsItemProtocol { type Error = self :: error :: ConversionError ; fn try_from (value : :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
#[doc = "`DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant1EndpointsItem`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"name\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"annotation\": {"]
#[doc = "      \"description\": \"Annotations to be added to Kubernetes Ingress or Openshift Route\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"attributes\": {"]
#[doc = "      \"description\": \"Map of implementation-dependant string-based free-form attributes.\\n\\nExamples of Che-specific attributes:\\n- cookiesAuthEnabled: \\\"true\\\" / \\\"false\\\",\\n- type: \\\"terminal\\\" / \\\"ide\\\" / \\\"ide-dev\\\",\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": true"]
#[doc = "    },"]
#[doc = "    \"exposure\": {"]
#[doc = "      \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"public\","]
#[doc = "        \"internal\","]
#[doc = "        \"none\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"maxLength\": 15,"]
#[doc = "      \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "    },"]
#[doc = "    \"path\": {"]
#[doc = "      \"description\": \"Path of the endpoint URL\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"protocol\": {"]
#[doc = "      \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"http\","]
#[doc = "        \"https\","]
#[doc = "        \"ws\","]
#[doc = "        \"wss\","]
#[doc = "        \"tcp\","]
#[doc = "        \"udp\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"secure\": {"]
#[doc = "      \"description\": \"Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"targetPort\": {"]
#[doc = "      \"description\": \"Port number to be used within the container component. The same port cannot be used by two different container components.\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
pub struct DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant1EndpointsItem { # [doc = "Annotations to be added to Kubernetes Ingress or Openshift Route"] # [serde (default , skip_serializing_if = ":: std :: collections :: HashMap::is_empty")] pub annotation : :: std :: collections :: HashMap < :: std :: string :: String , :: std :: string :: String > , # [doc = "Map of implementation-dependant string-based free-form attributes.\n\nExamples of Che-specific attributes:\n- cookiesAuthEnabled: \"true\" / \"false\",\n- type: \"terminal\" / \"ide\" / \"ide-dev\","] # [serde (default , skip_serializing_if = "::serde_json::Map::is_empty")] pub attributes : :: serde_json :: Map < :: std :: string :: String , :: serde_json :: Value > , # [doc = "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`"] # [serde (default , skip_serializing_if = "::std::option::Option::is_none")] pub exposure : :: std :: option :: Option < DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant1EndpointsItemExposure > , pub name : DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant1EndpointsItemName , # [doc = "Path of the endpoint URL"] # [serde (default , skip_serializing_if = "::std::option::Option::is_none")] pub path : :: std :: option :: Option < :: std :: string :: String > , # [doc = "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`"] # [serde (default , skip_serializing_if = "::std::option::Option::is_none")] pub protocol : :: std :: option :: Option < DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant1EndpointsItemProtocol > , # [doc = "Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`."] # [serde (default , skip_serializing_if = "::std::option::Option::is_none")] pub secure : :: std :: option :: Option < bool > , # [doc = "Port number to be used within the container component. The same port cannot be used by two different container components."] # [serde (rename = "targetPort" , default , skip_serializing_if = "::std::option::Option::is_none")] pub target_port : :: std :: option :: Option < i64 > , }
impl
    ::std::convert::From<
        &DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant1EndpointsItem,
    >
    for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant1EndpointsItem
{
    fn from(
        value : & DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant1EndpointsItem,
    ) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant1EndpointsItem {
    pub fn builder () -> builder :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant1EndpointsItem{
        Default::default()
    }
}
#[doc = "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"public\","]
#[doc = "    \"internal\","]
#[doc = "    \"none\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant1EndpointsItemExposure
{
    #[serde(rename = "public")]
    Public,
    #[serde(rename = "internal")]
    Internal,
    #[serde(rename = "none")]
    None,
}
impl :: std :: convert :: From < & Self > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant1EndpointsItemExposure { fn from (value : & DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant1EndpointsItemExposure) -> Self { value . clone () } }
impl :: std :: fmt :: Display for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant1EndpointsItemExposure { fn fmt (& self , f : & mut :: std :: fmt :: Formatter < '_ >) -> :: std :: fmt :: Result { match * self { Self :: Public => f . write_str ("public") , Self :: Internal => f . write_str ("internal") , Self :: None => f . write_str ("none") , } } }
impl :: std :: str :: FromStr for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant1EndpointsItemExposure { type Err = self :: error :: ConversionError ; fn from_str (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { match value { "public" => Ok (Self :: Public) , "internal" => Ok (Self :: Internal) , "none" => Ok (Self :: None) , _ => Err ("invalid value" . into ()) , } } }
impl :: std :: convert :: TryFrom < & str > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant1EndpointsItemExposure { type Error = self :: error :: ConversionError ; fn try_from (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < & :: std :: string :: String > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant1EndpointsItemExposure { type Error = self :: error :: ConversionError ; fn try_from (value : & :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < :: std :: string :: String > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant1EndpointsItemExposure { type Error = self :: error :: ConversionError ; fn try_from (value : :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
#[doc = "`DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant1EndpointsItemName`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 15,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant1EndpointsItemName(
    ::std::string::String,
);
impl :: std :: ops :: Deref for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant1EndpointsItemName { type Target = :: std :: string :: String ; fn deref (& self) -> & :: std :: string :: String { & self . 0 } }
impl :: std :: convert :: From < DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant1EndpointsItemName > for :: std :: string :: String { fn from (value : DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant1EndpointsItemName) -> Self { value . 0 } }
impl :: std :: convert :: From < & DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant1EndpointsItemName > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant1EndpointsItemName { fn from (value : & DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant1EndpointsItemName) -> Self { value . clone () } }
impl :: std :: str :: FromStr for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant1EndpointsItemName { type Err = self :: error :: ConversionError ; fn from_str (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { if value . chars () . count () > 15usize { return Err ("longer than 15 characters" . into ()) ; } static PATTERN : :: std :: sync :: LazyLock < :: regress :: Regex > = :: std :: sync :: LazyLock :: new (|| { :: regress :: Regex :: new ("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") . unwrap () }) ; if PATTERN . find (value) . is_none () { return Err ("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"" . into ()) ; } Ok (Self (value . to_string ())) } }
impl :: std :: convert :: TryFrom < & str > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant1EndpointsItemName { type Error = self :: error :: ConversionError ; fn try_from (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < & :: std :: string :: String > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant1EndpointsItemName { type Error = self :: error :: ConversionError ; fn try_from (value : & :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < :: std :: string :: String > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant1EndpointsItemName { type Error = self :: error :: ConversionError ; fn try_from (value : :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl < 'de > :: serde :: Deserialize < 'de > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant1EndpointsItemName { fn deserialize < D > (deserializer : D ,) -> :: std :: result :: Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { :: std :: string :: String :: deserialize (deserializer) ? . parse () . map_err (| e : self :: error :: ConversionError | { < D :: Error as :: serde :: de :: Error > :: custom (e . to_string () ,) }) } }
#[doc = "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"http\","]
#[doc = "    \"https\","]
#[doc = "    \"ws\","]
#[doc = "    \"wss\","]
#[doc = "    \"tcp\","]
#[doc = "    \"udp\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant1EndpointsItemProtocol
{
    #[serde(rename = "http")]
    Http,
    #[serde(rename = "https")]
    Https,
    #[serde(rename = "ws")]
    Ws,
    #[serde(rename = "wss")]
    Wss,
    #[serde(rename = "tcp")]
    Tcp,
    #[serde(rename = "udp")]
    Udp,
}
impl :: std :: convert :: From < & Self > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant1EndpointsItemProtocol { fn from (value : & DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant1EndpointsItemProtocol) -> Self { value . clone () } }
impl :: std :: fmt :: Display for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant1EndpointsItemProtocol { fn fmt (& self , f : & mut :: std :: fmt :: Formatter < '_ >) -> :: std :: fmt :: Result { match * self { Self :: Http => f . write_str ("http") , Self :: Https => f . write_str ("https") , Self :: Ws => f . write_str ("ws") , Self :: Wss => f . write_str ("wss") , Self :: Tcp => f . write_str ("tcp") , Self :: Udp => f . write_str ("udp") , } } }
impl :: std :: str :: FromStr for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant1EndpointsItemProtocol { type Err = self :: error :: ConversionError ; fn from_str (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { match value { "http" => Ok (Self :: Http) , "https" => Ok (Self :: Https) , "ws" => Ok (Self :: Ws) , "wss" => Ok (Self :: Wss) , "tcp" => Ok (Self :: Tcp) , "udp" => Ok (Self :: Udp) , _ => Err ("invalid value" . into ()) , } } }
impl :: std :: convert :: TryFrom < & str > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant1EndpointsItemProtocol { type Error = self :: error :: ConversionError ; fn try_from (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < & :: std :: string :: String > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant1EndpointsItemProtocol { type Error = self :: error :: ConversionError ; fn try_from (value : & :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < :: std :: string :: String > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant1EndpointsItemProtocol { type Error = self :: error :: ConversionError ; fn try_from (value : :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
#[doc = "Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin.\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1Name(::std::string::String);
impl ::std::ops::Deref for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1Name {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1Name>
    for ::std::string::String
{
    fn from(value: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1Name) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1Name>
    for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1Name
{
    fn from(value: &DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1Name) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1Name {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1Name
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de>
    for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1Name
{
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin.\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2Name(::std::string::String);
impl ::std::ops::Deref for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2Name {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2Name>
    for ::std::string::String
{
    fn from(value: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2Name) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2Name>
    for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2Name
{
    fn from(value: &DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2Name) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2Name {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2Name
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de>
    for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2Name
{
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Allows importing into the devworkspace the OpenShift resources defined in a given manifest. For example this allows reusing the OpenShift definitions used to deploy some runtime components in production."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Allows importing into the devworkspace the OpenShift resources defined in a given manifest. For example this allows reusing the OpenShift definitions used to deploy some runtime components in production.\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"uri\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"inlined\""]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"deployByDefault\": {"]
#[doc = "      \"description\": \"Defines if the component should be deployed during startup.\\n\\nDefault value is `false`\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"endpoints\": {"]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"object\","]
#[doc = "        \"required\": ["]
#[doc = "          \"name\""]
#[doc = "        ],"]
#[doc = "        \"properties\": {"]
#[doc = "          \"annotation\": {"]
#[doc = "            \"description\": \"Annotations to be added to Kubernetes Ingress or Openshift Route\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"additionalProperties\": {"]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"attributes\": {"]
#[doc = "            \"description\": \"Map of implementation-dependant string-based free-form attributes.\\n\\nExamples of Che-specific attributes:\\n- cookiesAuthEnabled: \\\"true\\\" / \\\"false\\\",\\n- type: \\\"terminal\\\" / \\\"ide\\\" / \\\"ide-dev\\\",\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"additionalProperties\": true"]
#[doc = "          },"]
#[doc = "          \"exposure\": {"]
#[doc = "            \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "            \"type\": \"string\","]
#[doc = "            \"enum\": ["]
#[doc = "              \"public\","]
#[doc = "              \"internal\","]
#[doc = "              \"none\""]
#[doc = "            ]"]
#[doc = "          },"]
#[doc = "          \"name\": {"]
#[doc = "            \"type\": \"string\","]
#[doc = "            \"maxLength\": 15,"]
#[doc = "            \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "          },"]
#[doc = "          \"path\": {"]
#[doc = "            \"description\": \"Path of the endpoint URL\","]
#[doc = "            \"type\": \"string\""]
#[doc = "          },"]
#[doc = "          \"protocol\": {"]
#[doc = "            \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "            \"type\": \"string\","]
#[doc = "            \"enum\": ["]
#[doc = "              \"http\","]
#[doc = "              \"https\","]
#[doc = "              \"ws\","]
#[doc = "              \"wss\","]
#[doc = "              \"tcp\","]
#[doc = "              \"udp\""]
#[doc = "            ]"]
#[doc = "          },"]
#[doc = "          \"secure\": {"]
#[doc = "            \"description\": \"Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.\","]
#[doc = "            \"type\": \"boolean\""]
#[doc = "          },"]
#[doc = "          \"targetPort\": {"]
#[doc = "            \"description\": \"Port number to be used within the container component. The same port cannot be used by two different container components.\","]
#[doc = "            \"type\": \"integer\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"additionalProperties\": false"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"inlined\": {"]
#[doc = "      \"description\": \"Inlined manifest\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"uri\": {"]
#[doc = "      \"description\": \"Location in a file fetched from a uri.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged, deny_unknown_fields)]
pub enum DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2Openshift {
    Variant0 { # [doc = "Defines if the component should be deployed during startup.\n\nDefault value is `false`"] # [serde (rename = "deployByDefault" , default , skip_serializing_if = "::std::option::Option::is_none")] deploy_by_default : :: std :: option :: Option < bool > , # [serde (default , skip_serializing_if = "::std::vec::Vec::is_empty")] endpoints : :: std :: vec :: Vec < DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant0EndpointsItem > , # [doc = "Location in a file fetched from a uri."] uri : :: std :: string :: String , } , Variant1 { # [doc = "Defines if the component should be deployed during startup.\n\nDefault value is `false`"] # [serde (rename = "deployByDefault" , default , skip_serializing_if = "::std::option::Option::is_none")] deploy_by_default : :: std :: option :: Option < bool > , # [serde (default , skip_serializing_if = "::std::vec::Vec::is_empty")] endpoints : :: std :: vec :: Vec < DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant1EndpointsItem > , # [doc = "Inlined manifest"] inlined : :: std :: string :: String , } , }
impl ::std::convert::From<&Self>
    for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2Openshift
{
    fn from(value: &DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2Openshift) -> Self {
        value.clone()
    }
}
#[doc = "`DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant0EndpointsItem`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"name\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"annotation\": {"]
#[doc = "      \"description\": \"Annotations to be added to Kubernetes Ingress or Openshift Route\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"attributes\": {"]
#[doc = "      \"description\": \"Map of implementation-dependant string-based free-form attributes.\\n\\nExamples of Che-specific attributes:\\n- cookiesAuthEnabled: \\\"true\\\" / \\\"false\\\",\\n- type: \\\"terminal\\\" / \\\"ide\\\" / \\\"ide-dev\\\",\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": true"]
#[doc = "    },"]
#[doc = "    \"exposure\": {"]
#[doc = "      \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"public\","]
#[doc = "        \"internal\","]
#[doc = "        \"none\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"maxLength\": 15,"]
#[doc = "      \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "    },"]
#[doc = "    \"path\": {"]
#[doc = "      \"description\": \"Path of the endpoint URL\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"protocol\": {"]
#[doc = "      \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"http\","]
#[doc = "        \"https\","]
#[doc = "        \"ws\","]
#[doc = "        \"wss\","]
#[doc = "        \"tcp\","]
#[doc = "        \"udp\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"secure\": {"]
#[doc = "      \"description\": \"Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"targetPort\": {"]
#[doc = "      \"description\": \"Port number to be used within the container component. The same port cannot be used by two different container components.\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
pub struct DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant0EndpointsItem { # [doc = "Annotations to be added to Kubernetes Ingress or Openshift Route"] # [serde (default , skip_serializing_if = ":: std :: collections :: HashMap::is_empty")] pub annotation : :: std :: collections :: HashMap < :: std :: string :: String , :: std :: string :: String > , # [doc = "Map of implementation-dependant string-based free-form attributes.\n\nExamples of Che-specific attributes:\n- cookiesAuthEnabled: \"true\" / \"false\",\n- type: \"terminal\" / \"ide\" / \"ide-dev\","] # [serde (default , skip_serializing_if = "::serde_json::Map::is_empty")] pub attributes : :: serde_json :: Map < :: std :: string :: String , :: serde_json :: Value > , # [doc = "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`"] # [serde (default , skip_serializing_if = "::std::option::Option::is_none")] pub exposure : :: std :: option :: Option < DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant0EndpointsItemExposure > , pub name : DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant0EndpointsItemName , # [doc = "Path of the endpoint URL"] # [serde (default , skip_serializing_if = "::std::option::Option::is_none")] pub path : :: std :: option :: Option < :: std :: string :: String > , # [doc = "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`"] # [serde (default , skip_serializing_if = "::std::option::Option::is_none")] pub protocol : :: std :: option :: Option < DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant0EndpointsItemProtocol > , # [doc = "Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`."] # [serde (default , skip_serializing_if = "::std::option::Option::is_none")] pub secure : :: std :: option :: Option < bool > , # [doc = "Port number to be used within the container component. The same port cannot be used by two different container components."] # [serde (rename = "targetPort" , default , skip_serializing_if = "::std::option::Option::is_none")] pub target_port : :: std :: option :: Option < i64 > , }
impl
    ::std::convert::From<
        &DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant0EndpointsItem,
    >
    for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant0EndpointsItem
{
    fn from(
        value : & DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant0EndpointsItem,
    ) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant0EndpointsItem {
    pub fn builder () -> builder :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant0EndpointsItem{
        Default::default()
    }
}
#[doc = "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"public\","]
#[doc = "    \"internal\","]
#[doc = "    \"none\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant0EndpointsItemExposure
{
    #[serde(rename = "public")]
    Public,
    #[serde(rename = "internal")]
    Internal,
    #[serde(rename = "none")]
    None,
}
impl :: std :: convert :: From < & Self > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant0EndpointsItemExposure { fn from (value : & DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant0EndpointsItemExposure) -> Self { value . clone () } }
impl :: std :: fmt :: Display for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant0EndpointsItemExposure { fn fmt (& self , f : & mut :: std :: fmt :: Formatter < '_ >) -> :: std :: fmt :: Result { match * self { Self :: Public => f . write_str ("public") , Self :: Internal => f . write_str ("internal") , Self :: None => f . write_str ("none") , } } }
impl :: std :: str :: FromStr for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant0EndpointsItemExposure { type Err = self :: error :: ConversionError ; fn from_str (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { match value { "public" => Ok (Self :: Public) , "internal" => Ok (Self :: Internal) , "none" => Ok (Self :: None) , _ => Err ("invalid value" . into ()) , } } }
impl :: std :: convert :: TryFrom < & str > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant0EndpointsItemExposure { type Error = self :: error :: ConversionError ; fn try_from (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < & :: std :: string :: String > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant0EndpointsItemExposure { type Error = self :: error :: ConversionError ; fn try_from (value : & :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < :: std :: string :: String > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant0EndpointsItemExposure { type Error = self :: error :: ConversionError ; fn try_from (value : :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
#[doc = "`DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant0EndpointsItemName`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 15,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant0EndpointsItemName(
    ::std::string::String,
);
impl :: std :: ops :: Deref for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant0EndpointsItemName { type Target = :: std :: string :: String ; fn deref (& self) -> & :: std :: string :: String { & self . 0 } }
impl :: std :: convert :: From < DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant0EndpointsItemName > for :: std :: string :: String { fn from (value : DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant0EndpointsItemName) -> Self { value . 0 } }
impl :: std :: convert :: From < & DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant0EndpointsItemName > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant0EndpointsItemName { fn from (value : & DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant0EndpointsItemName) -> Self { value . clone () } }
impl :: std :: str :: FromStr for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant0EndpointsItemName { type Err = self :: error :: ConversionError ; fn from_str (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { if value . chars () . count () > 15usize { return Err ("longer than 15 characters" . into ()) ; } static PATTERN : :: std :: sync :: LazyLock < :: regress :: Regex > = :: std :: sync :: LazyLock :: new (|| { :: regress :: Regex :: new ("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") . unwrap () }) ; if PATTERN . find (value) . is_none () { return Err ("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"" . into ()) ; } Ok (Self (value . to_string ())) } }
impl :: std :: convert :: TryFrom < & str > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant0EndpointsItemName { type Error = self :: error :: ConversionError ; fn try_from (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < & :: std :: string :: String > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant0EndpointsItemName { type Error = self :: error :: ConversionError ; fn try_from (value : & :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < :: std :: string :: String > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant0EndpointsItemName { type Error = self :: error :: ConversionError ; fn try_from (value : :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl < 'de > :: serde :: Deserialize < 'de > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant0EndpointsItemName { fn deserialize < D > (deserializer : D ,) -> :: std :: result :: Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { :: std :: string :: String :: deserialize (deserializer) ? . parse () . map_err (| e : self :: error :: ConversionError | { < D :: Error as :: serde :: de :: Error > :: custom (e . to_string () ,) }) } }
#[doc = "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"http\","]
#[doc = "    \"https\","]
#[doc = "    \"ws\","]
#[doc = "    \"wss\","]
#[doc = "    \"tcp\","]
#[doc = "    \"udp\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant0EndpointsItemProtocol
{
    #[serde(rename = "http")]
    Http,
    #[serde(rename = "https")]
    Https,
    #[serde(rename = "ws")]
    Ws,
    #[serde(rename = "wss")]
    Wss,
    #[serde(rename = "tcp")]
    Tcp,
    #[serde(rename = "udp")]
    Udp,
}
impl :: std :: convert :: From < & Self > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant0EndpointsItemProtocol { fn from (value : & DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant0EndpointsItemProtocol) -> Self { value . clone () } }
impl :: std :: fmt :: Display for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant0EndpointsItemProtocol { fn fmt (& self , f : & mut :: std :: fmt :: Formatter < '_ >) -> :: std :: fmt :: Result { match * self { Self :: Http => f . write_str ("http") , Self :: Https => f . write_str ("https") , Self :: Ws => f . write_str ("ws") , Self :: Wss => f . write_str ("wss") , Self :: Tcp => f . write_str ("tcp") , Self :: Udp => f . write_str ("udp") , } } }
impl :: std :: str :: FromStr for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant0EndpointsItemProtocol { type Err = self :: error :: ConversionError ; fn from_str (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { match value { "http" => Ok (Self :: Http) , "https" => Ok (Self :: Https) , "ws" => Ok (Self :: Ws) , "wss" => Ok (Self :: Wss) , "tcp" => Ok (Self :: Tcp) , "udp" => Ok (Self :: Udp) , _ => Err ("invalid value" . into ()) , } } }
impl :: std :: convert :: TryFrom < & str > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant0EndpointsItemProtocol { type Error = self :: error :: ConversionError ; fn try_from (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < & :: std :: string :: String > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant0EndpointsItemProtocol { type Error = self :: error :: ConversionError ; fn try_from (value : & :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < :: std :: string :: String > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant0EndpointsItemProtocol { type Error = self :: error :: ConversionError ; fn try_from (value : :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
#[doc = "`DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant1EndpointsItem`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"name\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"annotation\": {"]
#[doc = "      \"description\": \"Annotations to be added to Kubernetes Ingress or Openshift Route\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"attributes\": {"]
#[doc = "      \"description\": \"Map of implementation-dependant string-based free-form attributes.\\n\\nExamples of Che-specific attributes:\\n- cookiesAuthEnabled: \\\"true\\\" / \\\"false\\\",\\n- type: \\\"terminal\\\" / \\\"ide\\\" / \\\"ide-dev\\\",\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": true"]
#[doc = "    },"]
#[doc = "    \"exposure\": {"]
#[doc = "      \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"public\","]
#[doc = "        \"internal\","]
#[doc = "        \"none\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"maxLength\": 15,"]
#[doc = "      \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "    },"]
#[doc = "    \"path\": {"]
#[doc = "      \"description\": \"Path of the endpoint URL\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"protocol\": {"]
#[doc = "      \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"http\","]
#[doc = "        \"https\","]
#[doc = "        \"ws\","]
#[doc = "        \"wss\","]
#[doc = "        \"tcp\","]
#[doc = "        \"udp\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"secure\": {"]
#[doc = "      \"description\": \"Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"targetPort\": {"]
#[doc = "      \"description\": \"Port number to be used within the container component. The same port cannot be used by two different container components.\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
pub struct DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant1EndpointsItem { # [doc = "Annotations to be added to Kubernetes Ingress or Openshift Route"] # [serde (default , skip_serializing_if = ":: std :: collections :: HashMap::is_empty")] pub annotation : :: std :: collections :: HashMap < :: std :: string :: String , :: std :: string :: String > , # [doc = "Map of implementation-dependant string-based free-form attributes.\n\nExamples of Che-specific attributes:\n- cookiesAuthEnabled: \"true\" / \"false\",\n- type: \"terminal\" / \"ide\" / \"ide-dev\","] # [serde (default , skip_serializing_if = "::serde_json::Map::is_empty")] pub attributes : :: serde_json :: Map < :: std :: string :: String , :: serde_json :: Value > , # [doc = "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`"] # [serde (default , skip_serializing_if = "::std::option::Option::is_none")] pub exposure : :: std :: option :: Option < DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant1EndpointsItemExposure > , pub name : DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant1EndpointsItemName , # [doc = "Path of the endpoint URL"] # [serde (default , skip_serializing_if = "::std::option::Option::is_none")] pub path : :: std :: option :: Option < :: std :: string :: String > , # [doc = "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`"] # [serde (default , skip_serializing_if = "::std::option::Option::is_none")] pub protocol : :: std :: option :: Option < DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant1EndpointsItemProtocol > , # [doc = "Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`."] # [serde (default , skip_serializing_if = "::std::option::Option::is_none")] pub secure : :: std :: option :: Option < bool > , # [doc = "Port number to be used within the container component. The same port cannot be used by two different container components."] # [serde (rename = "targetPort" , default , skip_serializing_if = "::std::option::Option::is_none")] pub target_port : :: std :: option :: Option < i64 > , }
impl
    ::std::convert::From<
        &DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant1EndpointsItem,
    >
    for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant1EndpointsItem
{
    fn from(
        value : & DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant1EndpointsItem,
    ) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant1EndpointsItem {
    pub fn builder () -> builder :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant1EndpointsItem{
        Default::default()
    }
}
#[doc = "Describes how the endpoint should be exposed on the network.\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\n\nDefault value is `public`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Describes how the endpoint should be exposed on the network.\\n- `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route.\\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network.\\n- `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address.\\n\\nDefault value is `public`\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"public\","]
#[doc = "    \"internal\","]
#[doc = "    \"none\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant1EndpointsItemExposure
{
    #[serde(rename = "public")]
    Public,
    #[serde(rename = "internal")]
    Internal,
    #[serde(rename = "none")]
    None,
}
impl :: std :: convert :: From < & Self > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant1EndpointsItemExposure { fn from (value : & DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant1EndpointsItemExposure) -> Self { value . clone () } }
impl :: std :: fmt :: Display for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant1EndpointsItemExposure { fn fmt (& self , f : & mut :: std :: fmt :: Formatter < '_ >) -> :: std :: fmt :: Result { match * self { Self :: Public => f . write_str ("public") , Self :: Internal => f . write_str ("internal") , Self :: None => f . write_str ("none") , } } }
impl :: std :: str :: FromStr for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant1EndpointsItemExposure { type Err = self :: error :: ConversionError ; fn from_str (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { match value { "public" => Ok (Self :: Public) , "internal" => Ok (Self :: Internal) , "none" => Ok (Self :: None) , _ => Err ("invalid value" . into ()) , } } }
impl :: std :: convert :: TryFrom < & str > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant1EndpointsItemExposure { type Error = self :: error :: ConversionError ; fn try_from (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < & :: std :: string :: String > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant1EndpointsItemExposure { type Error = self :: error :: ConversionError ; fn try_from (value : & :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < :: std :: string :: String > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant1EndpointsItemExposure { type Error = self :: error :: ConversionError ; fn try_from (value : :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
#[doc = "`DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant1EndpointsItemName`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 15,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant1EndpointsItemName(
    ::std::string::String,
);
impl :: std :: ops :: Deref for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant1EndpointsItemName { type Target = :: std :: string :: String ; fn deref (& self) -> & :: std :: string :: String { & self . 0 } }
impl :: std :: convert :: From < DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant1EndpointsItemName > for :: std :: string :: String { fn from (value : DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant1EndpointsItemName) -> Self { value . 0 } }
impl :: std :: convert :: From < & DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant1EndpointsItemName > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant1EndpointsItemName { fn from (value : & DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant1EndpointsItemName) -> Self { value . clone () } }
impl :: std :: str :: FromStr for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant1EndpointsItemName { type Err = self :: error :: ConversionError ; fn from_str (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { if value . chars () . count () > 15usize { return Err ("longer than 15 characters" . into ()) ; } static PATTERN : :: std :: sync :: LazyLock < :: regress :: Regex > = :: std :: sync :: LazyLock :: new (|| { :: regress :: Regex :: new ("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") . unwrap () }) ; if PATTERN . find (value) . is_none () { return Err ("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"" . into ()) ; } Ok (Self (value . to_string ())) } }
impl :: std :: convert :: TryFrom < & str > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant1EndpointsItemName { type Error = self :: error :: ConversionError ; fn try_from (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < & :: std :: string :: String > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant1EndpointsItemName { type Error = self :: error :: ConversionError ; fn try_from (value : & :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < :: std :: string :: String > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant1EndpointsItemName { type Error = self :: error :: ConversionError ; fn try_from (value : :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl < 'de > :: serde :: Deserialize < 'de > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant1EndpointsItemName { fn deserialize < D > (deserializer : D ,) -> :: std :: result :: Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { :: std :: string :: String :: deserialize (deserializer) ? . parse () . map_err (| e : self :: error :: ConversionError | { < D :: Error as :: serde :: de :: Error > :: custom (e . to_string () ,) }) } }
#[doc = "Describes the application and transport protocols of the traffic that will go through this endpoint.\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Describes the application and transport protocols of the traffic that will go through this endpoint.\\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`.\\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\\n\\nDefault value is `http`\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"http\","]
#[doc = "    \"https\","]
#[doc = "    \"ws\","]
#[doc = "    \"wss\","]
#[doc = "    \"tcp\","]
#[doc = "    \"udp\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant1EndpointsItemProtocol
{
    #[serde(rename = "http")]
    Http,
    #[serde(rename = "https")]
    Https,
    #[serde(rename = "ws")]
    Ws,
    #[serde(rename = "wss")]
    Wss,
    #[serde(rename = "tcp")]
    Tcp,
    #[serde(rename = "udp")]
    Udp,
}
impl :: std :: convert :: From < & Self > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant1EndpointsItemProtocol { fn from (value : & DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant1EndpointsItemProtocol) -> Self { value . clone () } }
impl :: std :: fmt :: Display for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant1EndpointsItemProtocol { fn fmt (& self , f : & mut :: std :: fmt :: Formatter < '_ >) -> :: std :: fmt :: Result { match * self { Self :: Http => f . write_str ("http") , Self :: Https => f . write_str ("https") , Self :: Ws => f . write_str ("ws") , Self :: Wss => f . write_str ("wss") , Self :: Tcp => f . write_str ("tcp") , Self :: Udp => f . write_str ("udp") , } } }
impl :: std :: str :: FromStr for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant1EndpointsItemProtocol { type Err = self :: error :: ConversionError ; fn from_str (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { match value { "http" => Ok (Self :: Http) , "https" => Ok (Self :: Https) , "ws" => Ok (Self :: Ws) , "wss" => Ok (Self :: Wss) , "tcp" => Ok (Self :: Tcp) , "udp" => Ok (Self :: Udp) , _ => Err ("invalid value" . into ()) , } } }
impl :: std :: convert :: TryFrom < & str > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant1EndpointsItemProtocol { type Error = self :: error :: ConversionError ; fn try_from (value : & str) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < & :: std :: string :: String > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant1EndpointsItemProtocol { type Error = self :: error :: ConversionError ; fn try_from (value : & :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
impl :: std :: convert :: TryFrom < :: std :: string :: String > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant1EndpointsItemProtocol { type Error = self :: error :: ConversionError ; fn try_from (value : :: std :: string :: String) -> :: std :: result :: Result < Self , self :: error :: ConversionError > { value . parse () } }
#[doc = "Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin.\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant2ComponentsItemVariant3Name(::std::string::String);
impl ::std::ops::Deref for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant3Name {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222ParentVariant2ComponentsItemVariant3Name>
    for ::std::string::String
{
    fn from(value: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant3Name) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant2ComponentsItemVariant3Name>
    for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant3Name
{
    fn from(value: &DevfileSchemaVersion222ParentVariant2ComponentsItemVariant3Name) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant3Name {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant3Name
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant3Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant3Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de>
    for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant3Name
{
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Allows specifying the definition of a volume shared by several other components"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Allows specifying the definition of a volume shared by several other components\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"ephemeral\": {"]
#[doc = "      \"description\": \"Ephemeral volumes are not stored persistently across restarts. Defaults to false\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"size\": {"]
#[doc = "      \"description\": \"Size of the volume\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant2ComponentsItemVariant3Volume {
    #[doc = "Ephemeral volumes are not stored persistently across restarts. Defaults to false"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub ephemeral: ::std::option::Option<bool>,
    #[doc = "Size of the volume"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub size: ::std::option::Option<::std::string::String>,
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant2ComponentsItemVariant3Volume>
    for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant3Volume
{
    fn from(value: &DevfileSchemaVersion222ParentVariant2ComponentsItemVariant3Volume) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant2ComponentsItemVariant3Volume {
    pub fn builder() -> builder::DevfileSchemaVersion222ParentVariant2ComponentsItemVariant3Volume {
        Default::default()
    }
}
#[doc = "Allows specifying the definition of an image for outer loop builds"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Allows specifying the definition of an image for outer loop builds\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"dockerfile\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"autoBuild\""]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"autoBuild\": {"]
#[doc = "      \"description\": \"Defines if the image should be built during startup.\\n\\nDefault value is `false`\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"dockerfile\": {"]
#[doc = "      \"description\": \"Allows specifying dockerfile type build\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"required\": ["]
#[doc = "            \"uri\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"required\": ["]
#[doc = "            \"devfileRegistry\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"required\": ["]
#[doc = "            \"git\""]
#[doc = "          ]"]
#[doc = "        }"]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"args\": {"]
#[doc = "          \"description\": \"The arguments to supply to the dockerfile build.\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"buildContext\": {"]
#[doc = "          \"description\": \"Path of source directory to establish build context. Defaults to ${PROJECT_SOURCE} in the container\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"devfileRegistry\": {"]
#[doc = "          \"description\": \"Dockerfile's Devfile Registry source\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"properties\": {"]
#[doc = "            \"id\": {"]
#[doc = "              \"description\": \"Id in a devfile registry that contains a Dockerfile. The src in the OCI registry required for the Dockerfile build will be downloaded for building the image.\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"registryUrl\": {"]
#[doc = "              \"description\": \"Devfile Registry URL to pull the Dockerfile from when using the Devfile Registry as Dockerfile src. To ensure the Dockerfile gets resolved consistently in different environments, it is recommended to always specify the `devfileRegistryUrl` when `Id` is used.\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"git\": {"]
#[doc = "          \"description\": \"Dockerfile's Git source\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"properties\": {"]
#[doc = "            \"checkoutFrom\": {"]
#[doc = "              \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"properties\": {"]
#[doc = "                \"remote\": {"]
#[doc = "                  \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                },"]
#[doc = "                \"revision\": {"]
#[doc = "                  \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            },"]
#[doc = "            \"fileLocation\": {"]
#[doc = "              \"description\": \"Location of the Dockerfile in the Git repository when using git as Dockerfile src. Defaults to Dockerfile.\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"remotes\": {"]
#[doc = "              \"description\": \"The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"additionalProperties\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"rootRequired\": {"]
#[doc = "          \"description\": \"Specify if a privileged builder pod is required.\\n\\nDefault value is `false`\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"uri\": {"]
#[doc = "          \"description\": \"URI Reference of a Dockerfile. It can be a full URL or a relative URI from the current devfile as the base URI.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"imageName\": {"]
#[doc = "      \"description\": \"Name of the image for the resulting outerloop build\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged, deny_unknown_fields)]
pub enum DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4Image {
    Variant0 {
        dockerfile:
            DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4ImageVariant0Dockerfile,
        #[doc = "Name of the image for the resulting outerloop build"]
        #[serde(
            rename = "imageName",
            default,
            skip_serializing_if = "::std::option::Option::is_none"
        )]
        image_name: ::std::option::Option<::std::string::String>,
    },
    Variant1 {
        #[doc = "Defines if the image should be built during startup.\n\nDefault value is `false`"]
        #[serde(rename = "autoBuild")]
        auto_build: bool,
        #[doc = "Name of the image for the resulting outerloop build"]
        #[serde(
            rename = "imageName",
            default,
            skip_serializing_if = "::std::option::Option::is_none"
        )]
        image_name: ::std::option::Option<::std::string::String>,
    },
}
impl ::std::convert::From<&Self>
    for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4Image
{
    fn from(value: &DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4Image) -> Self {
        value.clone()
    }
}
#[doc = "Allows specifying dockerfile type build"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Allows specifying dockerfile type build\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"uri\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"devfileRegistry\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"git\""]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"args\": {"]
#[doc = "      \"description\": \"The arguments to supply to the dockerfile build.\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"buildContext\": {"]
#[doc = "      \"description\": \"Path of source directory to establish build context. Defaults to ${PROJECT_SOURCE} in the container\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"devfileRegistry\": {"]
#[doc = "      \"description\": \"Dockerfile's Devfile Registry source\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"id\": {"]
#[doc = "          \"description\": \"Id in a devfile registry that contains a Dockerfile. The src in the OCI registry required for the Dockerfile build will be downloaded for building the image.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"registryUrl\": {"]
#[doc = "          \"description\": \"Devfile Registry URL to pull the Dockerfile from when using the Devfile Registry as Dockerfile src. To ensure the Dockerfile gets resolved consistently in different environments, it is recommended to always specify the `devfileRegistryUrl` when `Id` is used.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"git\": {"]
#[doc = "      \"description\": \"Dockerfile's Git source\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"checkoutFrom\": {"]
#[doc = "          \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"properties\": {"]
#[doc = "            \"remote\": {"]
#[doc = "              \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"revision\": {"]
#[doc = "              \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"fileLocation\": {"]
#[doc = "          \"description\": \"Location of the Dockerfile in the Git repository when using git as Dockerfile src. Defaults to Dockerfile.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"remotes\": {"]
#[doc = "          \"description\": \"The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"additionalProperties\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"rootRequired\": {"]
#[doc = "      \"description\": \"Specify if a privileged builder pod is required.\\n\\nDefault value is `false`\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"uri\": {"]
#[doc = "      \"description\": \"URI Reference of a Dockerfile. It can be a full URL or a relative URI from the current devfile as the base URI.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged, deny_unknown_fields)]
pub enum DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4ImageVariant0Dockerfile {
    Variant0 { # [doc = "The arguments to supply to the dockerfile build."] # [serde (default , skip_serializing_if = "::std::vec::Vec::is_empty")] args : :: std :: vec :: Vec < :: std :: string :: String > , # [doc = "Path of source directory to establish build context. Defaults to ${PROJECT_SOURCE} in the container"] # [serde (rename = "buildContext" , default , skip_serializing_if = "::std::option::Option::is_none")] build_context : :: std :: option :: Option < :: std :: string :: String > , # [doc = "Specify if a privileged builder pod is required.\n\nDefault value is `false`"] # [serde (rename = "rootRequired" , default , skip_serializing_if = "::std::option::Option::is_none")] root_required : :: std :: option :: Option < bool > , # [doc = "URI Reference of a Dockerfile. It can be a full URL or a relative URI from the current devfile as the base URI."] uri : :: std :: string :: String , } , Variant1 { # [doc = "The arguments to supply to the dockerfile build."] # [serde (default , skip_serializing_if = "::std::vec::Vec::is_empty")] args : :: std :: vec :: Vec < :: std :: string :: String > , # [doc = "Path of source directory to establish build context. Defaults to ${PROJECT_SOURCE} in the container"] # [serde (rename = "buildContext" , default , skip_serializing_if = "::std::option::Option::is_none")] build_context : :: std :: option :: Option < :: std :: string :: String > , # [serde (rename = "devfileRegistry")] devfile_registry : DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4ImageVariant0DockerfileVariant1DevfileRegistry , # [doc = "Specify if a privileged builder pod is required.\n\nDefault value is `false`"] # [serde (rename = "rootRequired" , default , skip_serializing_if = "::std::option::Option::is_none")] root_required : :: std :: option :: Option < bool > , } , Variant2 { # [doc = "The arguments to supply to the dockerfile build."] # [serde (default , skip_serializing_if = "::std::vec::Vec::is_empty")] args : :: std :: vec :: Vec < :: std :: string :: String > , # [doc = "Path of source directory to establish build context. Defaults to ${PROJECT_SOURCE} in the container"] # [serde (rename = "buildContext" , default , skip_serializing_if = "::std::option::Option::is_none")] build_context : :: std :: option :: Option < :: std :: string :: String > , git : DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4ImageVariant0DockerfileVariant2Git , # [doc = "Specify if a privileged builder pod is required.\n\nDefault value is `false`"] # [serde (rename = "rootRequired" , default , skip_serializing_if = "::std::option::Option::is_none")] root_required : :: std :: option :: Option < bool > , } , }
impl ::std::convert::From<&Self>
    for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4ImageVariant0Dockerfile
{
    fn from(
        value: &DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4ImageVariant0Dockerfile,
    ) -> Self {
        value.clone()
    }
}
#[doc = "Dockerfile's Devfile Registry source"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Dockerfile's Devfile Registry source\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"id\": {"]
#[doc = "      \"description\": \"Id in a devfile registry that contains a Dockerfile. The src in the OCI registry required for the Dockerfile build will be downloaded for building the image.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"registryUrl\": {"]
#[doc = "      \"description\": \"Devfile Registry URL to pull the Dockerfile from when using the Devfile Registry as Dockerfile src. To ensure the Dockerfile gets resolved consistently in different environments, it is recommended to always specify the `devfileRegistryUrl` when `Id` is used.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4ImageVariant0DockerfileVariant1DevfileRegistry
{
    #[doc = "Id in a devfile registry that contains a Dockerfile. The src in the OCI registry required for the Dockerfile build will be downloaded for building the image."]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub id: ::std::option::Option<::std::string::String>,
    #[doc = "Devfile Registry URL to pull the Dockerfile from when using the Devfile Registry as Dockerfile src. To ensure the Dockerfile gets resolved consistently in different environments, it is recommended to always specify the `devfileRegistryUrl` when `Id` is used."]
    #[serde(
        rename = "registryUrl",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub registry_url: ::std::option::Option<::std::string::String>,
}
impl :: std :: convert :: From < & DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4ImageVariant0DockerfileVariant1DevfileRegistry > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4ImageVariant0DockerfileVariant1DevfileRegistry { fn from (value : & DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4ImageVariant0DockerfileVariant1DevfileRegistry) -> Self { value . clone () } }
impl DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4ImageVariant0DockerfileVariant1DevfileRegistry { pub fn builder () -> builder :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4ImageVariant0DockerfileVariant1DevfileRegistry { Default :: default () } }
#[doc = "Dockerfile's Git source"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Dockerfile's Git source\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"checkoutFrom\": {"]
#[doc = "      \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"remote\": {"]
#[doc = "          \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"revision\": {"]
#[doc = "          \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"fileLocation\": {"]
#[doc = "      \"description\": \"Location of the Dockerfile in the Git repository when using git as Dockerfile src. Defaults to Dockerfile.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"remotes\": {"]
#[doc = "      \"description\": \"The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4ImageVariant0DockerfileVariant2Git { # [serde (rename = "checkoutFrom" , default , skip_serializing_if = "::std::option::Option::is_none")] pub checkout_from : :: std :: option :: Option < DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4ImageVariant0DockerfileVariant2GitCheckoutFrom > , # [doc = "Location of the Dockerfile in the Git repository when using git as Dockerfile src. Defaults to Dockerfile."] # [serde (rename = "fileLocation" , default , skip_serializing_if = "::std::option::Option::is_none")] pub file_location : :: std :: option :: Option < :: std :: string :: String > , # [doc = "The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured."] # [serde (default , skip_serializing_if = ":: std :: collections :: HashMap::is_empty")] pub remotes : :: std :: collections :: HashMap < :: std :: string :: String , :: std :: string :: String > , }
impl :: std :: convert :: From < & DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4ImageVariant0DockerfileVariant2Git > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4ImageVariant0DockerfileVariant2Git { fn from (value : & DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4ImageVariant0DockerfileVariant2Git) -> Self { value . clone () } }
impl DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4ImageVariant0DockerfileVariant2Git {
    pub fn builder () -> builder :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4ImageVariant0DockerfileVariant2Git{
        Default::default()
    }
}
#[doc = "Defines from what the project should be checked out. Required if there are more than one remote configured"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"remote\": {"]
#[doc = "      \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"revision\": {"]
#[doc = "      \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4ImageVariant0DockerfileVariant2GitCheckoutFrom
{
    #[doc = "The remote name should be used as init. Required if there are more than one remote configured"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub remote: ::std::option::Option<::std::string::String>,
    #[doc = "The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found."]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub revision: ::std::option::Option<::std::string::String>,
}
impl :: std :: convert :: From < & DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4ImageVariant0DockerfileVariant2GitCheckoutFrom > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4ImageVariant0DockerfileVariant2GitCheckoutFrom { fn from (value : & DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4ImageVariant0DockerfileVariant2GitCheckoutFrom) -> Self { value . clone () } }
impl DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4ImageVariant0DockerfileVariant2GitCheckoutFrom { pub fn builder () -> builder :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4ImageVariant0DockerfileVariant2GitCheckoutFrom { Default :: default () } }
#[doc = "Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin.\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4Name(::std::string::String);
impl ::std::ops::Deref for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4Name {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4Name>
    for ::std::string::String
{
    fn from(value: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4Name) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4Name>
    for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4Name
{
    fn from(value: &DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4Name) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4Name {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4Name
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de>
    for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4Name
{
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "`DevfileSchemaVersion222ParentVariant2DependentProjectsItem`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"git\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"zip\""]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  ],"]
#[doc = "  \"required\": ["]
#[doc = "    \"name\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"attributes\": {"]
#[doc = "      \"description\": \"Map of implementation-dependant free-form YAML attributes.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": true"]
#[doc = "    },"]
#[doc = "    \"clonePath\": {"]
#[doc = "      \"description\": \"Path relative to the root of the projects to which this project should be cloned into. This is a unix-style relative path (i.e. uses forward slashes). The path is invalid if it is absolute or tries to escape the project root through the usage of '..'. If not specified, defaults to the project name.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git\": {"]
#[doc = "      \"description\": \"Project's Git source\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"checkoutFrom\": {"]
#[doc = "          \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"properties\": {"]
#[doc = "            \"remote\": {"]
#[doc = "              \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"revision\": {"]
#[doc = "              \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"remotes\": {"]
#[doc = "          \"description\": \"The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"additionalProperties\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"description\": \"Project name\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"maxLength\": 63,"]
#[doc = "      \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "    },"]
#[doc = "    \"zip\": {"]
#[doc = "      \"description\": \"Project's Zip source\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"location\": {"]
#[doc = "          \"description\": \"Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged, deny_unknown_fields)]
pub enum DevfileSchemaVersion222ParentVariant2DependentProjectsItem {
    Variant0 {
        #[doc = "Map of implementation-dependant free-form YAML attributes."]
        #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
        attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
        #[doc = "Path relative to the root of the projects to which this project should be cloned into. This is a unix-style relative path (i.e. uses forward slashes). The path is invalid if it is absolute or tries to escape the project root through the usage of '..'. If not specified, defaults to the project name."]
        #[serde(
            rename = "clonePath",
            default,
            skip_serializing_if = "::std::option::Option::is_none"
        )]
        clone_path: ::std::option::Option<::std::string::String>,
        git: DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant0Git,
        #[doc = "Project name"]
        name: DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant0Name,
    },
    Variant1 {
        #[doc = "Map of implementation-dependant free-form YAML attributes."]
        #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
        attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
        #[doc = "Path relative to the root of the projects to which this project should be cloned into. This is a unix-style relative path (i.e. uses forward slashes). The path is invalid if it is absolute or tries to escape the project root through the usage of '..'. If not specified, defaults to the project name."]
        #[serde(
            rename = "clonePath",
            default,
            skip_serializing_if = "::std::option::Option::is_none"
        )]
        clone_path: ::std::option::Option<::std::string::String>,
        #[doc = "Project name"]
        name: DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant1Name,
        zip: DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant1Zip,
    },
}
impl ::std::convert::From<&Self> for DevfileSchemaVersion222ParentVariant2DependentProjectsItem {
    fn from(value: &DevfileSchemaVersion222ParentVariant2DependentProjectsItem) -> Self {
        value.clone()
    }
}
#[doc = "Project's Git source"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Project's Git source\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"checkoutFrom\": {"]
#[doc = "      \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"remote\": {"]
#[doc = "          \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"revision\": {"]
#[doc = "          \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"remotes\": {"]
#[doc = "      \"description\": \"The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant0Git {
    #[serde(
        rename = "checkoutFrom",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub checkout_from: ::std::option::Option<
        DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant0GitCheckoutFrom,
    >,
    #[doc = "The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured."]
    #[serde(
        default,
        skip_serializing_if = ":: std :: collections :: HashMap::is_empty"
    )]
    pub remotes: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant0Git>
    for DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant0Git
{
    fn from(value: &DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant0Git) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant0Git {
    pub fn builder(
    ) -> builder::DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant0Git {
        Default::default()
    }
}
#[doc = "Defines from what the project should be checked out. Required if there are more than one remote configured"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"remote\": {"]
#[doc = "      \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"revision\": {"]
#[doc = "      \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant0GitCheckoutFrom {
    #[doc = "The remote name should be used as init. Required if there are more than one remote configured"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub remote: ::std::option::Option<::std::string::String>,
    #[doc = "The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found."]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub revision: ::std::option::Option<::std::string::String>,
}
impl
    ::std::convert::From<
        &DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant0GitCheckoutFrom,
    > for DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant0GitCheckoutFrom
{
    fn from(
        value: &DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant0GitCheckoutFrom,
    ) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant0GitCheckoutFrom {
    pub fn builder(
    ) -> builder::DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant0GitCheckoutFrom
    {
        Default::default()
    }
}
#[doc = "Project name"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Project name\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant0Name(
    ::std::string::String,
);
impl ::std::ops::Deref for DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant0Name {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant0Name>
    for ::std::string::String
{
    fn from(value: DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant0Name) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant0Name>
    for DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant0Name
{
    fn from(
        value: &DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant0Name,
    ) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr
    for DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant0Name
{
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant0Name
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant0Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant0Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de>
    for DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant0Name
{
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Project name"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Project name\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant1Name(
    ::std::string::String,
);
impl ::std::ops::Deref for DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant1Name {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant1Name>
    for ::std::string::String
{
    fn from(value: DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant1Name) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant1Name>
    for DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant1Name
{
    fn from(
        value: &DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant1Name,
    ) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr
    for DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant1Name
{
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant1Name
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant1Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant1Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de>
    for DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant1Name
{
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Project's Zip source"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Project's Zip source\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"location\": {"]
#[doc = "      \"description\": \"Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant1Zip {
    #[doc = "Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub location: ::std::option::Option<::std::string::String>,
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant1Zip>
    for DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant1Zip
{
    fn from(value: &DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant1Zip) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant1Zip {
    pub fn builder(
    ) -> builder::DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant1Zip {
        Default::default()
    }
}
#[doc = "Reference to a Kubernetes CRD of type DevWorkspaceTemplate"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Reference to a Kubernetes CRD of type DevWorkspaceTemplate\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"name\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"name\": {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"namespace\": {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
pub struct DevfileSchemaVersion222ParentVariant2Kubernetes {
    pub name: ::std::string::String,
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub namespace: ::std::option::Option<::std::string::String>,
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant2Kubernetes>
    for DevfileSchemaVersion222ParentVariant2Kubernetes
{
    fn from(value: &DevfileSchemaVersion222ParentVariant2Kubernetes) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant2Kubernetes {
    pub fn builder() -> builder::DevfileSchemaVersion222ParentVariant2Kubernetes {
        Default::default()
    }
}
#[doc = "`DevfileSchemaVersion222ParentVariant2ProjectsItem`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"git\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"zip\""]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  ],"]
#[doc = "  \"required\": ["]
#[doc = "    \"name\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"attributes\": {"]
#[doc = "      \"description\": \"Map of implementation-dependant free-form YAML attributes.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": true"]
#[doc = "    },"]
#[doc = "    \"clonePath\": {"]
#[doc = "      \"description\": \"Path relative to the root of the projects to which this project should be cloned into. This is a unix-style relative path (i.e. uses forward slashes). The path is invalid if it is absolute or tries to escape the project root through the usage of '..'. If not specified, defaults to the project name.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git\": {"]
#[doc = "      \"description\": \"Project's Git source\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"checkoutFrom\": {"]
#[doc = "          \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"properties\": {"]
#[doc = "            \"remote\": {"]
#[doc = "              \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"revision\": {"]
#[doc = "              \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"remotes\": {"]
#[doc = "          \"description\": \"The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"additionalProperties\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"description\": \"Project name\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"maxLength\": 63,"]
#[doc = "      \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "    },"]
#[doc = "    \"zip\": {"]
#[doc = "      \"description\": \"Project's Zip source\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"location\": {"]
#[doc = "          \"description\": \"Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged, deny_unknown_fields)]
pub enum DevfileSchemaVersion222ParentVariant2ProjectsItem {
    Variant0 {
        #[doc = "Map of implementation-dependant free-form YAML attributes."]
        #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
        attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
        #[doc = "Path relative to the root of the projects to which this project should be cloned into. This is a unix-style relative path (i.e. uses forward slashes). The path is invalid if it is absolute or tries to escape the project root through the usage of '..'. If not specified, defaults to the project name."]
        #[serde(
            rename = "clonePath",
            default,
            skip_serializing_if = "::std::option::Option::is_none"
        )]
        clone_path: ::std::option::Option<::std::string::String>,
        git: DevfileSchemaVersion222ParentVariant2ProjectsItemVariant0Git,
        #[doc = "Project name"]
        name: DevfileSchemaVersion222ParentVariant2ProjectsItemVariant0Name,
    },
    Variant1 {
        #[doc = "Map of implementation-dependant free-form YAML attributes."]
        #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
        attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
        #[doc = "Path relative to the root of the projects to which this project should be cloned into. This is a unix-style relative path (i.e. uses forward slashes). The path is invalid if it is absolute or tries to escape the project root through the usage of '..'. If not specified, defaults to the project name."]
        #[serde(
            rename = "clonePath",
            default,
            skip_serializing_if = "::std::option::Option::is_none"
        )]
        clone_path: ::std::option::Option<::std::string::String>,
        #[doc = "Project name"]
        name: DevfileSchemaVersion222ParentVariant2ProjectsItemVariant1Name,
        zip: DevfileSchemaVersion222ParentVariant2ProjectsItemVariant1Zip,
    },
}
impl ::std::convert::From<&Self> for DevfileSchemaVersion222ParentVariant2ProjectsItem {
    fn from(value: &DevfileSchemaVersion222ParentVariant2ProjectsItem) -> Self {
        value.clone()
    }
}
#[doc = "Project's Git source"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Project's Git source\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"checkoutFrom\": {"]
#[doc = "      \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"remote\": {"]
#[doc = "          \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"revision\": {"]
#[doc = "          \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"remotes\": {"]
#[doc = "      \"description\": \"The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant2ProjectsItemVariant0Git {
    #[serde(
        rename = "checkoutFrom",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub checkout_from: ::std::option::Option<
        DevfileSchemaVersion222ParentVariant2ProjectsItemVariant0GitCheckoutFrom,
    >,
    #[doc = "The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured."]
    #[serde(
        default,
        skip_serializing_if = ":: std :: collections :: HashMap::is_empty"
    )]
    pub remotes: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant2ProjectsItemVariant0Git>
    for DevfileSchemaVersion222ParentVariant2ProjectsItemVariant0Git
{
    fn from(value: &DevfileSchemaVersion222ParentVariant2ProjectsItemVariant0Git) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant2ProjectsItemVariant0Git {
    pub fn builder() -> builder::DevfileSchemaVersion222ParentVariant2ProjectsItemVariant0Git {
        Default::default()
    }
}
#[doc = "Defines from what the project should be checked out. Required if there are more than one remote configured"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"remote\": {"]
#[doc = "      \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"revision\": {"]
#[doc = "      \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant2ProjectsItemVariant0GitCheckoutFrom {
    #[doc = "The remote name should be used as init. Required if there are more than one remote configured"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub remote: ::std::option::Option<::std::string::String>,
    #[doc = "The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found."]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub revision: ::std::option::Option<::std::string::String>,
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant2ProjectsItemVariant0GitCheckoutFrom>
    for DevfileSchemaVersion222ParentVariant2ProjectsItemVariant0GitCheckoutFrom
{
    fn from(
        value: &DevfileSchemaVersion222ParentVariant2ProjectsItemVariant0GitCheckoutFrom,
    ) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant2ProjectsItemVariant0GitCheckoutFrom {
    pub fn builder(
    ) -> builder::DevfileSchemaVersion222ParentVariant2ProjectsItemVariant0GitCheckoutFrom {
        Default::default()
    }
}
#[doc = "Project name"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Project name\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant2ProjectsItemVariant0Name(::std::string::String);
impl ::std::ops::Deref for DevfileSchemaVersion222ParentVariant2ProjectsItemVariant0Name {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222ParentVariant2ProjectsItemVariant0Name>
    for ::std::string::String
{
    fn from(value: DevfileSchemaVersion222ParentVariant2ProjectsItemVariant0Name) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant2ProjectsItemVariant0Name>
    for DevfileSchemaVersion222ParentVariant2ProjectsItemVariant0Name
{
    fn from(value: &DevfileSchemaVersion222ParentVariant2ProjectsItemVariant0Name) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for DevfileSchemaVersion222ParentVariant2ProjectsItemVariant0Name {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ParentVariant2ProjectsItemVariant0Name
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant2ProjectsItemVariant0Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant2ProjectsItemVariant0Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de>
    for DevfileSchemaVersion222ParentVariant2ProjectsItemVariant0Name
{
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Project name"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Project name\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant2ProjectsItemVariant1Name(::std::string::String);
impl ::std::ops::Deref for DevfileSchemaVersion222ParentVariant2ProjectsItemVariant1Name {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222ParentVariant2ProjectsItemVariant1Name>
    for ::std::string::String
{
    fn from(value: DevfileSchemaVersion222ParentVariant2ProjectsItemVariant1Name) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant2ProjectsItemVariant1Name>
    for DevfileSchemaVersion222ParentVariant2ProjectsItemVariant1Name
{
    fn from(value: &DevfileSchemaVersion222ParentVariant2ProjectsItemVariant1Name) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for DevfileSchemaVersion222ParentVariant2ProjectsItemVariant1Name {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ParentVariant2ProjectsItemVariant1Name
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant2ProjectsItemVariant1Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant2ProjectsItemVariant1Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de>
    for DevfileSchemaVersion222ParentVariant2ProjectsItemVariant1Name
{
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Project's Zip source"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Project's Zip source\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"location\": {"]
#[doc = "      \"description\": \"Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant2ProjectsItemVariant1Zip {
    #[doc = "Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub location: ::std::option::Option<::std::string::String>,
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant2ProjectsItemVariant1Zip>
    for DevfileSchemaVersion222ParentVariant2ProjectsItemVariant1Zip
{
    fn from(value: &DevfileSchemaVersion222ParentVariant2ProjectsItemVariant1Zip) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant2ProjectsItemVariant1Zip {
    pub fn builder() -> builder::DevfileSchemaVersion222ParentVariant2ProjectsItemVariant1Zip {
        Default::default()
    }
}
#[doc = "`DevfileSchemaVersion222ParentVariant2StarterProjectsItem`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"git\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"zip\""]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  ],"]
#[doc = "  \"required\": ["]
#[doc = "    \"name\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"attributes\": {"]
#[doc = "      \"description\": \"Map of implementation-dependant free-form YAML attributes.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": true"]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"description\": \"Description of a starter project\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git\": {"]
#[doc = "      \"description\": \"Project's Git source\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"checkoutFrom\": {"]
#[doc = "          \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"properties\": {"]
#[doc = "            \"remote\": {"]
#[doc = "              \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"revision\": {"]
#[doc = "              \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"remotes\": {"]
#[doc = "          \"description\": \"The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"additionalProperties\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"description\": \"Project name\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"maxLength\": 63,"]
#[doc = "      \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "    },"]
#[doc = "    \"subDir\": {"]
#[doc = "      \"description\": \"Sub-directory from a starter project to be used as root for starter project.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"zip\": {"]
#[doc = "      \"description\": \"Project's Zip source\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"location\": {"]
#[doc = "          \"description\": \"Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged, deny_unknown_fields)]
pub enum DevfileSchemaVersion222ParentVariant2StarterProjectsItem {
    Variant0 {
        #[doc = "Map of implementation-dependant free-form YAML attributes."]
        #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
        attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
        #[doc = "Description of a starter project"]
        #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
        description: ::std::option::Option<::std::string::String>,
        git: DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant0Git,
        #[doc = "Project name"]
        name: DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant0Name,
        #[doc = "Sub-directory from a starter project to be used as root for starter project."]
        #[serde(
            rename = "subDir",
            default,
            skip_serializing_if = "::std::option::Option::is_none"
        )]
        sub_dir: ::std::option::Option<::std::string::String>,
    },
    Variant1 {
        #[doc = "Map of implementation-dependant free-form YAML attributes."]
        #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
        attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
        #[doc = "Description of a starter project"]
        #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
        description: ::std::option::Option<::std::string::String>,
        #[doc = "Project name"]
        name: DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant1Name,
        #[doc = "Sub-directory from a starter project to be used as root for starter project."]
        #[serde(
            rename = "subDir",
            default,
            skip_serializing_if = "::std::option::Option::is_none"
        )]
        sub_dir: ::std::option::Option<::std::string::String>,
        zip: DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant1Zip,
    },
}
impl ::std::convert::From<&Self> for DevfileSchemaVersion222ParentVariant2StarterProjectsItem {
    fn from(value: &DevfileSchemaVersion222ParentVariant2StarterProjectsItem) -> Self {
        value.clone()
    }
}
#[doc = "Project's Git source"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Project's Git source\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"checkoutFrom\": {"]
#[doc = "      \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"remote\": {"]
#[doc = "          \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"revision\": {"]
#[doc = "          \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"remotes\": {"]
#[doc = "      \"description\": \"The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant0Git {
    #[serde(
        rename = "checkoutFrom",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub checkout_from: ::std::option::Option<
        DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant0GitCheckoutFrom,
    >,
    #[doc = "The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured."]
    #[serde(
        default,
        skip_serializing_if = ":: std :: collections :: HashMap::is_empty"
    )]
    pub remotes: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant0Git>
    for DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant0Git
{
    fn from(value: &DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant0Git) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant0Git {
    pub fn builder() -> builder::DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant0Git
    {
        Default::default()
    }
}
#[doc = "Defines from what the project should be checked out. Required if there are more than one remote configured"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"remote\": {"]
#[doc = "      \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"revision\": {"]
#[doc = "      \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant0GitCheckoutFrom {
    #[doc = "The remote name should be used as init. Required if there are more than one remote configured"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub remote: ::std::option::Option<::std::string::String>,
    #[doc = "The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found."]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub revision: ::std::option::Option<::std::string::String>,
}
impl
    ::std::convert::From<
        &DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant0GitCheckoutFrom,
    > for DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant0GitCheckoutFrom
{
    fn from(
        value: &DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant0GitCheckoutFrom,
    ) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant0GitCheckoutFrom {
    pub fn builder(
    ) -> builder::DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant0GitCheckoutFrom
    {
        Default::default()
    }
}
#[doc = "Project name"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Project name\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant0Name(
    ::std::string::String,
);
impl ::std::ops::Deref for DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant0Name {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant0Name>
    for ::std::string::String
{
    fn from(value: DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant0Name) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant0Name>
    for DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant0Name
{
    fn from(value: &DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant0Name) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant0Name {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant0Name
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant0Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant0Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de>
    for DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant0Name
{
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Project name"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Project name\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant1Name(
    ::std::string::String,
);
impl ::std::ops::Deref for DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant1Name {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant1Name>
    for ::std::string::String
{
    fn from(value: DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant1Name) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant1Name>
    for DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant1Name
{
    fn from(value: &DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant1Name) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant1Name {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str>
    for DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant1Name
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant1Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant1Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de>
    for DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant1Name
{
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Project's Zip source"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Project's Zip source\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"location\": {"]
#[doc = "      \"description\": \"Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant1Zip {
    #[doc = "Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub location: ::std::option::Option<::std::string::String>,
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant1Zip>
    for DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant1Zip
{
    fn from(value: &DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant1Zip) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant1Zip {
    pub fn builder() -> builder::DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant1Zip
    {
        Default::default()
    }
}
#[doc = "Specific stack/sample version to pull the parent devfile from, when using id in the parent reference. To specify `version`, `id` must be defined and used as the import reference source. `version` can be either a specific stack version, or `latest`. If no `version` specified, default version will be used."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Specific stack/sample version to pull the parent devfile from, when using id in the parent reference. To specify `version`, `id` must be defined and used as the import reference source. `version` can be either a specific stack version, or `latest`. If no `version` specified, default version will be used.\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"pattern\": \"^(latest)|(([1-9])\\\\.([0-9]+)\\\\.([0-9]+)(\\\\-[0-9a-z-]+(\\\\.[0-9a-z-]+)*)?(\\\\+[0-9A-Za-z-]+(\\\\.[0-9A-Za-z-]+)*)?)$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ParentVariant2Version(::std::string::String);
impl ::std::ops::Deref for DevfileSchemaVersion222ParentVariant2Version {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222ParentVariant2Version> for ::std::string::String {
    fn from(value: DevfileSchemaVersion222ParentVariant2Version) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222ParentVariant2Version>
    for DevfileSchemaVersion222ParentVariant2Version
{
    fn from(value: &DevfileSchemaVersion222ParentVariant2Version) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for DevfileSchemaVersion222ParentVariant2Version {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> = ::std::sync::LazyLock::new(
            || {
                :: regress :: Regex :: new ("^(latest)|(([1-9])\\.([0-9]+)\\.([0-9]+)(\\-[0-9a-z-]+(\\.[0-9a-z-]+)*)?(\\+[0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*)?)$") . unwrap ()
            },
        );
        if PATTERN.find(value).is_none() {
            return Err ("doesn't match pattern \"^(latest)|(([1-9])\\.([0-9]+)\\.([0-9]+)(\\-[0-9a-z-]+(\\.[0-9a-z-]+)*)?(\\+[0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*)?)$\"" . into ()) ;
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str> for DevfileSchemaVersion222ParentVariant2Version {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ParentVariant2Version
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ParentVariant2Version
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de> for DevfileSchemaVersion222ParentVariant2Version {
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "`DevfileSchemaVersion222ProjectsItem`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"git\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"zip\""]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  ],"]
#[doc = "  \"required\": ["]
#[doc = "    \"name\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"attributes\": {"]
#[doc = "      \"description\": \"Map of implementation-dependant free-form YAML attributes.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": true"]
#[doc = "    },"]
#[doc = "    \"clonePath\": {"]
#[doc = "      \"description\": \"Path relative to the root of the projects to which this project should be cloned into. This is a unix-style relative path (i.e. uses forward slashes). The path is invalid if it is absolute or tries to escape the project root through the usage of '..'. If not specified, defaults to the project name.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git\": {"]
#[doc = "      \"description\": \"Project's Git source\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"remotes\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"checkoutFrom\": {"]
#[doc = "          \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"properties\": {"]
#[doc = "            \"remote\": {"]
#[doc = "              \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"revision\": {"]
#[doc = "              \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"remotes\": {"]
#[doc = "          \"description\": \"The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"additionalProperties\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"description\": \"Project name\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"maxLength\": 63,"]
#[doc = "      \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "    },"]
#[doc = "    \"zip\": {"]
#[doc = "      \"description\": \"Project's Zip source\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"location\": {"]
#[doc = "          \"description\": \"Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged, deny_unknown_fields)]
pub enum DevfileSchemaVersion222ProjectsItem {
    Variant0 {
        #[doc = "Map of implementation-dependant free-form YAML attributes."]
        #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
        attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
        #[doc = "Path relative to the root of the projects to which this project should be cloned into. This is a unix-style relative path (i.e. uses forward slashes). The path is invalid if it is absolute or tries to escape the project root through the usage of '..'. If not specified, defaults to the project name."]
        #[serde(
            rename = "clonePath",
            default,
            skip_serializing_if = "::std::option::Option::is_none"
        )]
        clone_path: ::std::option::Option<::std::string::String>,
        git: DevfileSchemaVersion222ProjectsItemVariant0Git,
        #[doc = "Project name"]
        name: DevfileSchemaVersion222ProjectsItemVariant0Name,
    },
    Variant1 {
        #[doc = "Map of implementation-dependant free-form YAML attributes."]
        #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
        attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
        #[doc = "Path relative to the root of the projects to which this project should be cloned into. This is a unix-style relative path (i.e. uses forward slashes). The path is invalid if it is absolute or tries to escape the project root through the usage of '..'. If not specified, defaults to the project name."]
        #[serde(
            rename = "clonePath",
            default,
            skip_serializing_if = "::std::option::Option::is_none"
        )]
        clone_path: ::std::option::Option<::std::string::String>,
        #[doc = "Project name"]
        name: DevfileSchemaVersion222ProjectsItemVariant1Name,
        zip: DevfileSchemaVersion222ProjectsItemVariant1Zip,
    },
}
impl ::std::convert::From<&Self> for DevfileSchemaVersion222ProjectsItem {
    fn from(value: &DevfileSchemaVersion222ProjectsItem) -> Self {
        value.clone()
    }
}
#[doc = "Project's Git source"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Project's Git source\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"remotes\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"checkoutFrom\": {"]
#[doc = "      \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"remote\": {"]
#[doc = "          \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"revision\": {"]
#[doc = "          \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"remotes\": {"]
#[doc = "      \"description\": \"The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
pub struct DevfileSchemaVersion222ProjectsItemVariant0Git {
    #[serde(
        rename = "checkoutFrom",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub checkout_from:
        ::std::option::Option<DevfileSchemaVersion222ProjectsItemVariant0GitCheckoutFrom>,
    #[doc = "The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured."]
    pub remotes: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
}
impl ::std::convert::From<&DevfileSchemaVersion222ProjectsItemVariant0Git>
    for DevfileSchemaVersion222ProjectsItemVariant0Git
{
    fn from(value: &DevfileSchemaVersion222ProjectsItemVariant0Git) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ProjectsItemVariant0Git {
    pub fn builder() -> builder::DevfileSchemaVersion222ProjectsItemVariant0Git {
        Default::default()
    }
}
#[doc = "Defines from what the project should be checked out. Required if there are more than one remote configured"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"remote\": {"]
#[doc = "      \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"revision\": {"]
#[doc = "      \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ProjectsItemVariant0GitCheckoutFrom {
    #[doc = "The remote name should be used as init. Required if there are more than one remote configured"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub remote: ::std::option::Option<::std::string::String>,
    #[doc = "The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found."]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub revision: ::std::option::Option<::std::string::String>,
}
impl ::std::convert::From<&DevfileSchemaVersion222ProjectsItemVariant0GitCheckoutFrom>
    for DevfileSchemaVersion222ProjectsItemVariant0GitCheckoutFrom
{
    fn from(value: &DevfileSchemaVersion222ProjectsItemVariant0GitCheckoutFrom) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ProjectsItemVariant0GitCheckoutFrom {
    pub fn builder() -> builder::DevfileSchemaVersion222ProjectsItemVariant0GitCheckoutFrom {
        Default::default()
    }
}
#[doc = "Project name"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Project name\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ProjectsItemVariant0Name(::std::string::String);
impl ::std::ops::Deref for DevfileSchemaVersion222ProjectsItemVariant0Name {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222ProjectsItemVariant0Name>
    for ::std::string::String
{
    fn from(value: DevfileSchemaVersion222ProjectsItemVariant0Name) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222ProjectsItemVariant0Name>
    for DevfileSchemaVersion222ProjectsItemVariant0Name
{
    fn from(value: &DevfileSchemaVersion222ProjectsItemVariant0Name) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for DevfileSchemaVersion222ProjectsItemVariant0Name {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str> for DevfileSchemaVersion222ProjectsItemVariant0Name {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ProjectsItemVariant0Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ProjectsItemVariant0Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de> for DevfileSchemaVersion222ProjectsItemVariant0Name {
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Project name"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Project name\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222ProjectsItemVariant1Name(::std::string::String);
impl ::std::ops::Deref for DevfileSchemaVersion222ProjectsItemVariant1Name {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222ProjectsItemVariant1Name>
    for ::std::string::String
{
    fn from(value: DevfileSchemaVersion222ProjectsItemVariant1Name) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222ProjectsItemVariant1Name>
    for DevfileSchemaVersion222ProjectsItemVariant1Name
{
    fn from(value: &DevfileSchemaVersion222ProjectsItemVariant1Name) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for DevfileSchemaVersion222ProjectsItemVariant1Name {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str> for DevfileSchemaVersion222ProjectsItemVariant1Name {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222ProjectsItemVariant1Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222ProjectsItemVariant1Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de> for DevfileSchemaVersion222ProjectsItemVariant1Name {
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Project's Zip source"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Project's Zip source\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"location\": {"]
#[doc = "      \"description\": \"Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222ProjectsItemVariant1Zip {
    #[doc = "Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub location: ::std::option::Option<::std::string::String>,
}
impl ::std::convert::From<&DevfileSchemaVersion222ProjectsItemVariant1Zip>
    for DevfileSchemaVersion222ProjectsItemVariant1Zip
{
    fn from(value: &DevfileSchemaVersion222ProjectsItemVariant1Zip) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222ProjectsItemVariant1Zip {
    pub fn builder() -> builder::DevfileSchemaVersion222ProjectsItemVariant1Zip {
        Default::default()
    }
}
#[doc = "Devfile schema version"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Devfile schema version\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"pattern\": \"^([2-9])\\\\.([0-9]+)\\\\.([0-9]+)(\\\\-[0-9a-z-]+(\\\\.[0-9a-z-]+)*)?(\\\\+[0-9A-Za-z-]+(\\\\.[0-9A-Za-z-]+)*)?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222SchemaVersion(::std::string::String);
impl ::std::ops::Deref for DevfileSchemaVersion222SchemaVersion {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222SchemaVersion> for ::std::string::String {
    fn from(value: DevfileSchemaVersion222SchemaVersion) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222SchemaVersion>
    for DevfileSchemaVersion222SchemaVersion
{
    fn from(value: &DevfileSchemaVersion222SchemaVersion) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for DevfileSchemaVersion222SchemaVersion {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> = ::std::sync::LazyLock::new(
            || {
                :: regress :: Regex :: new ("^([2-9])\\.([0-9]+)\\.([0-9]+)(\\-[0-9a-z-]+(\\.[0-9a-z-]+)*)?(\\+[0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*)?$") . unwrap ()
            },
        );
        if PATTERN.find(value).is_none() {
            return Err ("doesn't match pattern \"^([2-9])\\.([0-9]+)\\.([0-9]+)(\\-[0-9a-z-]+(\\.[0-9a-z-]+)*)?(\\+[0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*)?$\"" . into ()) ;
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str> for DevfileSchemaVersion222SchemaVersion {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String> for DevfileSchemaVersion222SchemaVersion {
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String> for DevfileSchemaVersion222SchemaVersion {
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de> for DevfileSchemaVersion222SchemaVersion {
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "`DevfileSchemaVersion222StarterProjectsItem`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"git\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"required\": ["]
#[doc = "        \"zip\""]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  ],"]
#[doc = "  \"required\": ["]
#[doc = "    \"name\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"attributes\": {"]
#[doc = "      \"description\": \"Map of implementation-dependant free-form YAML attributes.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": true"]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"description\": \"Description of a starter project\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git\": {"]
#[doc = "      \"description\": \"Project's Git source\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"remotes\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"checkoutFrom\": {"]
#[doc = "          \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"properties\": {"]
#[doc = "            \"remote\": {"]
#[doc = "              \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"revision\": {"]
#[doc = "              \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"remotes\": {"]
#[doc = "          \"description\": \"The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"additionalProperties\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"description\": \"Project name\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"maxLength\": 63,"]
#[doc = "      \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "    },"]
#[doc = "    \"subDir\": {"]
#[doc = "      \"description\": \"Sub-directory from a starter project to be used as root for starter project.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"zip\": {"]
#[doc = "      \"description\": \"Project's Zip source\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"location\": {"]
#[doc = "          \"description\": \"Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged, deny_unknown_fields)]
pub enum DevfileSchemaVersion222StarterProjectsItem {
    Variant0 {
        #[doc = "Map of implementation-dependant free-form YAML attributes."]
        #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
        attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
        #[doc = "Description of a starter project"]
        #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
        description: ::std::option::Option<::std::string::String>,
        git: DevfileSchemaVersion222StarterProjectsItemVariant0Git,
        #[doc = "Project name"]
        name: DevfileSchemaVersion222StarterProjectsItemVariant0Name,
        #[doc = "Sub-directory from a starter project to be used as root for starter project."]
        #[serde(
            rename = "subDir",
            default,
            skip_serializing_if = "::std::option::Option::is_none"
        )]
        sub_dir: ::std::option::Option<::std::string::String>,
    },
    Variant1 {
        #[doc = "Map of implementation-dependant free-form YAML attributes."]
        #[serde(default, skip_serializing_if = "::serde_json::Map::is_empty")]
        attributes: ::serde_json::Map<::std::string::String, ::serde_json::Value>,
        #[doc = "Description of a starter project"]
        #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
        description: ::std::option::Option<::std::string::String>,
        #[doc = "Project name"]
        name: DevfileSchemaVersion222StarterProjectsItemVariant1Name,
        #[doc = "Sub-directory from a starter project to be used as root for starter project."]
        #[serde(
            rename = "subDir",
            default,
            skip_serializing_if = "::std::option::Option::is_none"
        )]
        sub_dir: ::std::option::Option<::std::string::String>,
        zip: DevfileSchemaVersion222StarterProjectsItemVariant1Zip,
    },
}
impl ::std::convert::From<&Self> for DevfileSchemaVersion222StarterProjectsItem {
    fn from(value: &DevfileSchemaVersion222StarterProjectsItem) -> Self {
        value.clone()
    }
}
#[doc = "Project's Git source"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Project's Git source\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"remotes\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"checkoutFrom\": {"]
#[doc = "      \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"remote\": {"]
#[doc = "          \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"revision\": {"]
#[doc = "          \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"remotes\": {"]
#[doc = "      \"description\": \"The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"additionalProperties\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
pub struct DevfileSchemaVersion222StarterProjectsItemVariant0Git {
    #[serde(
        rename = "checkoutFrom",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub checkout_from:
        ::std::option::Option<DevfileSchemaVersion222StarterProjectsItemVariant0GitCheckoutFrom>,
    #[doc = "The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured."]
    pub remotes: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
}
impl ::std::convert::From<&DevfileSchemaVersion222StarterProjectsItemVariant0Git>
    for DevfileSchemaVersion222StarterProjectsItemVariant0Git
{
    fn from(value: &DevfileSchemaVersion222StarterProjectsItemVariant0Git) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222StarterProjectsItemVariant0Git {
    pub fn builder() -> builder::DevfileSchemaVersion222StarterProjectsItemVariant0Git {
        Default::default()
    }
}
#[doc = "Defines from what the project should be checked out. Required if there are more than one remote configured"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Defines from what the project should be checked out. Required if there are more than one remote configured\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"remote\": {"]
#[doc = "      \"description\": \"The remote name should be used as init. Required if there are more than one remote configured\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"revision\": {"]
#[doc = "      \"description\": \"The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222StarterProjectsItemVariant0GitCheckoutFrom {
    #[doc = "The remote name should be used as init. Required if there are more than one remote configured"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub remote: ::std::option::Option<::std::string::String>,
    #[doc = "The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found."]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub revision: ::std::option::Option<::std::string::String>,
}
impl ::std::convert::From<&DevfileSchemaVersion222StarterProjectsItemVariant0GitCheckoutFrom>
    for DevfileSchemaVersion222StarterProjectsItemVariant0GitCheckoutFrom
{
    fn from(value: &DevfileSchemaVersion222StarterProjectsItemVariant0GitCheckoutFrom) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222StarterProjectsItemVariant0GitCheckoutFrom {
    pub fn builder() -> builder::DevfileSchemaVersion222StarterProjectsItemVariant0GitCheckoutFrom {
        Default::default()
    }
}
#[doc = "Project name"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Project name\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222StarterProjectsItemVariant0Name(::std::string::String);
impl ::std::ops::Deref for DevfileSchemaVersion222StarterProjectsItemVariant0Name {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222StarterProjectsItemVariant0Name>
    for ::std::string::String
{
    fn from(value: DevfileSchemaVersion222StarterProjectsItemVariant0Name) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222StarterProjectsItemVariant0Name>
    for DevfileSchemaVersion222StarterProjectsItemVariant0Name
{
    fn from(value: &DevfileSchemaVersion222StarterProjectsItemVariant0Name) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for DevfileSchemaVersion222StarterProjectsItemVariant0Name {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str> for DevfileSchemaVersion222StarterProjectsItemVariant0Name {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222StarterProjectsItemVariant0Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222StarterProjectsItemVariant0Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de> for DevfileSchemaVersion222StarterProjectsItemVariant0Name {
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Project name"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Project name\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"maxLength\": 63,"]
#[doc = "  \"pattern\": \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct DevfileSchemaVersion222StarterProjectsItemVariant1Name(::std::string::String);
impl ::std::ops::Deref for DevfileSchemaVersion222StarterProjectsItemVariant1Name {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<DevfileSchemaVersion222StarterProjectsItemVariant1Name>
    for ::std::string::String
{
    fn from(value: DevfileSchemaVersion222StarterProjectsItemVariant1Name) -> Self {
        value.0
    }
}
impl ::std::convert::From<&DevfileSchemaVersion222StarterProjectsItemVariant1Name>
    for DevfileSchemaVersion222StarterProjectsItemVariant1Name
{
    fn from(value: &DevfileSchemaVersion222StarterProjectsItemVariant1Name) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for DevfileSchemaVersion222StarterProjectsItemVariant1Name {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        if value.chars().count() > 63usize {
            return Err("longer than 63 characters".into());
        }
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| {
                ::regress::Regex::new("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$").unwrap()
            });
        if PATTERN.find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str> for DevfileSchemaVersion222StarterProjectsItemVariant1Name {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String>
    for DevfileSchemaVersion222StarterProjectsItemVariant1Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String>
    for DevfileSchemaVersion222StarterProjectsItemVariant1Name
{
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de> for DevfileSchemaVersion222StarterProjectsItemVariant1Name {
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "Project's Zip source"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"Project's Zip source\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"location\": {"]
#[doc = "      \"description\": \"Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
#[derive(Default)]
pub struct DevfileSchemaVersion222StarterProjectsItemVariant1Zip {
    #[doc = "Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH"]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub location: ::std::option::Option<::std::string::String>,
}
impl ::std::convert::From<&DevfileSchemaVersion222StarterProjectsItemVariant1Zip>
    for DevfileSchemaVersion222StarterProjectsItemVariant1Zip
{
    fn from(value: &DevfileSchemaVersion222StarterProjectsItemVariant1Zip) -> Self {
        value.clone()
    }
}
impl DevfileSchemaVersion222StarterProjectsItemVariant1Zip {
    pub fn builder() -> builder::DevfileSchemaVersion222StarterProjectsItemVariant1Zip {
        Default::default()
    }
}
#[doc = r" Types for composing complex structures."]
pub mod builder {
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222 {
        attributes: ::std::result::Result<
            ::serde_json::Map<::std::string::String, ::serde_json::Value>,
            ::std::string::String,
        >,
        commands: ::std::result::Result<
            ::std::vec::Vec<super::DevfileSchemaVersion222CommandsItem>,
            ::std::string::String,
        >,
        components: ::std::result::Result<
            ::std::vec::Vec<super::DevfileSchemaVersion222ComponentsItem>,
            ::std::string::String,
        >,
        dependent_projects: ::std::result::Result<
            ::std::vec::Vec<super::DevfileSchemaVersion222DependentProjectsItem>,
            ::std::string::String,
        >,
        events: ::std::result::Result<
            ::std::option::Option<super::DevfileSchemaVersion222Events>,
            ::std::string::String,
        >,
        metadata: ::std::result::Result<
            ::std::option::Option<super::DevfileSchemaVersion222Metadata>,
            ::std::string::String,
        >,
        parent: ::std::result::Result<
            ::std::option::Option<super::DevfileSchemaVersion222Parent>,
            ::std::string::String,
        >,
        projects: ::std::result::Result<
            ::std::vec::Vec<super::DevfileSchemaVersion222ProjectsItem>,
            ::std::string::String,
        >,
        schema_version: ::std::result::Result<
            super::DevfileSchemaVersion222SchemaVersion,
            ::std::string::String,
        >,
        starter_projects: ::std::result::Result<
            ::std::vec::Vec<super::DevfileSchemaVersion222StarterProjectsItem>,
            ::std::string::String,
        >,
        variables: ::std::result::Result<
            ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default for DevfileSchemaVersion222 {
        fn default() -> Self {
            Self {
                attributes: Ok(Default::default()),
                commands: Ok(Default::default()),
                components: Ok(Default::default()),
                dependent_projects: Ok(Default::default()),
                events: Ok(Default::default()),
                metadata: Ok(Default::default()),
                parent: Ok(Default::default()),
                projects: Ok(Default::default()),
                schema_version: Err("no value supplied for schema_version".to_string()),
                starter_projects: Ok(Default::default()),
                variables: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222 {
        pub fn attributes<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::serde_json::Map<::std::string::String, ::serde_json::Value>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.attributes = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for attributes: {}", e));
            self
        }
        pub fn commands<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::vec::Vec<super::DevfileSchemaVersion222CommandsItem>>,
            T::Error: ::std::fmt::Display,
        {
            self.commands = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for commands: {}", e));
            self
        }
        pub fn components<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::vec::Vec<super::DevfileSchemaVersion222ComponentsItem>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.components = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for components: {}", e));
            self
        }
        pub fn dependent_projects<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::vec::Vec<super::DevfileSchemaVersion222DependentProjectsItem>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.dependent_projects = value.try_into().map_err(|e| {
                format!(
                    "error converting supplied value for dependent_projects: {}",
                    e
                )
            });
            self
        }
        pub fn events<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<super::DevfileSchemaVersion222Events>>,
            T::Error: ::std::fmt::Display,
        {
            self.events = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for events: {}", e));
            self
        }
        pub fn metadata<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::option::Option<super::DevfileSchemaVersion222Metadata>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.metadata = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for metadata: {}", e));
            self
        }
        pub fn parent<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<super::DevfileSchemaVersion222Parent>>,
            T::Error: ::std::fmt::Display,
        {
            self.parent = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for parent: {}", e));
            self
        }
        pub fn projects<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::vec::Vec<super::DevfileSchemaVersion222ProjectsItem>>,
            T::Error: ::std::fmt::Display,
        {
            self.projects = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for projects: {}", e));
            self
        }
        pub fn schema_version<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<super::DevfileSchemaVersion222SchemaVersion>,
            T::Error: ::std::fmt::Display,
        {
            self.schema_version = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for schema_version: {}", e));
            self
        }
        pub fn starter_projects<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::vec::Vec<super::DevfileSchemaVersion222StarterProjectsItem>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.starter_projects = value.try_into().map_err(|e| {
                format!(
                    "error converting supplied value for starter_projects: {}",
                    e
                )
            });
            self
        }
        pub fn variables<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.variables = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for variables: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<DevfileSchemaVersion222> for super::DevfileSchemaVersion222 {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                attributes: value.attributes?,
                commands: value.commands?,
                components: value.components?,
                dependent_projects: value.dependent_projects?,
                events: value.events?,
                metadata: value.metadata?,
                parent: value.parent?,
                projects: value.projects?,
                schema_version: value.schema_version?,
                starter_projects: value.starter_projects?,
                variables: value.variables?,
            })
        }
    }
    impl ::std::convert::From<super::DevfileSchemaVersion222> for DevfileSchemaVersion222 {
        fn from(value: super::DevfileSchemaVersion222) -> Self {
            Self {
                attributes: Ok(value.attributes),
                commands: Ok(value.commands),
                components: Ok(value.components),
                dependent_projects: Ok(value.dependent_projects),
                events: Ok(value.events),
                metadata: Ok(value.metadata),
                parent: Ok(value.parent),
                projects: Ok(value.projects),
                schema_version: Ok(value.schema_version),
                starter_projects: Ok(value.starter_projects),
                variables: Ok(value.variables),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222CommandsItemVariant0Exec {
        command_line: ::std::result::Result<::std::string::String, ::std::string::String>,
        component: ::std::result::Result<::std::string::String, ::std::string::String>,
        env: ::std::result::Result<
            ::std::vec::Vec<super::DevfileSchemaVersion222CommandsItemVariant0ExecEnvItem>,
            ::std::string::String,
        >,
        group: ::std::result::Result<
            ::std::option::Option<super::DevfileSchemaVersion222CommandsItemVariant0ExecGroup>,
            ::std::string::String,
        >,
        hot_reload_capable:
            ::std::result::Result<::std::option::Option<bool>, ::std::string::String>,
        label: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
        working_dir: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default for DevfileSchemaVersion222CommandsItemVariant0Exec {
        fn default() -> Self {
            Self {
                command_line: Err("no value supplied for command_line".to_string()),
                component: Err("no value supplied for component".to_string()),
                env: Ok(Default::default()),
                group: Ok(Default::default()),
                hot_reload_capable: Ok(Default::default()),
                label: Ok(Default::default()),
                working_dir: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222CommandsItemVariant0Exec {
        pub fn command_line<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::string::String>,
            T::Error: ::std::fmt::Display,
        {
            self.command_line = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for command_line: {}", e));
            self
        }
        pub fn component<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::string::String>,
            T::Error: ::std::fmt::Display,
        {
            self.component = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for component: {}", e));
            self
        }
        pub fn env<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::vec::Vec<super::DevfileSchemaVersion222CommandsItemVariant0ExecEnvItem>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.env = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for env: {}", e));
            self
        }
        pub fn group<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::option::Option<super::DevfileSchemaVersion222CommandsItemVariant0ExecGroup>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.group = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for group: {}", e));
            self
        }
        pub fn hot_reload_capable<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<bool>>,
            T::Error: ::std::fmt::Display,
        {
            self.hot_reload_capable = value.try_into().map_err(|e| {
                format!(
                    "error converting supplied value for hot_reload_capable: {}",
                    e
                )
            });
            self
        }
        pub fn label<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.label = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for label: {}", e));
            self
        }
        pub fn working_dir<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.working_dir = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for working_dir: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<DevfileSchemaVersion222CommandsItemVariant0Exec>
        for super::DevfileSchemaVersion222CommandsItemVariant0Exec
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222CommandsItemVariant0Exec,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                command_line: value.command_line?,
                component: value.component?,
                env: value.env?,
                group: value.group?,
                hot_reload_capable: value.hot_reload_capable?,
                label: value.label?,
                working_dir: value.working_dir?,
            })
        }
    }
    impl ::std::convert::From<super::DevfileSchemaVersion222CommandsItemVariant0Exec>
        for DevfileSchemaVersion222CommandsItemVariant0Exec
    {
        fn from(value: super::DevfileSchemaVersion222CommandsItemVariant0Exec) -> Self {
            Self {
                command_line: Ok(value.command_line),
                component: Ok(value.component),
                env: Ok(value.env),
                group: Ok(value.group),
                hot_reload_capable: Ok(value.hot_reload_capable),
                label: Ok(value.label),
                working_dir: Ok(value.working_dir),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222CommandsItemVariant0ExecEnvItem {
        name: ::std::result::Result<::std::string::String, ::std::string::String>,
        value: ::std::result::Result<::std::string::String, ::std::string::String>,
    }
    impl ::std::default::Default for DevfileSchemaVersion222CommandsItemVariant0ExecEnvItem {
        fn default() -> Self {
            Self {
                name: Err("no value supplied for name".to_string()),
                value: Err("no value supplied for value".to_string()),
            }
        }
    }
    impl DevfileSchemaVersion222CommandsItemVariant0ExecEnvItem {
        pub fn name<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::string::String>,
            T::Error: ::std::fmt::Display,
        {
            self.name = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for name: {}", e));
            self
        }
        pub fn value<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::string::String>,
            T::Error: ::std::fmt::Display,
        {
            self.value = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for value: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<DevfileSchemaVersion222CommandsItemVariant0ExecEnvItem>
        for super::DevfileSchemaVersion222CommandsItemVariant0ExecEnvItem
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222CommandsItemVariant0ExecEnvItem,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                name: value.name?,
                value: value.value?,
            })
        }
    }
    impl ::std::convert::From<super::DevfileSchemaVersion222CommandsItemVariant0ExecEnvItem>
        for DevfileSchemaVersion222CommandsItemVariant0ExecEnvItem
    {
        fn from(value: super::DevfileSchemaVersion222CommandsItemVariant0ExecEnvItem) -> Self {
            Self {
                name: Ok(value.name),
                value: Ok(value.value),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222CommandsItemVariant0ExecGroup {
        is_default: ::std::result::Result<::std::option::Option<bool>, ::std::string::String>,
        kind: ::std::result::Result<
            super::DevfileSchemaVersion222CommandsItemVariant0ExecGroupKind,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default for DevfileSchemaVersion222CommandsItemVariant0ExecGroup {
        fn default() -> Self {
            Self {
                is_default: Ok(Default::default()),
                kind: Err("no value supplied for kind".to_string()),
            }
        }
    }
    impl DevfileSchemaVersion222CommandsItemVariant0ExecGroup {
        pub fn is_default<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<bool>>,
            T::Error: ::std::fmt::Display,
        {
            self.is_default = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for is_default: {}", e));
            self
        }
        pub fn kind<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                super::DevfileSchemaVersion222CommandsItemVariant0ExecGroupKind,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.kind = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for kind: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<DevfileSchemaVersion222CommandsItemVariant0ExecGroup>
        for super::DevfileSchemaVersion222CommandsItemVariant0ExecGroup
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222CommandsItemVariant0ExecGroup,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                is_default: value.is_default?,
                kind: value.kind?,
            })
        }
    }
    impl ::std::convert::From<super::DevfileSchemaVersion222CommandsItemVariant0ExecGroup>
        for DevfileSchemaVersion222CommandsItemVariant0ExecGroup
    {
        fn from(value: super::DevfileSchemaVersion222CommandsItemVariant0ExecGroup) -> Self {
            Self {
                is_default: Ok(value.is_default),
                kind: Ok(value.kind),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222CommandsItemVariant1Apply {
        component: ::std::result::Result<::std::string::String, ::std::string::String>,
        group: ::std::result::Result<
            ::std::option::Option<super::DevfileSchemaVersion222CommandsItemVariant1ApplyGroup>,
            ::std::string::String,
        >,
        label: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default for DevfileSchemaVersion222CommandsItemVariant1Apply {
        fn default() -> Self {
            Self {
                component: Err("no value supplied for component".to_string()),
                group: Ok(Default::default()),
                label: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222CommandsItemVariant1Apply {
        pub fn component<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::string::String>,
            T::Error: ::std::fmt::Display,
        {
            self.component = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for component: {}", e));
            self
        }
        pub fn group<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::option::Option<super::DevfileSchemaVersion222CommandsItemVariant1ApplyGroup>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.group = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for group: {}", e));
            self
        }
        pub fn label<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.label = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for label: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<DevfileSchemaVersion222CommandsItemVariant1Apply>
        for super::DevfileSchemaVersion222CommandsItemVariant1Apply
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222CommandsItemVariant1Apply,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                component: value.component?,
                group: value.group?,
                label: value.label?,
            })
        }
    }
    impl ::std::convert::From<super::DevfileSchemaVersion222CommandsItemVariant1Apply>
        for DevfileSchemaVersion222CommandsItemVariant1Apply
    {
        fn from(value: super::DevfileSchemaVersion222CommandsItemVariant1Apply) -> Self {
            Self {
                component: Ok(value.component),
                group: Ok(value.group),
                label: Ok(value.label),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222CommandsItemVariant1ApplyGroup {
        is_default: ::std::result::Result<::std::option::Option<bool>, ::std::string::String>,
        kind: ::std::result::Result<
            super::DevfileSchemaVersion222CommandsItemVariant1ApplyGroupKind,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default for DevfileSchemaVersion222CommandsItemVariant1ApplyGroup {
        fn default() -> Self {
            Self {
                is_default: Ok(Default::default()),
                kind: Err("no value supplied for kind".to_string()),
            }
        }
    }
    impl DevfileSchemaVersion222CommandsItemVariant1ApplyGroup {
        pub fn is_default<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<bool>>,
            T::Error: ::std::fmt::Display,
        {
            self.is_default = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for is_default: {}", e));
            self
        }
        pub fn kind<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                super::DevfileSchemaVersion222CommandsItemVariant1ApplyGroupKind,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.kind = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for kind: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<DevfileSchemaVersion222CommandsItemVariant1ApplyGroup>
        for super::DevfileSchemaVersion222CommandsItemVariant1ApplyGroup
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222CommandsItemVariant1ApplyGroup,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                is_default: value.is_default?,
                kind: value.kind?,
            })
        }
    }
    impl ::std::convert::From<super::DevfileSchemaVersion222CommandsItemVariant1ApplyGroup>
        for DevfileSchemaVersion222CommandsItemVariant1ApplyGroup
    {
        fn from(value: super::DevfileSchemaVersion222CommandsItemVariant1ApplyGroup) -> Self {
            Self {
                is_default: Ok(value.is_default),
                kind: Ok(value.kind),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222CommandsItemVariant2Composite {
        commands:
            ::std::result::Result<::std::vec::Vec<::std::string::String>, ::std::string::String>,
        group: ::std::result::Result<
            ::std::option::Option<super::DevfileSchemaVersion222CommandsItemVariant2CompositeGroup>,
            ::std::string::String,
        >,
        label: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
        parallel: ::std::result::Result<::std::option::Option<bool>, ::std::string::String>,
    }
    impl ::std::default::Default for DevfileSchemaVersion222CommandsItemVariant2Composite {
        fn default() -> Self {
            Self {
                commands: Ok(Default::default()),
                group: Ok(Default::default()),
                label: Ok(Default::default()),
                parallel: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222CommandsItemVariant2Composite {
        pub fn commands<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::vec::Vec<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.commands = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for commands: {}", e));
            self
        }
        pub fn group<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::option::Option<
                    super::DevfileSchemaVersion222CommandsItemVariant2CompositeGroup,
                >,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.group = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for group: {}", e));
            self
        }
        pub fn label<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.label = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for label: {}", e));
            self
        }
        pub fn parallel<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<bool>>,
            T::Error: ::std::fmt::Display,
        {
            self.parallel = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for parallel: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<DevfileSchemaVersion222CommandsItemVariant2Composite>
        for super::DevfileSchemaVersion222CommandsItemVariant2Composite
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222CommandsItemVariant2Composite,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                commands: value.commands?,
                group: value.group?,
                label: value.label?,
                parallel: value.parallel?,
            })
        }
    }
    impl ::std::convert::From<super::DevfileSchemaVersion222CommandsItemVariant2Composite>
        for DevfileSchemaVersion222CommandsItemVariant2Composite
    {
        fn from(value: super::DevfileSchemaVersion222CommandsItemVariant2Composite) -> Self {
            Self {
                commands: Ok(value.commands),
                group: Ok(value.group),
                label: Ok(value.label),
                parallel: Ok(value.parallel),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222CommandsItemVariant2CompositeGroup {
        is_default: ::std::result::Result<::std::option::Option<bool>, ::std::string::String>,
        kind: ::std::result::Result<
            super::DevfileSchemaVersion222CommandsItemVariant2CompositeGroupKind,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default for DevfileSchemaVersion222CommandsItemVariant2CompositeGroup {
        fn default() -> Self {
            Self {
                is_default: Ok(Default::default()),
                kind: Err("no value supplied for kind".to_string()),
            }
        }
    }
    impl DevfileSchemaVersion222CommandsItemVariant2CompositeGroup {
        pub fn is_default<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<bool>>,
            T::Error: ::std::fmt::Display,
        {
            self.is_default = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for is_default: {}", e));
            self
        }
        pub fn kind<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                super::DevfileSchemaVersion222CommandsItemVariant2CompositeGroupKind,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.kind = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for kind: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<DevfileSchemaVersion222CommandsItemVariant2CompositeGroup>
        for super::DevfileSchemaVersion222CommandsItemVariant2CompositeGroup
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222CommandsItemVariant2CompositeGroup,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                is_default: value.is_default?,
                kind: value.kind?,
            })
        }
    }
    impl ::std::convert::From<super::DevfileSchemaVersion222CommandsItemVariant2CompositeGroup>
        for DevfileSchemaVersion222CommandsItemVariant2CompositeGroup
    {
        fn from(value: super::DevfileSchemaVersion222CommandsItemVariant2CompositeGroup) -> Self {
            Self {
                is_default: Ok(value.is_default),
                kind: Ok(value.kind),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ComponentsItemVariant0Container {
        annotation: ::std::result::Result<
            ::std::option::Option<
                super::DevfileSchemaVersion222ComponentsItemVariant0ContainerAnnotation,
            >,
            ::std::string::String,
        >,
        args: ::std::result::Result<::std::vec::Vec<::std::string::String>, ::std::string::String>,
        command:
            ::std::result::Result<::std::vec::Vec<::std::string::String>, ::std::string::String>,
        cpu_limit: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
        cpu_request: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
        dedicated_pod: ::std::result::Result<::std::option::Option<bool>, ::std::string::String>,
        endpoints: ::std::result::Result<
            ::std::vec::Vec<
                super::DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItem,
            >,
            ::std::string::String,
        >,
        env: ::std::result::Result<
            ::std::vec::Vec<super::DevfileSchemaVersion222ComponentsItemVariant0ContainerEnvItem>,
            ::std::string::String,
        >,
        image: ::std::result::Result<::std::string::String, ::std::string::String>,
        memory_limit: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
        memory_request: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
        mount_sources: ::std::result::Result<::std::option::Option<bool>, ::std::string::String>,
        source_mapping: ::std::result::Result<::std::string::String, ::std::string::String>,
        volume_mounts: ::std::result::Result<
            ::std::vec::Vec<
                super::DevfileSchemaVersion222ComponentsItemVariant0ContainerVolumeMountsItem,
            >,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default for DevfileSchemaVersion222ComponentsItemVariant0Container {
        fn default() -> Self {
            Self { annotation : Ok (Default :: default ()) , args : Ok (Default :: default ()) , command : Ok (Default :: default ()) , cpu_limit : Ok (Default :: default ()) , cpu_request : Ok (Default :: default ()) , dedicated_pod : Ok (Default :: default ()) , endpoints : Ok (Default :: default ()) , env : Ok (Default :: default ()) , image : Err ("no value supplied for image" . to_string ()) , memory_limit : Ok (Default :: default ()) , memory_request : Ok (Default :: default ()) , mount_sources : Ok (Default :: default ()) , source_mapping : Ok (super :: defaults :: devfile_schema_version222_components_item_variant0_container_source_mapping ()) , volume_mounts : Ok (Default :: default ()) , }
        }
    }
    impl DevfileSchemaVersion222ComponentsItemVariant0Container {
        pub fn annotation<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::option::Option<
                    super::DevfileSchemaVersion222ComponentsItemVariant0ContainerAnnotation,
                >,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.annotation = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for annotation: {}", e));
            self
        }
        pub fn args<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::vec::Vec<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.args = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for args: {}", e));
            self
        }
        pub fn command<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::vec::Vec<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.command = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for command: {}", e));
            self
        }
        pub fn cpu_limit<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.cpu_limit = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for cpu_limit: {}", e));
            self
        }
        pub fn cpu_request<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.cpu_request = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for cpu_request: {}", e));
            self
        }
        pub fn dedicated_pod<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<bool>>,
            T::Error: ::std::fmt::Display,
        {
            self.dedicated_pod = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for dedicated_pod: {}", e));
            self
        }
        pub fn endpoints<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::vec::Vec<
                    super::DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItem,
                >,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.endpoints = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for endpoints: {}", e));
            self
        }
        pub fn env<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::vec::Vec<
                    super::DevfileSchemaVersion222ComponentsItemVariant0ContainerEnvItem,
                >,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.env = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for env: {}", e));
            self
        }
        pub fn image<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::string::String>,
            T::Error: ::std::fmt::Display,
        {
            self.image = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for image: {}", e));
            self
        }
        pub fn memory_limit<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.memory_limit = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for memory_limit: {}", e));
            self
        }
        pub fn memory_request<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.memory_request = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for memory_request: {}", e));
            self
        }
        pub fn mount_sources<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<bool>>,
            T::Error: ::std::fmt::Display,
        {
            self.mount_sources = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for mount_sources: {}", e));
            self
        }
        pub fn source_mapping<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::string::String>,
            T::Error: ::std::fmt::Display,
        {
            self.source_mapping = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for source_mapping: {}", e));
            self
        }
        pub fn volume_mounts<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::vec::Vec<
                    super::DevfileSchemaVersion222ComponentsItemVariant0ContainerVolumeMountsItem,
                >,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.volume_mounts = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for volume_mounts: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<DevfileSchemaVersion222ComponentsItemVariant0Container>
        for super::DevfileSchemaVersion222ComponentsItemVariant0Container
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ComponentsItemVariant0Container,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                annotation: value.annotation?,
                args: value.args?,
                command: value.command?,
                cpu_limit: value.cpu_limit?,
                cpu_request: value.cpu_request?,
                dedicated_pod: value.dedicated_pod?,
                endpoints: value.endpoints?,
                env: value.env?,
                image: value.image?,
                memory_limit: value.memory_limit?,
                memory_request: value.memory_request?,
                mount_sources: value.mount_sources?,
                source_mapping: value.source_mapping?,
                volume_mounts: value.volume_mounts?,
            })
        }
    }
    impl ::std::convert::From<super::DevfileSchemaVersion222ComponentsItemVariant0Container>
        for DevfileSchemaVersion222ComponentsItemVariant0Container
    {
        fn from(value: super::DevfileSchemaVersion222ComponentsItemVariant0Container) -> Self {
            Self {
                annotation: Ok(value.annotation),
                args: Ok(value.args),
                command: Ok(value.command),
                cpu_limit: Ok(value.cpu_limit),
                cpu_request: Ok(value.cpu_request),
                dedicated_pod: Ok(value.dedicated_pod),
                endpoints: Ok(value.endpoints),
                env: Ok(value.env),
                image: Ok(value.image),
                memory_limit: Ok(value.memory_limit),
                memory_request: Ok(value.memory_request),
                mount_sources: Ok(value.mount_sources),
                source_mapping: Ok(value.source_mapping),
                volume_mounts: Ok(value.volume_mounts),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ComponentsItemVariant0ContainerAnnotation {
        deployment: ::std::result::Result<
            ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            ::std::string::String,
        >,
        service: ::std::result::Result<
            ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default for DevfileSchemaVersion222ComponentsItemVariant0ContainerAnnotation {
        fn default() -> Self {
            Self {
                deployment: Ok(Default::default()),
                service: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ComponentsItemVariant0ContainerAnnotation {
        pub fn deployment<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.deployment = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for deployment: {}", e));
            self
        }
        pub fn service<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.service = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for service: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<DevfileSchemaVersion222ComponentsItemVariant0ContainerAnnotation>
        for super::DevfileSchemaVersion222ComponentsItemVariant0ContainerAnnotation
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ComponentsItemVariant0ContainerAnnotation,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                deployment: value.deployment?,
                service: value.service?,
            })
        }
    }
    impl
        ::std::convert::From<
            super::DevfileSchemaVersion222ComponentsItemVariant0ContainerAnnotation,
        > for DevfileSchemaVersion222ComponentsItemVariant0ContainerAnnotation
    {
        fn from(
            value: super::DevfileSchemaVersion222ComponentsItemVariant0ContainerAnnotation,
        ) -> Self {
            Self {
                deployment: Ok(value.deployment),
                service: Ok(value.service),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItem {
        annotation: ::std::result::Result<
            ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            ::std::string::String,
        >,
        attributes: ::std::result::Result<
            ::serde_json::Map<::std::string::String, ::serde_json::Value>,
            ::std::string::String,
        >,
        exposure: ::std::result::Result<
            super::DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItemExposure,
            ::std::string::String,
        >,
        name: ::std::result::Result<
            super::DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItemName,
            ::std::string::String,
        >,
        path: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
        protocol: ::std::result::Result<
            super::DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItemProtocol,
            ::std::string::String,
        >,
        secure: ::std::result::Result<::std::option::Option<bool>, ::std::string::String>,
        target_port: ::std::result::Result<i64, ::std::string::String>,
    }
    impl ::std::default::Default
        for DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItem
    {
        fn default() -> Self {
            Self { annotation : Ok (Default :: default ()) , attributes : Ok (Default :: default ()) , exposure : Ok (super :: defaults :: devfile_schema_version222_components_item_variant0_container_endpoints_item_exposure ()) , name : Err ("no value supplied for name" . to_string ()) , path : Ok (Default :: default ()) , protocol : Ok (super :: defaults :: devfile_schema_version222_components_item_variant0_container_endpoints_item_protocol ()) , secure : Ok (Default :: default ()) , target_port : Err ("no value supplied for target_port" . to_string ()) , }
        }
    }
    impl DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItem {
        pub fn annotation<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.annotation = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for annotation: {}", e));
            self
        }
        pub fn attributes<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::serde_json::Map<::std::string::String, ::serde_json::Value>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.attributes = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for attributes: {}", e));
            self
        }
        pub fn exposure<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                super::DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItemExposure,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.exposure = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for exposure: {}", e));
            self
        }
        pub fn name<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                super::DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItemName,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.name = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for name: {}", e));
            self
        }
        pub fn path<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.path = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for path: {}", e));
            self
        }
        pub fn protocol<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                super::DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItemProtocol,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.protocol = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for protocol: {}", e));
            self
        }
        pub fn secure<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<bool>>,
            T::Error: ::std::fmt::Display,
        {
            self.secure = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for secure: {}", e));
            self
        }
        pub fn target_port<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<i64>,
            T::Error: ::std::fmt::Display,
        {
            self.target_port = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for target_port: {}", e));
            self
        }
    }
    impl
        ::std::convert::TryFrom<DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItem>
        for super::DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItem
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItem,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                annotation: value.annotation?,
                attributes: value.attributes?,
                exposure: value.exposure?,
                name: value.name?,
                path: value.path?,
                protocol: value.protocol?,
                secure: value.secure?,
                target_port: value.target_port?,
            })
        }
    }
    impl
        ::std::convert::From<
            super::DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItem,
        > for DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItem
    {
        fn from(
            value: super::DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItem,
        ) -> Self {
            Self {
                annotation: Ok(value.annotation),
                attributes: Ok(value.attributes),
                exposure: Ok(value.exposure),
                name: Ok(value.name),
                path: Ok(value.path),
                protocol: Ok(value.protocol),
                secure: Ok(value.secure),
                target_port: Ok(value.target_port),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ComponentsItemVariant0ContainerEnvItem {
        name: ::std::result::Result<::std::string::String, ::std::string::String>,
        value: ::std::result::Result<::std::string::String, ::std::string::String>,
    }
    impl ::std::default::Default for DevfileSchemaVersion222ComponentsItemVariant0ContainerEnvItem {
        fn default() -> Self {
            Self {
                name: Err("no value supplied for name".to_string()),
                value: Err("no value supplied for value".to_string()),
            }
        }
    }
    impl DevfileSchemaVersion222ComponentsItemVariant0ContainerEnvItem {
        pub fn name<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::string::String>,
            T::Error: ::std::fmt::Display,
        {
            self.name = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for name: {}", e));
            self
        }
        pub fn value<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::string::String>,
            T::Error: ::std::fmt::Display,
        {
            self.value = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for value: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<DevfileSchemaVersion222ComponentsItemVariant0ContainerEnvItem>
        for super::DevfileSchemaVersion222ComponentsItemVariant0ContainerEnvItem
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ComponentsItemVariant0ContainerEnvItem,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                name: value.name?,
                value: value.value?,
            })
        }
    }
    impl ::std::convert::From<super::DevfileSchemaVersion222ComponentsItemVariant0ContainerEnvItem>
        for DevfileSchemaVersion222ComponentsItemVariant0ContainerEnvItem
    {
        fn from(
            value: super::DevfileSchemaVersion222ComponentsItemVariant0ContainerEnvItem,
        ) -> Self {
            Self {
                name: Ok(value.name),
                value: Ok(value.value),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ComponentsItemVariant0ContainerVolumeMountsItem {
        name: ::std::result::Result<
            super::DevfileSchemaVersion222ComponentsItemVariant0ContainerVolumeMountsItemName,
            ::std::string::String,
        >,
        path: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default
        for DevfileSchemaVersion222ComponentsItemVariant0ContainerVolumeMountsItem
    {
        fn default() -> Self {
            Self {
                name: Err("no value supplied for name".to_string()),
                path: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ComponentsItemVariant0ContainerVolumeMountsItem {
        pub fn name<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                super::DevfileSchemaVersion222ComponentsItemVariant0ContainerVolumeMountsItemName,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.name = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for name: {}", e));
            self
        }
        pub fn path<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.path = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for path: {}", e));
            self
        }
    }
    impl
        ::std::convert::TryFrom<
            DevfileSchemaVersion222ComponentsItemVariant0ContainerVolumeMountsItem,
        > for super::DevfileSchemaVersion222ComponentsItemVariant0ContainerVolumeMountsItem
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ComponentsItemVariant0ContainerVolumeMountsItem,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                name: value.name?,
                path: value.path?,
            })
        }
    }
    impl
        ::std::convert::From<
            super::DevfileSchemaVersion222ComponentsItemVariant0ContainerVolumeMountsItem,
        > for DevfileSchemaVersion222ComponentsItemVariant0ContainerVolumeMountsItem
    {
        fn from(
            value: super::DevfileSchemaVersion222ComponentsItemVariant0ContainerVolumeMountsItem,
        ) -> Self {
            Self {
                name: Ok(value.name),
                path: Ok(value.path),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant0EndpointsItem { annotation : :: std :: result :: Result < :: std :: collections :: HashMap < :: std :: string :: String , :: std :: string :: String > , :: std :: string :: String > , attributes : :: std :: result :: Result < :: serde_json :: Map < :: std :: string :: String , :: serde_json :: Value > , :: std :: string :: String > , exposure : :: std :: result :: Result < super :: DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant0EndpointsItemExposure , :: std :: string :: String > , name : :: std :: result :: Result < super :: DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant0EndpointsItemName , :: std :: string :: String > , path : :: std :: result :: Result < :: std :: option :: Option < :: std :: string :: String > , :: std :: string :: String > , protocol : :: std :: result :: Result < super :: DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant0EndpointsItemProtocol , :: std :: string :: String > , secure : :: std :: result :: Result < :: std :: option :: Option < bool > , :: std :: string :: String > , target_port : :: std :: result :: Result < i64 , :: std :: string :: String > , }
    impl ::std::default::Default
        for DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant0EndpointsItem
    {
        fn default() -> Self {
            Self { annotation : Ok (Default :: default ()) , attributes : Ok (Default :: default ()) , exposure : Ok (super :: defaults :: devfile_schema_version222_components_item_variant1_kubernetes_variant0_endpoints_item_exposure ()) , name : Err ("no value supplied for name" . to_string ()) , path : Ok (Default :: default ()) , protocol : Ok (super :: defaults :: devfile_schema_version222_components_item_variant1_kubernetes_variant0_endpoints_item_protocol ()) , secure : Ok (Default :: default ()) , target_port : Err ("no value supplied for target_port" . to_string ()) , }
        }
    }
    impl DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant0EndpointsItem {
        pub fn annotation<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.annotation = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for annotation: {}", e));
            self
        }
        pub fn attributes<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::serde_json::Map<::std::string::String, ::serde_json::Value>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.attributes = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for attributes: {}", e));
            self
        }        pub fn exposure < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < super :: DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant0EndpointsItemExposure > , T :: Error : :: std :: fmt :: Display ,{
            self.exposure = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for exposure: {}", e));
            self
        }        pub fn name < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < super :: DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant0EndpointsItemName > , T :: Error : :: std :: fmt :: Display ,{
            self.name = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for name: {}", e));
            self
        }
        pub fn path<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.path = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for path: {}", e));
            self
        }        pub fn protocol < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < super :: DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant0EndpointsItemProtocol > , T :: Error : :: std :: fmt :: Display ,{
            self.protocol = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for protocol: {}", e));
            self
        }
        pub fn secure<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<bool>>,
            T::Error: ::std::fmt::Display,
        {
            self.secure = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for secure: {}", e));
            self
        }
        pub fn target_port<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<i64>,
            T::Error: ::std::fmt::Display,
        {
            self.target_port = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for target_port: {}", e));
            self
        }
    }
    impl
        ::std::convert::TryFrom<
            DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant0EndpointsItem,
        > for super::DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant0EndpointsItem
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant0EndpointsItem,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                annotation: value.annotation?,
                attributes: value.attributes?,
                exposure: value.exposure?,
                name: value.name?,
                path: value.path?,
                protocol: value.protocol?,
                secure: value.secure?,
                target_port: value.target_port?,
            })
        }
    }
    impl
        ::std::convert::From<
            super::DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant0EndpointsItem,
        > for DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant0EndpointsItem
    {
        fn from(
            value : super :: DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant0EndpointsItem,
        ) -> Self {
            Self {
                annotation: Ok(value.annotation),
                attributes: Ok(value.attributes),
                exposure: Ok(value.exposure),
                name: Ok(value.name),
                path: Ok(value.path),
                protocol: Ok(value.protocol),
                secure: Ok(value.secure),
                target_port: Ok(value.target_port),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant1EndpointsItem { annotation : :: std :: result :: Result < :: std :: collections :: HashMap < :: std :: string :: String , :: std :: string :: String > , :: std :: string :: String > , attributes : :: std :: result :: Result < :: serde_json :: Map < :: std :: string :: String , :: serde_json :: Value > , :: std :: string :: String > , exposure : :: std :: result :: Result < super :: DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant1EndpointsItemExposure , :: std :: string :: String > , name : :: std :: result :: Result < super :: DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant1EndpointsItemName , :: std :: string :: String > , path : :: std :: result :: Result < :: std :: option :: Option < :: std :: string :: String > , :: std :: string :: String > , protocol : :: std :: result :: Result < super :: DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant1EndpointsItemProtocol , :: std :: string :: String > , secure : :: std :: result :: Result < :: std :: option :: Option < bool > , :: std :: string :: String > , target_port : :: std :: result :: Result < i64 , :: std :: string :: String > , }
    impl ::std::default::Default
        for DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant1EndpointsItem
    {
        fn default() -> Self {
            Self { annotation : Ok (Default :: default ()) , attributes : Ok (Default :: default ()) , exposure : Ok (super :: defaults :: devfile_schema_version222_components_item_variant1_kubernetes_variant1_endpoints_item_exposure ()) , name : Err ("no value supplied for name" . to_string ()) , path : Ok (Default :: default ()) , protocol : Ok (super :: defaults :: devfile_schema_version222_components_item_variant1_kubernetes_variant1_endpoints_item_protocol ()) , secure : Ok (Default :: default ()) , target_port : Err ("no value supplied for target_port" . to_string ()) , }
        }
    }
    impl DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant1EndpointsItem {
        pub fn annotation<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.annotation = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for annotation: {}", e));
            self
        }
        pub fn attributes<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::serde_json::Map<::std::string::String, ::serde_json::Value>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.attributes = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for attributes: {}", e));
            self
        }        pub fn exposure < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < super :: DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant1EndpointsItemExposure > , T :: Error : :: std :: fmt :: Display ,{
            self.exposure = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for exposure: {}", e));
            self
        }        pub fn name < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < super :: DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant1EndpointsItemName > , T :: Error : :: std :: fmt :: Display ,{
            self.name = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for name: {}", e));
            self
        }
        pub fn path<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.path = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for path: {}", e));
            self
        }        pub fn protocol < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < super :: DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant1EndpointsItemProtocol > , T :: Error : :: std :: fmt :: Display ,{
            self.protocol = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for protocol: {}", e));
            self
        }
        pub fn secure<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<bool>>,
            T::Error: ::std::fmt::Display,
        {
            self.secure = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for secure: {}", e));
            self
        }
        pub fn target_port<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<i64>,
            T::Error: ::std::fmt::Display,
        {
            self.target_port = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for target_port: {}", e));
            self
        }
    }
    impl
        ::std::convert::TryFrom<
            DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant1EndpointsItem,
        > for super::DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant1EndpointsItem
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant1EndpointsItem,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                annotation: value.annotation?,
                attributes: value.attributes?,
                exposure: value.exposure?,
                name: value.name?,
                path: value.path?,
                protocol: value.protocol?,
                secure: value.secure?,
                target_port: value.target_port?,
            })
        }
    }
    impl
        ::std::convert::From<
            super::DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant1EndpointsItem,
        > for DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant1EndpointsItem
    {
        fn from(
            value : super :: DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant1EndpointsItem,
        ) -> Self {
            Self {
                annotation: Ok(value.annotation),
                attributes: Ok(value.attributes),
                exposure: Ok(value.exposure),
                name: Ok(value.name),
                path: Ok(value.path),
                protocol: Ok(value.protocol),
                secure: Ok(value.secure),
                target_port: Ok(value.target_port),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant0EndpointsItem { annotation : :: std :: result :: Result < :: std :: collections :: HashMap < :: std :: string :: String , :: std :: string :: String > , :: std :: string :: String > , attributes : :: std :: result :: Result < :: serde_json :: Map < :: std :: string :: String , :: serde_json :: Value > , :: std :: string :: String > , exposure : :: std :: result :: Result < super :: DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant0EndpointsItemExposure , :: std :: string :: String > , name : :: std :: result :: Result < super :: DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant0EndpointsItemName , :: std :: string :: String > , path : :: std :: result :: Result < :: std :: option :: Option < :: std :: string :: String > , :: std :: string :: String > , protocol : :: std :: result :: Result < super :: DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant0EndpointsItemProtocol , :: std :: string :: String > , secure : :: std :: result :: Result < :: std :: option :: Option < bool > , :: std :: string :: String > , target_port : :: std :: result :: Result < i64 , :: std :: string :: String > , }
    impl ::std::default::Default
        for DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant0EndpointsItem
    {
        fn default() -> Self {
            Self { annotation : Ok (Default :: default ()) , attributes : Ok (Default :: default ()) , exposure : Ok (super :: defaults :: devfile_schema_version222_components_item_variant2_openshift_variant0_endpoints_item_exposure ()) , name : Err ("no value supplied for name" . to_string ()) , path : Ok (Default :: default ()) , protocol : Ok (super :: defaults :: devfile_schema_version222_components_item_variant2_openshift_variant0_endpoints_item_protocol ()) , secure : Ok (Default :: default ()) , target_port : Err ("no value supplied for target_port" . to_string ()) , }
        }
    }
    impl DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant0EndpointsItem {
        pub fn annotation<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.annotation = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for annotation: {}", e));
            self
        }
        pub fn attributes<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::serde_json::Map<::std::string::String, ::serde_json::Value>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.attributes = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for attributes: {}", e));
            self
        }        pub fn exposure < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < super :: DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant0EndpointsItemExposure > , T :: Error : :: std :: fmt :: Display ,{
            self.exposure = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for exposure: {}", e));
            self
        }        pub fn name < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < super :: DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant0EndpointsItemName > , T :: Error : :: std :: fmt :: Display ,{
            self.name = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for name: {}", e));
            self
        }
        pub fn path<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.path = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for path: {}", e));
            self
        }        pub fn protocol < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < super :: DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant0EndpointsItemProtocol > , T :: Error : :: std :: fmt :: Display ,{
            self.protocol = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for protocol: {}", e));
            self
        }
        pub fn secure<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<bool>>,
            T::Error: ::std::fmt::Display,
        {
            self.secure = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for secure: {}", e));
            self
        }
        pub fn target_port<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<i64>,
            T::Error: ::std::fmt::Display,
        {
            self.target_port = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for target_port: {}", e));
            self
        }
    }
    impl
        ::std::convert::TryFrom<
            DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant0EndpointsItem,
        > for super::DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant0EndpointsItem
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant0EndpointsItem,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                annotation: value.annotation?,
                attributes: value.attributes?,
                exposure: value.exposure?,
                name: value.name?,
                path: value.path?,
                protocol: value.protocol?,
                secure: value.secure?,
                target_port: value.target_port?,
            })
        }
    }
    impl
        ::std::convert::From<
            super::DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant0EndpointsItem,
        > for DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant0EndpointsItem
    {
        fn from(
            value : super :: DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant0EndpointsItem,
        ) -> Self {
            Self {
                annotation: Ok(value.annotation),
                attributes: Ok(value.attributes),
                exposure: Ok(value.exposure),
                name: Ok(value.name),
                path: Ok(value.path),
                protocol: Ok(value.protocol),
                secure: Ok(value.secure),
                target_port: Ok(value.target_port),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant1EndpointsItem { annotation : :: std :: result :: Result < :: std :: collections :: HashMap < :: std :: string :: String , :: std :: string :: String > , :: std :: string :: String > , attributes : :: std :: result :: Result < :: serde_json :: Map < :: std :: string :: String , :: serde_json :: Value > , :: std :: string :: String > , exposure : :: std :: result :: Result < super :: DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant1EndpointsItemExposure , :: std :: string :: String > , name : :: std :: result :: Result < super :: DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant1EndpointsItemName , :: std :: string :: String > , path : :: std :: result :: Result < :: std :: option :: Option < :: std :: string :: String > , :: std :: string :: String > , protocol : :: std :: result :: Result < super :: DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant1EndpointsItemProtocol , :: std :: string :: String > , secure : :: std :: result :: Result < :: std :: option :: Option < bool > , :: std :: string :: String > , target_port : :: std :: result :: Result < i64 , :: std :: string :: String > , }
    impl ::std::default::Default
        for DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant1EndpointsItem
    {
        fn default() -> Self {
            Self { annotation : Ok (Default :: default ()) , attributes : Ok (Default :: default ()) , exposure : Ok (super :: defaults :: devfile_schema_version222_components_item_variant2_openshift_variant1_endpoints_item_exposure ()) , name : Err ("no value supplied for name" . to_string ()) , path : Ok (Default :: default ()) , protocol : Ok (super :: defaults :: devfile_schema_version222_components_item_variant2_openshift_variant1_endpoints_item_protocol ()) , secure : Ok (Default :: default ()) , target_port : Err ("no value supplied for target_port" . to_string ()) , }
        }
    }
    impl DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant1EndpointsItem {
        pub fn annotation<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.annotation = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for annotation: {}", e));
            self
        }
        pub fn attributes<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::serde_json::Map<::std::string::String, ::serde_json::Value>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.attributes = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for attributes: {}", e));
            self
        }        pub fn exposure < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < super :: DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant1EndpointsItemExposure > , T :: Error : :: std :: fmt :: Display ,{
            self.exposure = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for exposure: {}", e));
            self
        }        pub fn name < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < super :: DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant1EndpointsItemName > , T :: Error : :: std :: fmt :: Display ,{
            self.name = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for name: {}", e));
            self
        }
        pub fn path<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.path = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for path: {}", e));
            self
        }        pub fn protocol < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < super :: DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant1EndpointsItemProtocol > , T :: Error : :: std :: fmt :: Display ,{
            self.protocol = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for protocol: {}", e));
            self
        }
        pub fn secure<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<bool>>,
            T::Error: ::std::fmt::Display,
        {
            self.secure = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for secure: {}", e));
            self
        }
        pub fn target_port<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<i64>,
            T::Error: ::std::fmt::Display,
        {
            self.target_port = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for target_port: {}", e));
            self
        }
    }
    impl
        ::std::convert::TryFrom<
            DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant1EndpointsItem,
        > for super::DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant1EndpointsItem
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant1EndpointsItem,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                annotation: value.annotation?,
                attributes: value.attributes?,
                exposure: value.exposure?,
                name: value.name?,
                path: value.path?,
                protocol: value.protocol?,
                secure: value.secure?,
                target_port: value.target_port?,
            })
        }
    }
    impl
        ::std::convert::From<
            super::DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant1EndpointsItem,
        > for DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant1EndpointsItem
    {
        fn from(
            value : super :: DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant1EndpointsItem,
        ) -> Self {
            Self {
                annotation: Ok(value.annotation),
                attributes: Ok(value.attributes),
                exposure: Ok(value.exposure),
                name: Ok(value.name),
                path: Ok(value.path),
                protocol: Ok(value.protocol),
                secure: Ok(value.secure),
                target_port: Ok(value.target_port),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ComponentsItemVariant3Volume {
        ephemeral: ::std::result::Result<::std::option::Option<bool>, ::std::string::String>,
        size: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default for DevfileSchemaVersion222ComponentsItemVariant3Volume {
        fn default() -> Self {
            Self {
                ephemeral: Ok(Default::default()),
                size: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ComponentsItemVariant3Volume {
        pub fn ephemeral<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<bool>>,
            T::Error: ::std::fmt::Display,
        {
            self.ephemeral = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for ephemeral: {}", e));
            self
        }
        pub fn size<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.size = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for size: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<DevfileSchemaVersion222ComponentsItemVariant3Volume>
        for super::DevfileSchemaVersion222ComponentsItemVariant3Volume
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ComponentsItemVariant3Volume,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                ephemeral: value.ephemeral?,
                size: value.size?,
            })
        }
    }
    impl ::std::convert::From<super::DevfileSchemaVersion222ComponentsItemVariant3Volume>
        for DevfileSchemaVersion222ComponentsItemVariant3Volume
    {
        fn from(value: super::DevfileSchemaVersion222ComponentsItemVariant3Volume) -> Self {
            Self {
                ephemeral: Ok(value.ephemeral),
                size: Ok(value.size),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ComponentsItemVariant4Image {
        auto_build: ::std::result::Result<::std::option::Option<bool>, ::std::string::String>,
        dockerfile: ::std::result::Result<
            super::DevfileSchemaVersion222ComponentsItemVariant4ImageDockerfile,
            ::std::string::String,
        >,
        image_name: ::std::result::Result<::std::string::String, ::std::string::String>,
    }
    impl ::std::default::Default for DevfileSchemaVersion222ComponentsItemVariant4Image {
        fn default() -> Self {
            Self {
                auto_build: Ok(Default::default()),
                dockerfile: Err("no value supplied for dockerfile".to_string()),
                image_name: Err("no value supplied for image_name".to_string()),
            }
        }
    }
    impl DevfileSchemaVersion222ComponentsItemVariant4Image {
        pub fn auto_build<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<bool>>,
            T::Error: ::std::fmt::Display,
        {
            self.auto_build = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for auto_build: {}", e));
            self
        }
        pub fn dockerfile<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                super::DevfileSchemaVersion222ComponentsItemVariant4ImageDockerfile,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.dockerfile = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for dockerfile: {}", e));
            self
        }
        pub fn image_name<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::string::String>,
            T::Error: ::std::fmt::Display,
        {
            self.image_name = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for image_name: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<DevfileSchemaVersion222ComponentsItemVariant4Image>
        for super::DevfileSchemaVersion222ComponentsItemVariant4Image
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ComponentsItemVariant4Image,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                auto_build: value.auto_build?,
                dockerfile: value.dockerfile?,
                image_name: value.image_name?,
            })
        }
    }
    impl ::std::convert::From<super::DevfileSchemaVersion222ComponentsItemVariant4Image>
        for DevfileSchemaVersion222ComponentsItemVariant4Image
    {
        fn from(value: super::DevfileSchemaVersion222ComponentsItemVariant4Image) -> Self {
            Self {
                auto_build: Ok(value.auto_build),
                dockerfile: Ok(value.dockerfile),
                image_name: Ok(value.image_name),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ComponentsItemVariant4ImageDockerfileVariant1DevfileRegistry {
        id: ::std::result::Result<::std::string::String, ::std::string::String>,
        registry_url: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default
        for DevfileSchemaVersion222ComponentsItemVariant4ImageDockerfileVariant1DevfileRegistry
    {
        fn default() -> Self {
            Self {
                id: Err("no value supplied for id".to_string()),
                registry_url: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ComponentsItemVariant4ImageDockerfileVariant1DevfileRegistry {
        pub fn id<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::string::String>,
            T::Error: ::std::fmt::Display,
        {
            self.id = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for id: {}", e));
            self
        }
        pub fn registry_url<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.registry_url = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for registry_url: {}", e));
            self
        }
    }
    impl :: std :: convert :: TryFrom < DevfileSchemaVersion222ComponentsItemVariant4ImageDockerfileVariant1DevfileRegistry > for super :: DevfileSchemaVersion222ComponentsItemVariant4ImageDockerfileVariant1DevfileRegistry { type Error = super :: error :: ConversionError ; fn try_from (value : DevfileSchemaVersion222ComponentsItemVariant4ImageDockerfileVariant1DevfileRegistry) -> :: std :: result :: Result < Self , super :: error :: ConversionError > { Ok (Self { id : value . id ? , registry_url : value . registry_url ? , }) } }
    impl :: std :: convert :: From < super :: DevfileSchemaVersion222ComponentsItemVariant4ImageDockerfileVariant1DevfileRegistry > for DevfileSchemaVersion222ComponentsItemVariant4ImageDockerfileVariant1DevfileRegistry { fn from (value : super :: DevfileSchemaVersion222ComponentsItemVariant4ImageDockerfileVariant1DevfileRegistry) -> Self { Self { id : Ok (value . id) , registry_url : Ok (value . registry_url) , } } }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ComponentsItemVariant4ImageDockerfileVariant2Git { checkout_from : :: std :: result :: Result < :: std :: option :: Option < super :: DevfileSchemaVersion222ComponentsItemVariant4ImageDockerfileVariant2GitCheckoutFrom > , :: std :: string :: String > , file_location : :: std :: result :: Result < :: std :: option :: Option < :: std :: string :: String > , :: std :: string :: String > , remotes : :: std :: result :: Result < :: std :: collections :: HashMap < :: std :: string :: String , :: std :: string :: String > , :: std :: string :: String > , }
    impl ::std::default::Default
        for DevfileSchemaVersion222ComponentsItemVariant4ImageDockerfileVariant2Git
    {
        fn default() -> Self {
            Self {
                checkout_from: Ok(Default::default()),
                file_location: Ok(Default::default()),
                remotes: Err("no value supplied for remotes".to_string()),
            }
        }
    }
    impl DevfileSchemaVersion222ComponentsItemVariant4ImageDockerfileVariant2Git {
        pub fn checkout_from < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: option :: Option < super :: DevfileSchemaVersion222ComponentsItemVariant4ImageDockerfileVariant2GitCheckoutFrom > > , T :: Error : :: std :: fmt :: Display ,{
            self.checkout_from = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for checkout_from: {}", e));
            self
        }
        pub fn file_location<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.file_location = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for file_location: {}", e));
            self
        }
        pub fn remotes<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.remotes = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for remotes: {}", e));
            self
        }
    }
    impl
        ::std::convert::TryFrom<
            DevfileSchemaVersion222ComponentsItemVariant4ImageDockerfileVariant2Git,
        > for super::DevfileSchemaVersion222ComponentsItemVariant4ImageDockerfileVariant2Git
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ComponentsItemVariant4ImageDockerfileVariant2Git,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                checkout_from: value.checkout_from?,
                file_location: value.file_location?,
                remotes: value.remotes?,
            })
        }
    }
    impl
        ::std::convert::From<
            super::DevfileSchemaVersion222ComponentsItemVariant4ImageDockerfileVariant2Git,
        > for DevfileSchemaVersion222ComponentsItemVariant4ImageDockerfileVariant2Git
    {
        fn from(
            value: super::DevfileSchemaVersion222ComponentsItemVariant4ImageDockerfileVariant2Git,
        ) -> Self {
            Self {
                checkout_from: Ok(value.checkout_from),
                file_location: Ok(value.file_location),
                remotes: Ok(value.remotes),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ComponentsItemVariant4ImageDockerfileVariant2GitCheckoutFrom {
        remote: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
        revision: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default
        for DevfileSchemaVersion222ComponentsItemVariant4ImageDockerfileVariant2GitCheckoutFrom
    {
        fn default() -> Self {
            Self {
                remote: Ok(Default::default()),
                revision: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ComponentsItemVariant4ImageDockerfileVariant2GitCheckoutFrom {
        pub fn remote<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.remote = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for remote: {}", e));
            self
        }
        pub fn revision<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.revision = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for revision: {}", e));
            self
        }
    }
    impl :: std :: convert :: TryFrom < DevfileSchemaVersion222ComponentsItemVariant4ImageDockerfileVariant2GitCheckoutFrom > for super :: DevfileSchemaVersion222ComponentsItemVariant4ImageDockerfileVariant2GitCheckoutFrom { type Error = super :: error :: ConversionError ; fn try_from (value : DevfileSchemaVersion222ComponentsItemVariant4ImageDockerfileVariant2GitCheckoutFrom) -> :: std :: result :: Result < Self , super :: error :: ConversionError > { Ok (Self { remote : value . remote ? , revision : value . revision ? , }) } }
    impl :: std :: convert :: From < super :: DevfileSchemaVersion222ComponentsItemVariant4ImageDockerfileVariant2GitCheckoutFrom > for DevfileSchemaVersion222ComponentsItemVariant4ImageDockerfileVariant2GitCheckoutFrom { fn from (value : super :: DevfileSchemaVersion222ComponentsItemVariant4ImageDockerfileVariant2GitCheckoutFrom) -> Self { Self { remote : Ok (value . remote) , revision : Ok (value . revision) , } } }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222DependentProjectsItemVariant0Git {
        checkout_from: ::std::result::Result<
            ::std::option::Option<
                super::DevfileSchemaVersion222DependentProjectsItemVariant0GitCheckoutFrom,
            >,
            ::std::string::String,
        >,
        remotes: ::std::result::Result<
            ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default for DevfileSchemaVersion222DependentProjectsItemVariant0Git {
        fn default() -> Self {
            Self {
                checkout_from: Ok(Default::default()),
                remotes: Err("no value supplied for remotes".to_string()),
            }
        }
    }
    impl DevfileSchemaVersion222DependentProjectsItemVariant0Git {
        pub fn checkout_from<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::option::Option<
                    super::DevfileSchemaVersion222DependentProjectsItemVariant0GitCheckoutFrom,
                >,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.checkout_from = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for checkout_from: {}", e));
            self
        }
        pub fn remotes<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.remotes = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for remotes: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<DevfileSchemaVersion222DependentProjectsItemVariant0Git>
        for super::DevfileSchemaVersion222DependentProjectsItemVariant0Git
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222DependentProjectsItemVariant0Git,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                checkout_from: value.checkout_from?,
                remotes: value.remotes?,
            })
        }
    }
    impl ::std::convert::From<super::DevfileSchemaVersion222DependentProjectsItemVariant0Git>
        for DevfileSchemaVersion222DependentProjectsItemVariant0Git
    {
        fn from(value: super::DevfileSchemaVersion222DependentProjectsItemVariant0Git) -> Self {
            Self {
                checkout_from: Ok(value.checkout_from),
                remotes: Ok(value.remotes),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222DependentProjectsItemVariant0GitCheckoutFrom {
        remote: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
        revision: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default
        for DevfileSchemaVersion222DependentProjectsItemVariant0GitCheckoutFrom
    {
        fn default() -> Self {
            Self {
                remote: Ok(Default::default()),
                revision: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222DependentProjectsItemVariant0GitCheckoutFrom {
        pub fn remote<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.remote = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for remote: {}", e));
            self
        }
        pub fn revision<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.revision = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for revision: {}", e));
            self
        }
    }
    impl
        ::std::convert::TryFrom<DevfileSchemaVersion222DependentProjectsItemVariant0GitCheckoutFrom>
        for super::DevfileSchemaVersion222DependentProjectsItemVariant0GitCheckoutFrom
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222DependentProjectsItemVariant0GitCheckoutFrom,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                remote: value.remote?,
                revision: value.revision?,
            })
        }
    }
    impl
        ::std::convert::From<
            super::DevfileSchemaVersion222DependentProjectsItemVariant0GitCheckoutFrom,
        > for DevfileSchemaVersion222DependentProjectsItemVariant0GitCheckoutFrom
    {
        fn from(
            value: super::DevfileSchemaVersion222DependentProjectsItemVariant0GitCheckoutFrom,
        ) -> Self {
            Self {
                remote: Ok(value.remote),
                revision: Ok(value.revision),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222DependentProjectsItemVariant1Zip {
        location: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default for DevfileSchemaVersion222DependentProjectsItemVariant1Zip {
        fn default() -> Self {
            Self {
                location: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222DependentProjectsItemVariant1Zip {
        pub fn location<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.location = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for location: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<DevfileSchemaVersion222DependentProjectsItemVariant1Zip>
        for super::DevfileSchemaVersion222DependentProjectsItemVariant1Zip
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222DependentProjectsItemVariant1Zip,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                location: value.location?,
            })
        }
    }
    impl ::std::convert::From<super::DevfileSchemaVersion222DependentProjectsItemVariant1Zip>
        for DevfileSchemaVersion222DependentProjectsItemVariant1Zip
    {
        fn from(value: super::DevfileSchemaVersion222DependentProjectsItemVariant1Zip) -> Self {
            Self {
                location: Ok(value.location),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222Events {
        post_start:
            ::std::result::Result<::std::vec::Vec<::std::string::String>, ::std::string::String>,
        post_stop:
            ::std::result::Result<::std::vec::Vec<::std::string::String>, ::std::string::String>,
        pre_start:
            ::std::result::Result<::std::vec::Vec<::std::string::String>, ::std::string::String>,
        pre_stop:
            ::std::result::Result<::std::vec::Vec<::std::string::String>, ::std::string::String>,
    }
    impl ::std::default::Default for DevfileSchemaVersion222Events {
        fn default() -> Self {
            Self {
                post_start: Ok(Default::default()),
                post_stop: Ok(Default::default()),
                pre_start: Ok(Default::default()),
                pre_stop: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222Events {
        pub fn post_start<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::vec::Vec<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.post_start = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for post_start: {}", e));
            self
        }
        pub fn post_stop<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::vec::Vec<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.post_stop = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for post_stop: {}", e));
            self
        }
        pub fn pre_start<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::vec::Vec<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.pre_start = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for pre_start: {}", e));
            self
        }
        pub fn pre_stop<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::vec::Vec<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.pre_stop = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for pre_stop: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<DevfileSchemaVersion222Events>
        for super::DevfileSchemaVersion222Events
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222Events,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                post_start: value.post_start?,
                post_stop: value.post_stop?,
                pre_start: value.pre_start?,
                pre_stop: value.pre_stop?,
            })
        }
    }
    impl ::std::convert::From<super::DevfileSchemaVersion222Events> for DevfileSchemaVersion222Events {
        fn from(value: super::DevfileSchemaVersion222Events) -> Self {
            Self {
                post_start: Ok(value.post_start),
                post_stop: Ok(value.post_stop),
                pre_start: Ok(value.pre_start),
                pre_stop: Ok(value.pre_stop),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222Metadata {
        architectures: ::std::result::Result<
            ::std::option::Option<Vec<super::DevfileSchemaVersion222MetadataArchitecturesItem>>,
            ::std::string::String,
        >,
        attributes: ::std::result::Result<
            ::serde_json::Map<::std::string::String, ::serde_json::Value>,
            ::std::string::String,
        >,
        description: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
        display_name: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
        global_memory_limit: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
        icon: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
        language: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
        name: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
        project_type: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
        provider: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
        support_url: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
        tags: ::std::result::Result<::std::vec::Vec<::std::string::String>, ::std::string::String>,
        version: ::std::result::Result<
            ::std::option::Option<super::DevfileSchemaVersion222MetadataVersion>,
            ::std::string::String,
        >,
        website: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default for DevfileSchemaVersion222Metadata {
        fn default() -> Self {
            Self {
                architectures: Ok(Default::default()),
                attributes: Ok(Default::default()),
                description: Ok(Default::default()),
                display_name: Ok(Default::default()),
                global_memory_limit: Ok(Default::default()),
                icon: Ok(Default::default()),
                language: Ok(Default::default()),
                name: Ok(Default::default()),
                project_type: Ok(Default::default()),
                provider: Ok(Default::default()),
                support_url: Ok(Default::default()),
                tags: Ok(Default::default()),
                version: Ok(Default::default()),
                website: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222Metadata {
        pub fn architectures<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::option::Option<Vec<super::DevfileSchemaVersion222MetadataArchitecturesItem>>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.architectures = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for architectures: {}", e));
            self
        }
        pub fn attributes<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::serde_json::Map<::std::string::String, ::serde_json::Value>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.attributes = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for attributes: {}", e));
            self
        }
        pub fn description<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.description = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for description: {}", e));
            self
        }
        pub fn display_name<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.display_name = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for display_name: {}", e));
            self
        }
        pub fn global_memory_limit<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.global_memory_limit = value.try_into().map_err(|e| {
                format!(
                    "error converting supplied value for global_memory_limit: {}",
                    e
                )
            });
            self
        }
        pub fn icon<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.icon = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for icon: {}", e));
            self
        }
        pub fn language<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.language = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for language: {}", e));
            self
        }
        pub fn name<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.name = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for name: {}", e));
            self
        }
        pub fn project_type<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.project_type = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for project_type: {}", e));
            self
        }
        pub fn provider<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.provider = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for provider: {}", e));
            self
        }
        pub fn support_url<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.support_url = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for support_url: {}", e));
            self
        }
        pub fn tags<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::vec::Vec<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.tags = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for tags: {}", e));
            self
        }
        pub fn version<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::option::Option<super::DevfileSchemaVersion222MetadataVersion>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.version = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for version: {}", e));
            self
        }
        pub fn website<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.website = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for website: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<DevfileSchemaVersion222Metadata>
        for super::DevfileSchemaVersion222Metadata
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222Metadata,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                architectures: value.architectures?,
                attributes: value.attributes?,
                description: value.description?,
                display_name: value.display_name?,
                global_memory_limit: value.global_memory_limit?,
                icon: value.icon?,
                language: value.language?,
                name: value.name?,
                project_type: value.project_type?,
                provider: value.provider?,
                support_url: value.support_url?,
                tags: value.tags?,
                version: value.version?,
                website: value.website?,
            })
        }
    }
    impl ::std::convert::From<super::DevfileSchemaVersion222Metadata>
        for DevfileSchemaVersion222Metadata
    {
        fn from(value: super::DevfileSchemaVersion222Metadata) -> Self {
            Self {
                architectures: Ok(value.architectures),
                attributes: Ok(value.attributes),
                description: Ok(value.description),
                display_name: Ok(value.display_name),
                global_memory_limit: Ok(value.global_memory_limit),
                icon: Ok(value.icon),
                language: Ok(value.language),
                name: Ok(value.name),
                project_type: Ok(value.project_type),
                provider: Ok(value.provider),
                support_url: Ok(value.support_url),
                tags: Ok(value.tags),
                version: Ok(value.version),
                website: Ok(value.website),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant0CommandsItemVariant0Exec {
        command_line: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
        component: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
        env: ::std::result::Result<
            ::std::vec::Vec<
                super::DevfileSchemaVersion222ParentVariant0CommandsItemVariant0ExecEnvItem,
            >,
            ::std::string::String,
        >,
        group: ::std::result::Result<
            ::std::option::Option<
                super::DevfileSchemaVersion222ParentVariant0CommandsItemVariant0ExecGroup,
            >,
            ::std::string::String,
        >,
        hot_reload_capable:
            ::std::result::Result<::std::option::Option<bool>, ::std::string::String>,
        label: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
        working_dir: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default for DevfileSchemaVersion222ParentVariant0CommandsItemVariant0Exec {
        fn default() -> Self {
            Self {
                command_line: Ok(Default::default()),
                component: Ok(Default::default()),
                env: Ok(Default::default()),
                group: Ok(Default::default()),
                hot_reload_capable: Ok(Default::default()),
                label: Ok(Default::default()),
                working_dir: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant0CommandsItemVariant0Exec {
        pub fn command_line<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.command_line = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for command_line: {}", e));
            self
        }
        pub fn component<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.component = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for component: {}", e));
            self
        }
        pub fn env<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::vec::Vec<
                    super::DevfileSchemaVersion222ParentVariant0CommandsItemVariant0ExecEnvItem,
                >,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.env = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for env: {}", e));
            self
        }
        pub fn group<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::option::Option<
                    super::DevfileSchemaVersion222ParentVariant0CommandsItemVariant0ExecGroup,
                >,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.group = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for group: {}", e));
            self
        }
        pub fn hot_reload_capable<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<bool>>,
            T::Error: ::std::fmt::Display,
        {
            self.hot_reload_capable = value.try_into().map_err(|e| {
                format!(
                    "error converting supplied value for hot_reload_capable: {}",
                    e
                )
            });
            self
        }
        pub fn label<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.label = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for label: {}", e));
            self
        }
        pub fn working_dir<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.working_dir = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for working_dir: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<DevfileSchemaVersion222ParentVariant0CommandsItemVariant0Exec>
        for super::DevfileSchemaVersion222ParentVariant0CommandsItemVariant0Exec
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ParentVariant0CommandsItemVariant0Exec,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                command_line: value.command_line?,
                component: value.component?,
                env: value.env?,
                group: value.group?,
                hot_reload_capable: value.hot_reload_capable?,
                label: value.label?,
                working_dir: value.working_dir?,
            })
        }
    }
    impl ::std::convert::From<super::DevfileSchemaVersion222ParentVariant0CommandsItemVariant0Exec>
        for DevfileSchemaVersion222ParentVariant0CommandsItemVariant0Exec
    {
        fn from(
            value: super::DevfileSchemaVersion222ParentVariant0CommandsItemVariant0Exec,
        ) -> Self {
            Self {
                command_line: Ok(value.command_line),
                component: Ok(value.component),
                env: Ok(value.env),
                group: Ok(value.group),
                hot_reload_capable: Ok(value.hot_reload_capable),
                label: Ok(value.label),
                working_dir: Ok(value.working_dir),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant0CommandsItemVariant0ExecEnvItem {
        name: ::std::result::Result<::std::string::String, ::std::string::String>,
        value: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default
        for DevfileSchemaVersion222ParentVariant0CommandsItemVariant0ExecEnvItem
    {
        fn default() -> Self {
            Self {
                name: Err("no value supplied for name".to_string()),
                value: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant0CommandsItemVariant0ExecEnvItem {
        pub fn name<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::string::String>,
            T::Error: ::std::fmt::Display,
        {
            self.name = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for name: {}", e));
            self
        }
        pub fn value<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.value = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for value: {}", e));
            self
        }
    }
    impl
        ::std::convert::TryFrom<
            DevfileSchemaVersion222ParentVariant0CommandsItemVariant0ExecEnvItem,
        > for super::DevfileSchemaVersion222ParentVariant0CommandsItemVariant0ExecEnvItem
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ParentVariant0CommandsItemVariant0ExecEnvItem,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                name: value.name?,
                value: value.value?,
            })
        }
    }
    impl
        ::std::convert::From<
            super::DevfileSchemaVersion222ParentVariant0CommandsItemVariant0ExecEnvItem,
        > for DevfileSchemaVersion222ParentVariant0CommandsItemVariant0ExecEnvItem
    {
        fn from(
            value: super::DevfileSchemaVersion222ParentVariant0CommandsItemVariant0ExecEnvItem,
        ) -> Self {
            Self {
                name: Ok(value.name),
                value: Ok(value.value),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant0CommandsItemVariant0ExecGroup {
        is_default: ::std::result::Result<::std::option::Option<bool>, ::std::string::String>,
        kind: ::std::result::Result<
            ::std::option::Option<
                super::DevfileSchemaVersion222ParentVariant0CommandsItemVariant0ExecGroupKind,
            >,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default
        for DevfileSchemaVersion222ParentVariant0CommandsItemVariant0ExecGroup
    {
        fn default() -> Self {
            Self {
                is_default: Ok(Default::default()),
                kind: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant0CommandsItemVariant0ExecGroup {
        pub fn is_default<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<bool>>,
            T::Error: ::std::fmt::Display,
        {
            self.is_default = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for is_default: {}", e));
            self
        }
        pub fn kind<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::option::Option<
                    super::DevfileSchemaVersion222ParentVariant0CommandsItemVariant0ExecGroupKind,
                >,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.kind = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for kind: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<DevfileSchemaVersion222ParentVariant0CommandsItemVariant0ExecGroup>
        for super::DevfileSchemaVersion222ParentVariant0CommandsItemVariant0ExecGroup
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ParentVariant0CommandsItemVariant0ExecGroup,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                is_default: value.is_default?,
                kind: value.kind?,
            })
        }
    }
    impl
        ::std::convert::From<
            super::DevfileSchemaVersion222ParentVariant0CommandsItemVariant0ExecGroup,
        > for DevfileSchemaVersion222ParentVariant0CommandsItemVariant0ExecGroup
    {
        fn from(
            value: super::DevfileSchemaVersion222ParentVariant0CommandsItemVariant0ExecGroup,
        ) -> Self {
            Self {
                is_default: Ok(value.is_default),
                kind: Ok(value.kind),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant0CommandsItemVariant1Apply {
        component: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
        group: ::std::result::Result<
            ::std::option::Option<
                super::DevfileSchemaVersion222ParentVariant0CommandsItemVariant1ApplyGroup,
            >,
            ::std::string::String,
        >,
        label: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default for DevfileSchemaVersion222ParentVariant0CommandsItemVariant1Apply {
        fn default() -> Self {
            Self {
                component: Ok(Default::default()),
                group: Ok(Default::default()),
                label: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant0CommandsItemVariant1Apply {
        pub fn component<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.component = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for component: {}", e));
            self
        }
        pub fn group<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::option::Option<
                    super::DevfileSchemaVersion222ParentVariant0CommandsItemVariant1ApplyGroup,
                >,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.group = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for group: {}", e));
            self
        }
        pub fn label<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.label = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for label: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<DevfileSchemaVersion222ParentVariant0CommandsItemVariant1Apply>
        for super::DevfileSchemaVersion222ParentVariant0CommandsItemVariant1Apply
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ParentVariant0CommandsItemVariant1Apply,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                component: value.component?,
                group: value.group?,
                label: value.label?,
            })
        }
    }
    impl ::std::convert::From<super::DevfileSchemaVersion222ParentVariant0CommandsItemVariant1Apply>
        for DevfileSchemaVersion222ParentVariant0CommandsItemVariant1Apply
    {
        fn from(
            value: super::DevfileSchemaVersion222ParentVariant0CommandsItemVariant1Apply,
        ) -> Self {
            Self {
                component: Ok(value.component),
                group: Ok(value.group),
                label: Ok(value.label),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant0CommandsItemVariant1ApplyGroup {
        is_default: ::std::result::Result<::std::option::Option<bool>, ::std::string::String>,
        kind: ::std::result::Result<
            ::std::option::Option<
                super::DevfileSchemaVersion222ParentVariant0CommandsItemVariant1ApplyGroupKind,
            >,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default
        for DevfileSchemaVersion222ParentVariant0CommandsItemVariant1ApplyGroup
    {
        fn default() -> Self {
            Self {
                is_default: Ok(Default::default()),
                kind: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant0CommandsItemVariant1ApplyGroup {
        pub fn is_default<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<bool>>,
            T::Error: ::std::fmt::Display,
        {
            self.is_default = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for is_default: {}", e));
            self
        }
        pub fn kind<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::option::Option<
                    super::DevfileSchemaVersion222ParentVariant0CommandsItemVariant1ApplyGroupKind,
                >,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.kind = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for kind: {}", e));
            self
        }
    }
    impl
        ::std::convert::TryFrom<DevfileSchemaVersion222ParentVariant0CommandsItemVariant1ApplyGroup>
        for super::DevfileSchemaVersion222ParentVariant0CommandsItemVariant1ApplyGroup
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ParentVariant0CommandsItemVariant1ApplyGroup,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                is_default: value.is_default?,
                kind: value.kind?,
            })
        }
    }
    impl
        ::std::convert::From<
            super::DevfileSchemaVersion222ParentVariant0CommandsItemVariant1ApplyGroup,
        > for DevfileSchemaVersion222ParentVariant0CommandsItemVariant1ApplyGroup
    {
        fn from(
            value: super::DevfileSchemaVersion222ParentVariant0CommandsItemVariant1ApplyGroup,
        ) -> Self {
            Self {
                is_default: Ok(value.is_default),
                kind: Ok(value.kind),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant0CommandsItemVariant2Composite {
        commands:
            ::std::result::Result<::std::vec::Vec<::std::string::String>, ::std::string::String>,
        group: ::std::result::Result<
            ::std::option::Option<
                super::DevfileSchemaVersion222ParentVariant0CommandsItemVariant2CompositeGroup,
            >,
            ::std::string::String,
        >,
        label: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
        parallel: ::std::result::Result<::std::option::Option<bool>, ::std::string::String>,
    }
    impl ::std::default::Default
        for DevfileSchemaVersion222ParentVariant0CommandsItemVariant2Composite
    {
        fn default() -> Self {
            Self {
                commands: Ok(Default::default()),
                group: Ok(Default::default()),
                label: Ok(Default::default()),
                parallel: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant0CommandsItemVariant2Composite {
        pub fn commands<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::vec::Vec<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.commands = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for commands: {}", e));
            self
        }
        pub fn group<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::option::Option<
                    super::DevfileSchemaVersion222ParentVariant0CommandsItemVariant2CompositeGroup,
                >,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.group = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for group: {}", e));
            self
        }
        pub fn label<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.label = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for label: {}", e));
            self
        }
        pub fn parallel<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<bool>>,
            T::Error: ::std::fmt::Display,
        {
            self.parallel = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for parallel: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<DevfileSchemaVersion222ParentVariant0CommandsItemVariant2Composite>
        for super::DevfileSchemaVersion222ParentVariant0CommandsItemVariant2Composite
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ParentVariant0CommandsItemVariant2Composite,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                commands: value.commands?,
                group: value.group?,
                label: value.label?,
                parallel: value.parallel?,
            })
        }
    }
    impl
        ::std::convert::From<
            super::DevfileSchemaVersion222ParentVariant0CommandsItemVariant2Composite,
        > for DevfileSchemaVersion222ParentVariant0CommandsItemVariant2Composite
    {
        fn from(
            value: super::DevfileSchemaVersion222ParentVariant0CommandsItemVariant2Composite,
        ) -> Self {
            Self {
                commands: Ok(value.commands),
                group: Ok(value.group),
                label: Ok(value.label),
                parallel: Ok(value.parallel),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant0CommandsItemVariant2CompositeGroup {
        is_default: ::std::result::Result<::std::option::Option<bool>, ::std::string::String>,
        kind: ::std::result::Result<
            ::std::option::Option<
                super::DevfileSchemaVersion222ParentVariant0CommandsItemVariant2CompositeGroupKind,
            >,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default
        for DevfileSchemaVersion222ParentVariant0CommandsItemVariant2CompositeGroup
    {
        fn default() -> Self {
            Self {
                is_default: Ok(Default::default()),
                kind: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant0CommandsItemVariant2CompositeGroup {
        pub fn is_default<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<bool>>,
            T::Error: ::std::fmt::Display,
        {
            self.is_default = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for is_default: {}", e));
            self
        }        pub fn kind < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant0CommandsItemVariant2CompositeGroupKind > > , T :: Error : :: std :: fmt :: Display ,{
            self.kind = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for kind: {}", e));
            self
        }
    }
    impl
        ::std::convert::TryFrom<
            DevfileSchemaVersion222ParentVariant0CommandsItemVariant2CompositeGroup,
        > for super::DevfileSchemaVersion222ParentVariant0CommandsItemVariant2CompositeGroup
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ParentVariant0CommandsItemVariant2CompositeGroup,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                is_default: value.is_default?,
                kind: value.kind?,
            })
        }
    }
    impl
        ::std::convert::From<
            super::DevfileSchemaVersion222ParentVariant0CommandsItemVariant2CompositeGroup,
        > for DevfileSchemaVersion222ParentVariant0CommandsItemVariant2CompositeGroup
    {
        fn from(
            value: super::DevfileSchemaVersion222ParentVariant0CommandsItemVariant2CompositeGroup,
        ) -> Self {
            Self {
                is_default: Ok(value.is_default),
                kind: Ok(value.kind),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0Container { annotation : :: std :: result :: Result < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerAnnotation > , :: std :: string :: String > , args : :: std :: result :: Result < :: std :: vec :: Vec < :: std :: string :: String > , :: std :: string :: String > , command : :: std :: result :: Result < :: std :: vec :: Vec < :: std :: string :: String > , :: std :: string :: String > , cpu_limit : :: std :: result :: Result < :: std :: option :: Option < :: std :: string :: String > , :: std :: string :: String > , cpu_request : :: std :: result :: Result < :: std :: option :: Option < :: std :: string :: String > , :: std :: string :: String > , dedicated_pod : :: std :: result :: Result < :: std :: option :: Option < bool > , :: std :: string :: String > , endpoints : :: std :: result :: Result < :: std :: vec :: Vec < super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEndpointsItem > , :: std :: string :: String > , env : :: std :: result :: Result < :: std :: vec :: Vec < super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEnvItem > , :: std :: string :: String > , image : :: std :: result :: Result < :: std :: option :: Option < :: std :: string :: String > , :: std :: string :: String > , memory_limit : :: std :: result :: Result < :: std :: option :: Option < :: std :: string :: String > , :: std :: string :: String > , memory_request : :: std :: result :: Result < :: std :: option :: Option < :: std :: string :: String > , :: std :: string :: String > , mount_sources : :: std :: result :: Result < :: std :: option :: Option < bool > , :: std :: string :: String > , source_mapping : :: std :: result :: Result < :: std :: option :: Option < :: std :: string :: String > , :: std :: string :: String > , volume_mounts : :: std :: result :: Result < :: std :: vec :: Vec < super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerVolumeMountsItem > , :: std :: string :: String > , }
    impl ::std::default::Default
        for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0Container
    {
        fn default() -> Self {
            Self {
                annotation: Ok(Default::default()),
                args: Ok(Default::default()),
                command: Ok(Default::default()),
                cpu_limit: Ok(Default::default()),
                cpu_request: Ok(Default::default()),
                dedicated_pod: Ok(Default::default()),
                endpoints: Ok(Default::default()),
                env: Ok(Default::default()),
                image: Ok(Default::default()),
                memory_limit: Ok(Default::default()),
                memory_request: Ok(Default::default()),
                mount_sources: Ok(Default::default()),
                source_mapping: Ok(Default::default()),
                volume_mounts: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0Container {
        pub fn annotation < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerAnnotation > > , T :: Error : :: std :: fmt :: Display ,{
            self.annotation = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for annotation: {}", e));
            self
        }
        pub fn args<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::vec::Vec<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.args = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for args: {}", e));
            self
        }
        pub fn command<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::vec::Vec<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.command = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for command: {}", e));
            self
        }
        pub fn cpu_limit<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.cpu_limit = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for cpu_limit: {}", e));
            self
        }
        pub fn cpu_request<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.cpu_request = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for cpu_request: {}", e));
            self
        }
        pub fn dedicated_pod<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<bool>>,
            T::Error: ::std::fmt::Display,
        {
            self.dedicated_pod = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for dedicated_pod: {}", e));
            self
        }        pub fn endpoints < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: vec :: Vec < super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEndpointsItem > > , T :: Error : :: std :: fmt :: Display ,{
            self.endpoints = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for endpoints: {}", e));
            self
        }        pub fn env < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: vec :: Vec < super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEnvItem > > , T :: Error : :: std :: fmt :: Display ,{
            self.env = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for env: {}", e));
            self
        }
        pub fn image<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.image = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for image: {}", e));
            self
        }
        pub fn memory_limit<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.memory_limit = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for memory_limit: {}", e));
            self
        }
        pub fn memory_request<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.memory_request = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for memory_request: {}", e));
            self
        }
        pub fn mount_sources<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<bool>>,
            T::Error: ::std::fmt::Display,
        {
            self.mount_sources = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for mount_sources: {}", e));
            self
        }
        pub fn source_mapping<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.source_mapping = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for source_mapping: {}", e));
            self
        }        pub fn volume_mounts < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: vec :: Vec < super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerVolumeMountsItem > > , T :: Error : :: std :: fmt :: Display ,{
            self.volume_mounts = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for volume_mounts: {}", e));
            self
        }
    }
    impl
        ::std::convert::TryFrom<
            DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0Container,
        > for super::DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0Container
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0Container,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                annotation: value.annotation?,
                args: value.args?,
                command: value.command?,
                cpu_limit: value.cpu_limit?,
                cpu_request: value.cpu_request?,
                dedicated_pod: value.dedicated_pod?,
                endpoints: value.endpoints?,
                env: value.env?,
                image: value.image?,
                memory_limit: value.memory_limit?,
                memory_request: value.memory_request?,
                mount_sources: value.mount_sources?,
                source_mapping: value.source_mapping?,
                volume_mounts: value.volume_mounts?,
            })
        }
    }
    impl
        ::std::convert::From<
            super::DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0Container,
        > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0Container
    {
        fn from(
            value: super::DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0Container,
        ) -> Self {
            Self {
                annotation: Ok(value.annotation),
                args: Ok(value.args),
                command: Ok(value.command),
                cpu_limit: Ok(value.cpu_limit),
                cpu_request: Ok(value.cpu_request),
                dedicated_pod: Ok(value.dedicated_pod),
                endpoints: Ok(value.endpoints),
                env: Ok(value.env),
                image: Ok(value.image),
                memory_limit: Ok(value.memory_limit),
                memory_request: Ok(value.memory_request),
                mount_sources: Ok(value.mount_sources),
                source_mapping: Ok(value.source_mapping),
                volume_mounts: Ok(value.volume_mounts),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerAnnotation {
        deployment: ::std::result::Result<
            ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            ::std::string::String,
        >,
        service: ::std::result::Result<
            ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default
        for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerAnnotation
    {
        fn default() -> Self {
            Self {
                deployment: Ok(Default::default()),
                service: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerAnnotation {
        pub fn deployment<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.deployment = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for deployment: {}", e));
            self
        }
        pub fn service<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.service = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for service: {}", e));
            self
        }
    }
    impl
        ::std::convert::TryFrom<
            DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerAnnotation,
        >
        for super::DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerAnnotation
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerAnnotation,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                deployment: value.deployment?,
                service: value.service?,
            })
        }
    }
    impl
        ::std::convert::From<
            super::DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerAnnotation,
        > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerAnnotation
    {
        fn from(
            value : super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerAnnotation,
        ) -> Self {
            Self {
                deployment: Ok(value.deployment),
                service: Ok(value.service),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEndpointsItem { annotation : :: std :: result :: Result < :: std :: collections :: HashMap < :: std :: string :: String , :: std :: string :: String > , :: std :: string :: String > , attributes : :: std :: result :: Result < :: serde_json :: Map < :: std :: string :: String , :: serde_json :: Value > , :: std :: string :: String > , exposure : :: std :: result :: Result < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEndpointsItemExposure > , :: std :: string :: String > , name : :: std :: result :: Result < super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEndpointsItemName , :: std :: string :: String > , path : :: std :: result :: Result < :: std :: option :: Option < :: std :: string :: String > , :: std :: string :: String > , protocol : :: std :: result :: Result < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEndpointsItemProtocol > , :: std :: string :: String > , secure : :: std :: result :: Result < :: std :: option :: Option < bool > , :: std :: string :: String > , target_port : :: std :: result :: Result < :: std :: option :: Option < i64 > , :: std :: string :: String > , }
    impl ::std::default::Default
        for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEndpointsItem
    {
        fn default() -> Self {
            Self {
                annotation: Ok(Default::default()),
                attributes: Ok(Default::default()),
                exposure: Ok(Default::default()),
                name: Err("no value supplied for name".to_string()),
                path: Ok(Default::default()),
                protocol: Ok(Default::default()),
                secure: Ok(Default::default()),
                target_port: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEndpointsItem {
        pub fn annotation<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.annotation = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for annotation: {}", e));
            self
        }
        pub fn attributes<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::serde_json::Map<::std::string::String, ::serde_json::Value>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.attributes = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for attributes: {}", e));
            self
        }        pub fn exposure < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEndpointsItemExposure > > , T :: Error : :: std :: fmt :: Display ,{
            self.exposure = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for exposure: {}", e));
            self
        }        pub fn name < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEndpointsItemName > , T :: Error : :: std :: fmt :: Display ,{
            self.name = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for name: {}", e));
            self
        }
        pub fn path<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.path = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for path: {}", e));
            self
        }        pub fn protocol < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEndpointsItemProtocol > > , T :: Error : :: std :: fmt :: Display ,{
            self.protocol = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for protocol: {}", e));
            self
        }
        pub fn secure<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<bool>>,
            T::Error: ::std::fmt::Display,
        {
            self.secure = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for secure: {}", e));
            self
        }
        pub fn target_port<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<i64>>,
            T::Error: ::std::fmt::Display,
        {
            self.target_port = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for target_port: {}", e));
            self
        }
    }
    impl
        ::std::convert::TryFrom<
            DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEndpointsItem,
        >
        for super::DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEndpointsItem
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value : DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEndpointsItem,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                annotation: value.annotation?,
                attributes: value.attributes?,
                exposure: value.exposure?,
                name: value.name?,
                path: value.path?,
                protocol: value.protocol?,
                secure: value.secure?,
                target_port: value.target_port?,
            })
        }
    }
    impl :: std :: convert :: From < super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEndpointsItem > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEndpointsItem { fn from (value : super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEndpointsItem) -> Self { Self { annotation : Ok (value . annotation) , attributes : Ok (value . attributes) , exposure : Ok (value . exposure) , name : Ok (value . name) , path : Ok (value . path) , protocol : Ok (value . protocol) , secure : Ok (value . secure) , target_port : Ok (value . target_port) , } } }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEnvItem {
        name: ::std::result::Result<::std::string::String, ::std::string::String>,
        value: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default
        for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEnvItem
    {
        fn default() -> Self {
            Self {
                name: Err("no value supplied for name".to_string()),
                value: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEnvItem {
        pub fn name<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::string::String>,
            T::Error: ::std::fmt::Display,
        {
            self.name = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for name: {}", e));
            self
        }
        pub fn value<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.value = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for value: {}", e));
            self
        }
    }
    impl
        ::std::convert::TryFrom<
            DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEnvItem,
        > for super::DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEnvItem
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEnvItem,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                name: value.name?,
                value: value.value?,
            })
        }
    }
    impl
        ::std::convert::From<
            super::DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEnvItem,
        > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEnvItem
    {
        fn from(
            value : super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerEnvItem,
        ) -> Self {
            Self {
                name: Ok(value.name),
                value: Ok(value.value),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerVolumeMountsItem { name : :: std :: result :: Result < super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerVolumeMountsItemName , :: std :: string :: String > , path : :: std :: result :: Result < :: std :: option :: Option < :: std :: string :: String > , :: std :: string :: String > , }
    impl ::std::default::Default
        for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerVolumeMountsItem
    {
        fn default() -> Self {
            Self {
                name: Err("no value supplied for name".to_string()),
                path: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerVolumeMountsItem {
        pub fn name < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerVolumeMountsItemName > , T :: Error : :: std :: fmt :: Display ,{
            self.name = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for name: {}", e));
            self
        }
        pub fn path<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.path = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for path: {}", e));
            self
        }
    }
    impl :: std :: convert :: TryFrom < DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerVolumeMountsItem > for super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerVolumeMountsItem { type Error = super :: error :: ConversionError ; fn try_from (value : DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerVolumeMountsItem) -> :: std :: result :: Result < Self , super :: error :: ConversionError > { Ok (Self { name : value . name ? , path : value . path ? , }) } }
    impl :: std :: convert :: From < super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerVolumeMountsItem > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerVolumeMountsItem { fn from (value : super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant0ContainerVolumeMountsItem) -> Self { Self { name : Ok (value . name) , path : Ok (value . path) , } } }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant0EndpointsItem { annotation : :: std :: result :: Result < :: std :: collections :: HashMap < :: std :: string :: String , :: std :: string :: String > , :: std :: string :: String > , attributes : :: std :: result :: Result < :: serde_json :: Map < :: std :: string :: String , :: serde_json :: Value > , :: std :: string :: String > , exposure : :: std :: result :: Result < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant0EndpointsItemExposure > , :: std :: string :: String > , name : :: std :: result :: Result < super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant0EndpointsItemName , :: std :: string :: String > , path : :: std :: result :: Result < :: std :: option :: Option < :: std :: string :: String > , :: std :: string :: String > , protocol : :: std :: result :: Result < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant0EndpointsItemProtocol > , :: std :: string :: String > , secure : :: std :: result :: Result < :: std :: option :: Option < bool > , :: std :: string :: String > , target_port : :: std :: result :: Result < :: std :: option :: Option < i64 > , :: std :: string :: String > , }
    impl :: std :: default :: Default for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant0EndpointsItem { fn default () -> Self { Self { annotation : Ok (Default :: default ()) , attributes : Ok (Default :: default ()) , exposure : Ok (Default :: default ()) , name : Err ("no value supplied for name" . to_string ()) , path : Ok (Default :: default ()) , protocol : Ok (Default :: default ()) , secure : Ok (Default :: default ()) , target_port : Ok (Default :: default ()) , } } }
    impl DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant0EndpointsItem {
        pub fn annotation<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.annotation = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for annotation: {}", e));
            self
        }
        pub fn attributes<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::serde_json::Map<::std::string::String, ::serde_json::Value>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.attributes = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for attributes: {}", e));
            self
        }        pub fn exposure < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant0EndpointsItemExposure > > , T :: Error : :: std :: fmt :: Display ,{
            self.exposure = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for exposure: {}", e));
            self
        }        pub fn name < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant0EndpointsItemName > , T :: Error : :: std :: fmt :: Display ,{
            self.name = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for name: {}", e));
            self
        }
        pub fn path<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.path = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for path: {}", e));
            self
        }        pub fn protocol < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant0EndpointsItemProtocol > > , T :: Error : :: std :: fmt :: Display ,{
            self.protocol = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for protocol: {}", e));
            self
        }
        pub fn secure<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<bool>>,
            T::Error: ::std::fmt::Display,
        {
            self.secure = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for secure: {}", e));
            self
        }
        pub fn target_port<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<i64>>,
            T::Error: ::std::fmt::Display,
        {
            self.target_port = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for target_port: {}", e));
            self
        }
    }
    impl :: std :: convert :: TryFrom < DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant0EndpointsItem > for super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant0EndpointsItem { type Error = super :: error :: ConversionError ; fn try_from (value : DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant0EndpointsItem) -> :: std :: result :: Result < Self , super :: error :: ConversionError > { Ok (Self { annotation : value . annotation ? , attributes : value . attributes ? , exposure : value . exposure ? , name : value . name ? , path : value . path ? , protocol : value . protocol ? , secure : value . secure ? , target_port : value . target_port ? , }) } }
    impl :: std :: convert :: From < super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant0EndpointsItem > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant0EndpointsItem { fn from (value : super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant0EndpointsItem) -> Self { Self { annotation : Ok (value . annotation) , attributes : Ok (value . attributes) , exposure : Ok (value . exposure) , name : Ok (value . name) , path : Ok (value . path) , protocol : Ok (value . protocol) , secure : Ok (value . secure) , target_port : Ok (value . target_port) , } } }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant1EndpointsItem { annotation : :: std :: result :: Result < :: std :: collections :: HashMap < :: std :: string :: String , :: std :: string :: String > , :: std :: string :: String > , attributes : :: std :: result :: Result < :: serde_json :: Map < :: std :: string :: String , :: serde_json :: Value > , :: std :: string :: String > , exposure : :: std :: result :: Result < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant1EndpointsItemExposure > , :: std :: string :: String > , name : :: std :: result :: Result < super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant1EndpointsItemName , :: std :: string :: String > , path : :: std :: result :: Result < :: std :: option :: Option < :: std :: string :: String > , :: std :: string :: String > , protocol : :: std :: result :: Result < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant1EndpointsItemProtocol > , :: std :: string :: String > , secure : :: std :: result :: Result < :: std :: option :: Option < bool > , :: std :: string :: String > , target_port : :: std :: result :: Result < :: std :: option :: Option < i64 > , :: std :: string :: String > , }
    impl :: std :: default :: Default for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant1EndpointsItem { fn default () -> Self { Self { annotation : Ok (Default :: default ()) , attributes : Ok (Default :: default ()) , exposure : Ok (Default :: default ()) , name : Err ("no value supplied for name" . to_string ()) , path : Ok (Default :: default ()) , protocol : Ok (Default :: default ()) , secure : Ok (Default :: default ()) , target_port : Ok (Default :: default ()) , } } }
    impl DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant1EndpointsItem {
        pub fn annotation<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.annotation = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for annotation: {}", e));
            self
        }
        pub fn attributes<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::serde_json::Map<::std::string::String, ::serde_json::Value>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.attributes = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for attributes: {}", e));
            self
        }        pub fn exposure < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant1EndpointsItemExposure > > , T :: Error : :: std :: fmt :: Display ,{
            self.exposure = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for exposure: {}", e));
            self
        }        pub fn name < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant1EndpointsItemName > , T :: Error : :: std :: fmt :: Display ,{
            self.name = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for name: {}", e));
            self
        }
        pub fn path<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.path = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for path: {}", e));
            self
        }        pub fn protocol < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant1EndpointsItemProtocol > > , T :: Error : :: std :: fmt :: Display ,{
            self.protocol = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for protocol: {}", e));
            self
        }
        pub fn secure<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<bool>>,
            T::Error: ::std::fmt::Display,
        {
            self.secure = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for secure: {}", e));
            self
        }
        pub fn target_port<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<i64>>,
            T::Error: ::std::fmt::Display,
        {
            self.target_port = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for target_port: {}", e));
            self
        }
    }
    impl :: std :: convert :: TryFrom < DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant1EndpointsItem > for super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant1EndpointsItem { type Error = super :: error :: ConversionError ; fn try_from (value : DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant1EndpointsItem) -> :: std :: result :: Result < Self , super :: error :: ConversionError > { Ok (Self { annotation : value . annotation ? , attributes : value . attributes ? , exposure : value . exposure ? , name : value . name ? , path : value . path ? , protocol : value . protocol ? , secure : value . secure ? , target_port : value . target_port ? , }) } }
    impl :: std :: convert :: From < super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant1EndpointsItem > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant1EndpointsItem { fn from (value : super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant1KubernetesVariant1EndpointsItem) -> Self { Self { annotation : Ok (value . annotation) , attributes : Ok (value . attributes) , exposure : Ok (value . exposure) , name : Ok (value . name) , path : Ok (value . path) , protocol : Ok (value . protocol) , secure : Ok (value . secure) , target_port : Ok (value . target_port) , } } }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant0EndpointsItem { annotation : :: std :: result :: Result < :: std :: collections :: HashMap < :: std :: string :: String , :: std :: string :: String > , :: std :: string :: String > , attributes : :: std :: result :: Result < :: serde_json :: Map < :: std :: string :: String , :: serde_json :: Value > , :: std :: string :: String > , exposure : :: std :: result :: Result < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant0EndpointsItemExposure > , :: std :: string :: String > , name : :: std :: result :: Result < super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant0EndpointsItemName , :: std :: string :: String > , path : :: std :: result :: Result < :: std :: option :: Option < :: std :: string :: String > , :: std :: string :: String > , protocol : :: std :: result :: Result < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant0EndpointsItemProtocol > , :: std :: string :: String > , secure : :: std :: result :: Result < :: std :: option :: Option < bool > , :: std :: string :: String > , target_port : :: std :: result :: Result < :: std :: option :: Option < i64 > , :: std :: string :: String > , }
    impl :: std :: default :: Default for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant0EndpointsItem { fn default () -> Self { Self { annotation : Ok (Default :: default ()) , attributes : Ok (Default :: default ()) , exposure : Ok (Default :: default ()) , name : Err ("no value supplied for name" . to_string ()) , path : Ok (Default :: default ()) , protocol : Ok (Default :: default ()) , secure : Ok (Default :: default ()) , target_port : Ok (Default :: default ()) , } } }
    impl DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant0EndpointsItem {
        pub fn annotation<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.annotation = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for annotation: {}", e));
            self
        }
        pub fn attributes<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::serde_json::Map<::std::string::String, ::serde_json::Value>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.attributes = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for attributes: {}", e));
            self
        }        pub fn exposure < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant0EndpointsItemExposure > > , T :: Error : :: std :: fmt :: Display ,{
            self.exposure = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for exposure: {}", e));
            self
        }        pub fn name < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant0EndpointsItemName > , T :: Error : :: std :: fmt :: Display ,{
            self.name = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for name: {}", e));
            self
        }
        pub fn path<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.path = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for path: {}", e));
            self
        }        pub fn protocol < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant0EndpointsItemProtocol > > , T :: Error : :: std :: fmt :: Display ,{
            self.protocol = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for protocol: {}", e));
            self
        }
        pub fn secure<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<bool>>,
            T::Error: ::std::fmt::Display,
        {
            self.secure = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for secure: {}", e));
            self
        }
        pub fn target_port<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<i64>>,
            T::Error: ::std::fmt::Display,
        {
            self.target_port = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for target_port: {}", e));
            self
        }
    }
    impl :: std :: convert :: TryFrom < DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant0EndpointsItem > for super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant0EndpointsItem { type Error = super :: error :: ConversionError ; fn try_from (value : DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant0EndpointsItem) -> :: std :: result :: Result < Self , super :: error :: ConversionError > { Ok (Self { annotation : value . annotation ? , attributes : value . attributes ? , exposure : value . exposure ? , name : value . name ? , path : value . path ? , protocol : value . protocol ? , secure : value . secure ? , target_port : value . target_port ? , }) } }
    impl :: std :: convert :: From < super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant0EndpointsItem > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant0EndpointsItem { fn from (value : super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant0EndpointsItem) -> Self { Self { annotation : Ok (value . annotation) , attributes : Ok (value . attributes) , exposure : Ok (value . exposure) , name : Ok (value . name) , path : Ok (value . path) , protocol : Ok (value . protocol) , secure : Ok (value . secure) , target_port : Ok (value . target_port) , } } }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant1EndpointsItem { annotation : :: std :: result :: Result < :: std :: collections :: HashMap < :: std :: string :: String , :: std :: string :: String > , :: std :: string :: String > , attributes : :: std :: result :: Result < :: serde_json :: Map < :: std :: string :: String , :: serde_json :: Value > , :: std :: string :: String > , exposure : :: std :: result :: Result < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant1EndpointsItemExposure > , :: std :: string :: String > , name : :: std :: result :: Result < super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant1EndpointsItemName , :: std :: string :: String > , path : :: std :: result :: Result < :: std :: option :: Option < :: std :: string :: String > , :: std :: string :: String > , protocol : :: std :: result :: Result < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant1EndpointsItemProtocol > , :: std :: string :: String > , secure : :: std :: result :: Result < :: std :: option :: Option < bool > , :: std :: string :: String > , target_port : :: std :: result :: Result < :: std :: option :: Option < i64 > , :: std :: string :: String > , }
    impl :: std :: default :: Default for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant1EndpointsItem { fn default () -> Self { Self { annotation : Ok (Default :: default ()) , attributes : Ok (Default :: default ()) , exposure : Ok (Default :: default ()) , name : Err ("no value supplied for name" . to_string ()) , path : Ok (Default :: default ()) , protocol : Ok (Default :: default ()) , secure : Ok (Default :: default ()) , target_port : Ok (Default :: default ()) , } } }
    impl DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant1EndpointsItem {
        pub fn annotation<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.annotation = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for annotation: {}", e));
            self
        }
        pub fn attributes<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::serde_json::Map<::std::string::String, ::serde_json::Value>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.attributes = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for attributes: {}", e));
            self
        }        pub fn exposure < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant1EndpointsItemExposure > > , T :: Error : :: std :: fmt :: Display ,{
            self.exposure = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for exposure: {}", e));
            self
        }        pub fn name < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant1EndpointsItemName > , T :: Error : :: std :: fmt :: Display ,{
            self.name = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for name: {}", e));
            self
        }
        pub fn path<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.path = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for path: {}", e));
            self
        }        pub fn protocol < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant1EndpointsItemProtocol > > , T :: Error : :: std :: fmt :: Display ,{
            self.protocol = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for protocol: {}", e));
            self
        }
        pub fn secure<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<bool>>,
            T::Error: ::std::fmt::Display,
        {
            self.secure = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for secure: {}", e));
            self
        }
        pub fn target_port<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<i64>>,
            T::Error: ::std::fmt::Display,
        {
            self.target_port = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for target_port: {}", e));
            self
        }
    }
    impl :: std :: convert :: TryFrom < DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant1EndpointsItem > for super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant1EndpointsItem { type Error = super :: error :: ConversionError ; fn try_from (value : DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant1EndpointsItem) -> :: std :: result :: Result < Self , super :: error :: ConversionError > { Ok (Self { annotation : value . annotation ? , attributes : value . attributes ? , exposure : value . exposure ? , name : value . name ? , path : value . path ? , protocol : value . protocol ? , secure : value . secure ? , target_port : value . target_port ? , }) } }
    impl :: std :: convert :: From < super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant1EndpointsItem > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant1EndpointsItem { fn from (value : super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant2OpenshiftVariant1EndpointsItem) -> Self { Self { annotation : Ok (value . annotation) , attributes : Ok (value . attributes) , exposure : Ok (value . exposure) , name : Ok (value . name) , path : Ok (value . path) , protocol : Ok (value . protocol) , secure : Ok (value . secure) , target_port : Ok (value . target_port) , } } }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant0ComponentsItemVariant3Volume {
        ephemeral: ::std::result::Result<::std::option::Option<bool>, ::std::string::String>,
        size: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant3Volume {
        fn default() -> Self {
            Self {
                ephemeral: Ok(Default::default()),
                size: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant0ComponentsItemVariant3Volume {
        pub fn ephemeral<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<bool>>,
            T::Error: ::std::fmt::Display,
        {
            self.ephemeral = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for ephemeral: {}", e));
            self
        }
        pub fn size<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.size = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for size: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<DevfileSchemaVersion222ParentVariant0ComponentsItemVariant3Volume>
        for super::DevfileSchemaVersion222ParentVariant0ComponentsItemVariant3Volume
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant3Volume,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                ephemeral: value.ephemeral?,
                size: value.size?,
            })
        }
    }
    impl
        ::std::convert::From<
            super::DevfileSchemaVersion222ParentVariant0ComponentsItemVariant3Volume,
        > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant3Volume
    {
        fn from(
            value: super::DevfileSchemaVersion222ParentVariant0ComponentsItemVariant3Volume,
        ) -> Self {
            Self {
                ephemeral: Ok(value.ephemeral),
                size: Ok(value.size),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4ImageVariant0DockerfileVariant1DevfileRegistry
    {
        id: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
        registry_url: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
    }
    impl :: std :: default :: Default for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4ImageVariant0DockerfileVariant1DevfileRegistry { fn default () -> Self { Self { id : Ok (Default :: default ()) , registry_url : Ok (Default :: default ()) , } } }
    impl DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4ImageVariant0DockerfileVariant1DevfileRegistry { pub fn id < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: option :: Option < :: std :: string :: String > > , T :: Error : :: std :: fmt :: Display , { self . id = value . try_into () . map_err (| e | format ! ("error converting supplied value for id: {}" , e)) ; self } pub fn registry_url < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: option :: Option < :: std :: string :: String > > , T :: Error : :: std :: fmt :: Display , { self . registry_url = value . try_into () . map_err (| e | format ! ("error converting supplied value for registry_url: {}" , e)) ; self } }
    impl :: std :: convert :: TryFrom < DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4ImageVariant0DockerfileVariant1DevfileRegistry > for super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4ImageVariant0DockerfileVariant1DevfileRegistry { type Error = super :: error :: ConversionError ; fn try_from (value : DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4ImageVariant0DockerfileVariant1DevfileRegistry) -> :: std :: result :: Result < Self , super :: error :: ConversionError > { Ok (Self { id : value . id ? , registry_url : value . registry_url ? , }) } }
    impl :: std :: convert :: From < super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4ImageVariant0DockerfileVariant1DevfileRegistry > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4ImageVariant0DockerfileVariant1DevfileRegistry { fn from (value : super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4ImageVariant0DockerfileVariant1DevfileRegistry) -> Self { Self { id : Ok (value . id) , registry_url : Ok (value . registry_url) , } } }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4ImageVariant0DockerfileVariant2Git { checkout_from : :: std :: result :: Result < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4ImageVariant0DockerfileVariant2GitCheckoutFrom > , :: std :: string :: String > , file_location : :: std :: result :: Result < :: std :: option :: Option < :: std :: string :: String > , :: std :: string :: String > , remotes : :: std :: result :: Result < :: std :: collections :: HashMap < :: std :: string :: String , :: std :: string :: String > , :: std :: string :: String > , }
    impl :: std :: default :: Default for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4ImageVariant0DockerfileVariant2Git { fn default () -> Self { Self { checkout_from : Ok (Default :: default ()) , file_location : Ok (Default :: default ()) , remotes : Ok (Default :: default ()) , } } }
    impl DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4ImageVariant0DockerfileVariant2Git {
        pub fn checkout_from < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4ImageVariant0DockerfileVariant2GitCheckoutFrom > > , T :: Error : :: std :: fmt :: Display ,{
            self.checkout_from = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for checkout_from: {}", e));
            self
        }
        pub fn file_location<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.file_location = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for file_location: {}", e));
            self
        }
        pub fn remotes<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.remotes = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for remotes: {}", e));
            self
        }
    }
    impl :: std :: convert :: TryFrom < DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4ImageVariant0DockerfileVariant2Git > for super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4ImageVariant0DockerfileVariant2Git { type Error = super :: error :: ConversionError ; fn try_from (value : DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4ImageVariant0DockerfileVariant2Git) -> :: std :: result :: Result < Self , super :: error :: ConversionError > { Ok (Self { checkout_from : value . checkout_from ? , file_location : value . file_location ? , remotes : value . remotes ? , }) } }
    impl :: std :: convert :: From < super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4ImageVariant0DockerfileVariant2Git > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4ImageVariant0DockerfileVariant2Git { fn from (value : super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4ImageVariant0DockerfileVariant2Git) -> Self { Self { checkout_from : Ok (value . checkout_from) , file_location : Ok (value . file_location) , remotes : Ok (value . remotes) , } } }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4ImageVariant0DockerfileVariant2GitCheckoutFrom
    {
        remote: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
        revision: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
    }
    impl :: std :: default :: Default for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4ImageVariant0DockerfileVariant2GitCheckoutFrom { fn default () -> Self { Self { remote : Ok (Default :: default ()) , revision : Ok (Default :: default ()) , } } }
    impl DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4ImageVariant0DockerfileVariant2GitCheckoutFrom { pub fn remote < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: option :: Option < :: std :: string :: String > > , T :: Error : :: std :: fmt :: Display , { self . remote = value . try_into () . map_err (| e | format ! ("error converting supplied value for remote: {}" , e)) ; self } pub fn revision < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: option :: Option < :: std :: string :: String > > , T :: Error : :: std :: fmt :: Display , { self . revision = value . try_into () . map_err (| e | format ! ("error converting supplied value for revision: {}" , e)) ; self } }
    impl :: std :: convert :: TryFrom < DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4ImageVariant0DockerfileVariant2GitCheckoutFrom > for super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4ImageVariant0DockerfileVariant2GitCheckoutFrom { type Error = super :: error :: ConversionError ; fn try_from (value : DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4ImageVariant0DockerfileVariant2GitCheckoutFrom) -> :: std :: result :: Result < Self , super :: error :: ConversionError > { Ok (Self { remote : value . remote ? , revision : value . revision ? , }) } }
    impl :: std :: convert :: From < super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4ImageVariant0DockerfileVariant2GitCheckoutFrom > for DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4ImageVariant0DockerfileVariant2GitCheckoutFrom { fn from (value : super :: DevfileSchemaVersion222ParentVariant0ComponentsItemVariant4ImageVariant0DockerfileVariant2GitCheckoutFrom) -> Self { Self { remote : Ok (value . remote) , revision : Ok (value . revision) , } } }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant0Git { checkout_from : :: std :: result :: Result < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant0GitCheckoutFrom > , :: std :: string :: String > , remotes : :: std :: result :: Result < :: std :: collections :: HashMap < :: std :: string :: String , :: std :: string :: String > , :: std :: string :: String > , }
    impl ::std::default::Default
        for DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant0Git
    {
        fn default() -> Self {
            Self {
                checkout_from: Ok(Default::default()),
                remotes: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant0Git {
        pub fn checkout_from < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant0GitCheckoutFrom > > , T :: Error : :: std :: fmt :: Display ,{
            self.checkout_from = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for checkout_from: {}", e));
            self
        }
        pub fn remotes<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.remotes = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for remotes: {}", e));
            self
        }
    }
    impl
        ::std::convert::TryFrom<
            DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant0Git,
        > for super::DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant0Git
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant0Git,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                checkout_from: value.checkout_from?,
                remotes: value.remotes?,
            })
        }
    }
    impl
        ::std::convert::From<
            super::DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant0Git,
        > for DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant0Git
    {
        fn from(
            value: super::DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant0Git,
        ) -> Self {
            Self {
                checkout_from: Ok(value.checkout_from),
                remotes: Ok(value.remotes),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant0GitCheckoutFrom {
        remote: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
        revision: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default
        for DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant0GitCheckoutFrom
    {
        fn default() -> Self {
            Self {
                remote: Ok(Default::default()),
                revision: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant0GitCheckoutFrom {
        pub fn remote<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.remote = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for remote: {}", e));
            self
        }
        pub fn revision<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.revision = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for revision: {}", e));
            self
        }
    }
    impl
        ::std::convert::TryFrom<
            DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant0GitCheckoutFrom,
        >
        for super::DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant0GitCheckoutFrom
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value : DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant0GitCheckoutFrom,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                remote: value.remote?,
                revision: value.revision?,
            })
        }
    }
    impl :: std :: convert :: From < super :: DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant0GitCheckoutFrom > for DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant0GitCheckoutFrom { fn from (value : super :: DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant0GitCheckoutFrom) -> Self { Self { remote : Ok (value . remote) , revision : Ok (value . revision) , } } }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant1Zip {
        location: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default
        for DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant1Zip
    {
        fn default() -> Self {
            Self {
                location: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant1Zip {
        pub fn location<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.location = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for location: {}", e));
            self
        }
    }
    impl
        ::std::convert::TryFrom<
            DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant1Zip,
        > for super::DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant1Zip
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant1Zip,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                location: value.location?,
            })
        }
    }
    impl
        ::std::convert::From<
            super::DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant1Zip,
        > for DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant1Zip
    {
        fn from(
            value: super::DevfileSchemaVersion222ParentVariant0DependentProjectsItemVariant1Zip,
        ) -> Self {
            Self {
                location: Ok(value.location),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant0ProjectsItemVariant0Git {
        checkout_from: ::std::result::Result<
            ::std::option::Option<
                super::DevfileSchemaVersion222ParentVariant0ProjectsItemVariant0GitCheckoutFrom,
            >,
            ::std::string::String,
        >,
        remotes: ::std::result::Result<
            ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default for DevfileSchemaVersion222ParentVariant0ProjectsItemVariant0Git {
        fn default() -> Self {
            Self {
                checkout_from: Ok(Default::default()),
                remotes: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant0ProjectsItemVariant0Git {
        pub fn checkout_from<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::option::Option<
                    super::DevfileSchemaVersion222ParentVariant0ProjectsItemVariant0GitCheckoutFrom,
                >,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.checkout_from = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for checkout_from: {}", e));
            self
        }
        pub fn remotes<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.remotes = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for remotes: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<DevfileSchemaVersion222ParentVariant0ProjectsItemVariant0Git>
        for super::DevfileSchemaVersion222ParentVariant0ProjectsItemVariant0Git
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ParentVariant0ProjectsItemVariant0Git,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                checkout_from: value.checkout_from?,
                remotes: value.remotes?,
            })
        }
    }
    impl ::std::convert::From<super::DevfileSchemaVersion222ParentVariant0ProjectsItemVariant0Git>
        for DevfileSchemaVersion222ParentVariant0ProjectsItemVariant0Git
    {
        fn from(
            value: super::DevfileSchemaVersion222ParentVariant0ProjectsItemVariant0Git,
        ) -> Self {
            Self {
                checkout_from: Ok(value.checkout_from),
                remotes: Ok(value.remotes),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant0ProjectsItemVariant0GitCheckoutFrom {
        remote: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
        revision: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default
        for DevfileSchemaVersion222ParentVariant0ProjectsItemVariant0GitCheckoutFrom
    {
        fn default() -> Self {
            Self {
                remote: Ok(Default::default()),
                revision: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant0ProjectsItemVariant0GitCheckoutFrom {
        pub fn remote<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.remote = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for remote: {}", e));
            self
        }
        pub fn revision<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.revision = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for revision: {}", e));
            self
        }
    }
    impl
        ::std::convert::TryFrom<
            DevfileSchemaVersion222ParentVariant0ProjectsItemVariant0GitCheckoutFrom,
        > for super::DevfileSchemaVersion222ParentVariant0ProjectsItemVariant0GitCheckoutFrom
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ParentVariant0ProjectsItemVariant0GitCheckoutFrom,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                remote: value.remote?,
                revision: value.revision?,
            })
        }
    }
    impl
        ::std::convert::From<
            super::DevfileSchemaVersion222ParentVariant0ProjectsItemVariant0GitCheckoutFrom,
        > for DevfileSchemaVersion222ParentVariant0ProjectsItemVariant0GitCheckoutFrom
    {
        fn from(
            value: super::DevfileSchemaVersion222ParentVariant0ProjectsItemVariant0GitCheckoutFrom,
        ) -> Self {
            Self {
                remote: Ok(value.remote),
                revision: Ok(value.revision),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant0ProjectsItemVariant1Zip {
        location: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default for DevfileSchemaVersion222ParentVariant0ProjectsItemVariant1Zip {
        fn default() -> Self {
            Self {
                location: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant0ProjectsItemVariant1Zip {
        pub fn location<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.location = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for location: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<DevfileSchemaVersion222ParentVariant0ProjectsItemVariant1Zip>
        for super::DevfileSchemaVersion222ParentVariant0ProjectsItemVariant1Zip
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ParentVariant0ProjectsItemVariant1Zip,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                location: value.location?,
            })
        }
    }
    impl ::std::convert::From<super::DevfileSchemaVersion222ParentVariant0ProjectsItemVariant1Zip>
        for DevfileSchemaVersion222ParentVariant0ProjectsItemVariant1Zip
    {
        fn from(
            value: super::DevfileSchemaVersion222ParentVariant0ProjectsItemVariant1Zip,
        ) -> Self {
            Self {
                location: Ok(value.location),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant0Git { checkout_from : :: std :: result :: Result < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant0GitCheckoutFrom > , :: std :: string :: String > , remotes : :: std :: result :: Result < :: std :: collections :: HashMap < :: std :: string :: String , :: std :: string :: String > , :: std :: string :: String > , }
    impl ::std::default::Default
        for DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant0Git
    {
        fn default() -> Self {
            Self {
                checkout_from: Ok(Default::default()),
                remotes: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant0Git {
        pub fn checkout_from < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant0GitCheckoutFrom > > , T :: Error : :: std :: fmt :: Display ,{
            self.checkout_from = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for checkout_from: {}", e));
            self
        }
        pub fn remotes<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.remotes = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for remotes: {}", e));
            self
        }
    }
    impl
        ::std::convert::TryFrom<DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant0Git>
        for super::DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant0Git
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant0Git,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                checkout_from: value.checkout_from?,
                remotes: value.remotes?,
            })
        }
    }
    impl
        ::std::convert::From<
            super::DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant0Git,
        > for DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant0Git
    {
        fn from(
            value: super::DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant0Git,
        ) -> Self {
            Self {
                checkout_from: Ok(value.checkout_from),
                remotes: Ok(value.remotes),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant0GitCheckoutFrom {
        remote: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
        revision: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default
        for DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant0GitCheckoutFrom
    {
        fn default() -> Self {
            Self {
                remote: Ok(Default::default()),
                revision: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant0GitCheckoutFrom {
        pub fn remote<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.remote = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for remote: {}", e));
            self
        }
        pub fn revision<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.revision = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for revision: {}", e));
            self
        }
    }
    impl
        ::std::convert::TryFrom<
            DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant0GitCheckoutFrom,
        >
        for super::DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant0GitCheckoutFrom
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant0GitCheckoutFrom,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                remote: value.remote?,
                revision: value.revision?,
            })
        }
    }
    impl
        ::std::convert::From<
            super::DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant0GitCheckoutFrom,
        > for DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant0GitCheckoutFrom
    {
        fn from(
            value : super :: DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant0GitCheckoutFrom,
        ) -> Self {
            Self {
                remote: Ok(value.remote),
                revision: Ok(value.revision),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant1Zip {
        location: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default
        for DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant1Zip
    {
        fn default() -> Self {
            Self {
                location: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant1Zip {
        pub fn location<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.location = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for location: {}", e));
            self
        }
    }
    impl
        ::std::convert::TryFrom<DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant1Zip>
        for super::DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant1Zip
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant1Zip,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                location: value.location?,
            })
        }
    }
    impl
        ::std::convert::From<
            super::DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant1Zip,
        > for DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant1Zip
    {
        fn from(
            value: super::DevfileSchemaVersion222ParentVariant0StarterProjectsItemVariant1Zip,
        ) -> Self {
            Self {
                location: Ok(value.location),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant1CommandsItemVariant0Exec {
        command_line: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
        component: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
        env: ::std::result::Result<
            ::std::vec::Vec<
                super::DevfileSchemaVersion222ParentVariant1CommandsItemVariant0ExecEnvItem,
            >,
            ::std::string::String,
        >,
        group: ::std::result::Result<
            ::std::option::Option<
                super::DevfileSchemaVersion222ParentVariant1CommandsItemVariant0ExecGroup,
            >,
            ::std::string::String,
        >,
        hot_reload_capable:
            ::std::result::Result<::std::option::Option<bool>, ::std::string::String>,
        label: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
        working_dir: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default for DevfileSchemaVersion222ParentVariant1CommandsItemVariant0Exec {
        fn default() -> Self {
            Self {
                command_line: Ok(Default::default()),
                component: Ok(Default::default()),
                env: Ok(Default::default()),
                group: Ok(Default::default()),
                hot_reload_capable: Ok(Default::default()),
                label: Ok(Default::default()),
                working_dir: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant1CommandsItemVariant0Exec {
        pub fn command_line<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.command_line = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for command_line: {}", e));
            self
        }
        pub fn component<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.component = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for component: {}", e));
            self
        }
        pub fn env<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::vec::Vec<
                    super::DevfileSchemaVersion222ParentVariant1CommandsItemVariant0ExecEnvItem,
                >,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.env = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for env: {}", e));
            self
        }
        pub fn group<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::option::Option<
                    super::DevfileSchemaVersion222ParentVariant1CommandsItemVariant0ExecGroup,
                >,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.group = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for group: {}", e));
            self
        }
        pub fn hot_reload_capable<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<bool>>,
            T::Error: ::std::fmt::Display,
        {
            self.hot_reload_capable = value.try_into().map_err(|e| {
                format!(
                    "error converting supplied value for hot_reload_capable: {}",
                    e
                )
            });
            self
        }
        pub fn label<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.label = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for label: {}", e));
            self
        }
        pub fn working_dir<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.working_dir = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for working_dir: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<DevfileSchemaVersion222ParentVariant1CommandsItemVariant0Exec>
        for super::DevfileSchemaVersion222ParentVariant1CommandsItemVariant0Exec
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ParentVariant1CommandsItemVariant0Exec,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                command_line: value.command_line?,
                component: value.component?,
                env: value.env?,
                group: value.group?,
                hot_reload_capable: value.hot_reload_capable?,
                label: value.label?,
                working_dir: value.working_dir?,
            })
        }
    }
    impl ::std::convert::From<super::DevfileSchemaVersion222ParentVariant1CommandsItemVariant0Exec>
        for DevfileSchemaVersion222ParentVariant1CommandsItemVariant0Exec
    {
        fn from(
            value: super::DevfileSchemaVersion222ParentVariant1CommandsItemVariant0Exec,
        ) -> Self {
            Self {
                command_line: Ok(value.command_line),
                component: Ok(value.component),
                env: Ok(value.env),
                group: Ok(value.group),
                hot_reload_capable: Ok(value.hot_reload_capable),
                label: Ok(value.label),
                working_dir: Ok(value.working_dir),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant1CommandsItemVariant0ExecEnvItem {
        name: ::std::result::Result<::std::string::String, ::std::string::String>,
        value: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default
        for DevfileSchemaVersion222ParentVariant1CommandsItemVariant0ExecEnvItem
    {
        fn default() -> Self {
            Self {
                name: Err("no value supplied for name".to_string()),
                value: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant1CommandsItemVariant0ExecEnvItem {
        pub fn name<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::string::String>,
            T::Error: ::std::fmt::Display,
        {
            self.name = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for name: {}", e));
            self
        }
        pub fn value<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.value = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for value: {}", e));
            self
        }
    }
    impl
        ::std::convert::TryFrom<
            DevfileSchemaVersion222ParentVariant1CommandsItemVariant0ExecEnvItem,
        > for super::DevfileSchemaVersion222ParentVariant1CommandsItemVariant0ExecEnvItem
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ParentVariant1CommandsItemVariant0ExecEnvItem,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                name: value.name?,
                value: value.value?,
            })
        }
    }
    impl
        ::std::convert::From<
            super::DevfileSchemaVersion222ParentVariant1CommandsItemVariant0ExecEnvItem,
        > for DevfileSchemaVersion222ParentVariant1CommandsItemVariant0ExecEnvItem
    {
        fn from(
            value: super::DevfileSchemaVersion222ParentVariant1CommandsItemVariant0ExecEnvItem,
        ) -> Self {
            Self {
                name: Ok(value.name),
                value: Ok(value.value),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant1CommandsItemVariant0ExecGroup {
        is_default: ::std::result::Result<::std::option::Option<bool>, ::std::string::String>,
        kind: ::std::result::Result<
            ::std::option::Option<
                super::DevfileSchemaVersion222ParentVariant1CommandsItemVariant0ExecGroupKind,
            >,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default
        for DevfileSchemaVersion222ParentVariant1CommandsItemVariant0ExecGroup
    {
        fn default() -> Self {
            Self {
                is_default: Ok(Default::default()),
                kind: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant1CommandsItemVariant0ExecGroup {
        pub fn is_default<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<bool>>,
            T::Error: ::std::fmt::Display,
        {
            self.is_default = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for is_default: {}", e));
            self
        }
        pub fn kind<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::option::Option<
                    super::DevfileSchemaVersion222ParentVariant1CommandsItemVariant0ExecGroupKind,
                >,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.kind = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for kind: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<DevfileSchemaVersion222ParentVariant1CommandsItemVariant0ExecGroup>
        for super::DevfileSchemaVersion222ParentVariant1CommandsItemVariant0ExecGroup
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ParentVariant1CommandsItemVariant0ExecGroup,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                is_default: value.is_default?,
                kind: value.kind?,
            })
        }
    }
    impl
        ::std::convert::From<
            super::DevfileSchemaVersion222ParentVariant1CommandsItemVariant0ExecGroup,
        > for DevfileSchemaVersion222ParentVariant1CommandsItemVariant0ExecGroup
    {
        fn from(
            value: super::DevfileSchemaVersion222ParentVariant1CommandsItemVariant0ExecGroup,
        ) -> Self {
            Self {
                is_default: Ok(value.is_default),
                kind: Ok(value.kind),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant1CommandsItemVariant1Apply {
        component: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
        group: ::std::result::Result<
            ::std::option::Option<
                super::DevfileSchemaVersion222ParentVariant1CommandsItemVariant1ApplyGroup,
            >,
            ::std::string::String,
        >,
        label: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default for DevfileSchemaVersion222ParentVariant1CommandsItemVariant1Apply {
        fn default() -> Self {
            Self {
                component: Ok(Default::default()),
                group: Ok(Default::default()),
                label: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant1CommandsItemVariant1Apply {
        pub fn component<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.component = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for component: {}", e));
            self
        }
        pub fn group<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::option::Option<
                    super::DevfileSchemaVersion222ParentVariant1CommandsItemVariant1ApplyGroup,
                >,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.group = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for group: {}", e));
            self
        }
        pub fn label<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.label = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for label: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<DevfileSchemaVersion222ParentVariant1CommandsItemVariant1Apply>
        for super::DevfileSchemaVersion222ParentVariant1CommandsItemVariant1Apply
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ParentVariant1CommandsItemVariant1Apply,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                component: value.component?,
                group: value.group?,
                label: value.label?,
            })
        }
    }
    impl ::std::convert::From<super::DevfileSchemaVersion222ParentVariant1CommandsItemVariant1Apply>
        for DevfileSchemaVersion222ParentVariant1CommandsItemVariant1Apply
    {
        fn from(
            value: super::DevfileSchemaVersion222ParentVariant1CommandsItemVariant1Apply,
        ) -> Self {
            Self {
                component: Ok(value.component),
                group: Ok(value.group),
                label: Ok(value.label),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant1CommandsItemVariant1ApplyGroup {
        is_default: ::std::result::Result<::std::option::Option<bool>, ::std::string::String>,
        kind: ::std::result::Result<
            ::std::option::Option<
                super::DevfileSchemaVersion222ParentVariant1CommandsItemVariant1ApplyGroupKind,
            >,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default
        for DevfileSchemaVersion222ParentVariant1CommandsItemVariant1ApplyGroup
    {
        fn default() -> Self {
            Self {
                is_default: Ok(Default::default()),
                kind: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant1CommandsItemVariant1ApplyGroup {
        pub fn is_default<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<bool>>,
            T::Error: ::std::fmt::Display,
        {
            self.is_default = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for is_default: {}", e));
            self
        }
        pub fn kind<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::option::Option<
                    super::DevfileSchemaVersion222ParentVariant1CommandsItemVariant1ApplyGroupKind,
                >,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.kind = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for kind: {}", e));
            self
        }
    }
    impl
        ::std::convert::TryFrom<DevfileSchemaVersion222ParentVariant1CommandsItemVariant1ApplyGroup>
        for super::DevfileSchemaVersion222ParentVariant1CommandsItemVariant1ApplyGroup
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ParentVariant1CommandsItemVariant1ApplyGroup,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                is_default: value.is_default?,
                kind: value.kind?,
            })
        }
    }
    impl
        ::std::convert::From<
            super::DevfileSchemaVersion222ParentVariant1CommandsItemVariant1ApplyGroup,
        > for DevfileSchemaVersion222ParentVariant1CommandsItemVariant1ApplyGroup
    {
        fn from(
            value: super::DevfileSchemaVersion222ParentVariant1CommandsItemVariant1ApplyGroup,
        ) -> Self {
            Self {
                is_default: Ok(value.is_default),
                kind: Ok(value.kind),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant1CommandsItemVariant2Composite {
        commands:
            ::std::result::Result<::std::vec::Vec<::std::string::String>, ::std::string::String>,
        group: ::std::result::Result<
            ::std::option::Option<
                super::DevfileSchemaVersion222ParentVariant1CommandsItemVariant2CompositeGroup,
            >,
            ::std::string::String,
        >,
        label: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
        parallel: ::std::result::Result<::std::option::Option<bool>, ::std::string::String>,
    }
    impl ::std::default::Default
        for DevfileSchemaVersion222ParentVariant1CommandsItemVariant2Composite
    {
        fn default() -> Self {
            Self {
                commands: Ok(Default::default()),
                group: Ok(Default::default()),
                label: Ok(Default::default()),
                parallel: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant1CommandsItemVariant2Composite {
        pub fn commands<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::vec::Vec<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.commands = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for commands: {}", e));
            self
        }
        pub fn group<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::option::Option<
                    super::DevfileSchemaVersion222ParentVariant1CommandsItemVariant2CompositeGroup,
                >,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.group = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for group: {}", e));
            self
        }
        pub fn label<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.label = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for label: {}", e));
            self
        }
        pub fn parallel<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<bool>>,
            T::Error: ::std::fmt::Display,
        {
            self.parallel = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for parallel: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<DevfileSchemaVersion222ParentVariant1CommandsItemVariant2Composite>
        for super::DevfileSchemaVersion222ParentVariant1CommandsItemVariant2Composite
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ParentVariant1CommandsItemVariant2Composite,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                commands: value.commands?,
                group: value.group?,
                label: value.label?,
                parallel: value.parallel?,
            })
        }
    }
    impl
        ::std::convert::From<
            super::DevfileSchemaVersion222ParentVariant1CommandsItemVariant2Composite,
        > for DevfileSchemaVersion222ParentVariant1CommandsItemVariant2Composite
    {
        fn from(
            value: super::DevfileSchemaVersion222ParentVariant1CommandsItemVariant2Composite,
        ) -> Self {
            Self {
                commands: Ok(value.commands),
                group: Ok(value.group),
                label: Ok(value.label),
                parallel: Ok(value.parallel),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant1CommandsItemVariant2CompositeGroup {
        is_default: ::std::result::Result<::std::option::Option<bool>, ::std::string::String>,
        kind: ::std::result::Result<
            ::std::option::Option<
                super::DevfileSchemaVersion222ParentVariant1CommandsItemVariant2CompositeGroupKind,
            >,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default
        for DevfileSchemaVersion222ParentVariant1CommandsItemVariant2CompositeGroup
    {
        fn default() -> Self {
            Self {
                is_default: Ok(Default::default()),
                kind: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant1CommandsItemVariant2CompositeGroup {
        pub fn is_default<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<bool>>,
            T::Error: ::std::fmt::Display,
        {
            self.is_default = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for is_default: {}", e));
            self
        }        pub fn kind < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant1CommandsItemVariant2CompositeGroupKind > > , T :: Error : :: std :: fmt :: Display ,{
            self.kind = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for kind: {}", e));
            self
        }
    }
    impl
        ::std::convert::TryFrom<
            DevfileSchemaVersion222ParentVariant1CommandsItemVariant2CompositeGroup,
        > for super::DevfileSchemaVersion222ParentVariant1CommandsItemVariant2CompositeGroup
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ParentVariant1CommandsItemVariant2CompositeGroup,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                is_default: value.is_default?,
                kind: value.kind?,
            })
        }
    }
    impl
        ::std::convert::From<
            super::DevfileSchemaVersion222ParentVariant1CommandsItemVariant2CompositeGroup,
        > for DevfileSchemaVersion222ParentVariant1CommandsItemVariant2CompositeGroup
    {
        fn from(
            value: super::DevfileSchemaVersion222ParentVariant1CommandsItemVariant2CompositeGroup,
        ) -> Self {
            Self {
                is_default: Ok(value.is_default),
                kind: Ok(value.kind),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0Container { annotation : :: std :: result :: Result < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerAnnotation > , :: std :: string :: String > , args : :: std :: result :: Result < :: std :: vec :: Vec < :: std :: string :: String > , :: std :: string :: String > , command : :: std :: result :: Result < :: std :: vec :: Vec < :: std :: string :: String > , :: std :: string :: String > , cpu_limit : :: std :: result :: Result < :: std :: option :: Option < :: std :: string :: String > , :: std :: string :: String > , cpu_request : :: std :: result :: Result < :: std :: option :: Option < :: std :: string :: String > , :: std :: string :: String > , dedicated_pod : :: std :: result :: Result < :: std :: option :: Option < bool > , :: std :: string :: String > , endpoints : :: std :: result :: Result < :: std :: vec :: Vec < super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEndpointsItem > , :: std :: string :: String > , env : :: std :: result :: Result < :: std :: vec :: Vec < super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEnvItem > , :: std :: string :: String > , image : :: std :: result :: Result < :: std :: option :: Option < :: std :: string :: String > , :: std :: string :: String > , memory_limit : :: std :: result :: Result < :: std :: option :: Option < :: std :: string :: String > , :: std :: string :: String > , memory_request : :: std :: result :: Result < :: std :: option :: Option < :: std :: string :: String > , :: std :: string :: String > , mount_sources : :: std :: result :: Result < :: std :: option :: Option < bool > , :: std :: string :: String > , source_mapping : :: std :: result :: Result < :: std :: option :: Option < :: std :: string :: String > , :: std :: string :: String > , volume_mounts : :: std :: result :: Result < :: std :: vec :: Vec < super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerVolumeMountsItem > , :: std :: string :: String > , }
    impl ::std::default::Default
        for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0Container
    {
        fn default() -> Self {
            Self {
                annotation: Ok(Default::default()),
                args: Ok(Default::default()),
                command: Ok(Default::default()),
                cpu_limit: Ok(Default::default()),
                cpu_request: Ok(Default::default()),
                dedicated_pod: Ok(Default::default()),
                endpoints: Ok(Default::default()),
                env: Ok(Default::default()),
                image: Ok(Default::default()),
                memory_limit: Ok(Default::default()),
                memory_request: Ok(Default::default()),
                mount_sources: Ok(Default::default()),
                source_mapping: Ok(Default::default()),
                volume_mounts: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0Container {
        pub fn annotation < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerAnnotation > > , T :: Error : :: std :: fmt :: Display ,{
            self.annotation = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for annotation: {}", e));
            self
        }
        pub fn args<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::vec::Vec<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.args = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for args: {}", e));
            self
        }
        pub fn command<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::vec::Vec<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.command = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for command: {}", e));
            self
        }
        pub fn cpu_limit<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.cpu_limit = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for cpu_limit: {}", e));
            self
        }
        pub fn cpu_request<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.cpu_request = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for cpu_request: {}", e));
            self
        }
        pub fn dedicated_pod<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<bool>>,
            T::Error: ::std::fmt::Display,
        {
            self.dedicated_pod = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for dedicated_pod: {}", e));
            self
        }        pub fn endpoints < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: vec :: Vec < super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEndpointsItem > > , T :: Error : :: std :: fmt :: Display ,{
            self.endpoints = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for endpoints: {}", e));
            self
        }        pub fn env < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: vec :: Vec < super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEnvItem > > , T :: Error : :: std :: fmt :: Display ,{
            self.env = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for env: {}", e));
            self
        }
        pub fn image<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.image = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for image: {}", e));
            self
        }
        pub fn memory_limit<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.memory_limit = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for memory_limit: {}", e));
            self
        }
        pub fn memory_request<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.memory_request = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for memory_request: {}", e));
            self
        }
        pub fn mount_sources<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<bool>>,
            T::Error: ::std::fmt::Display,
        {
            self.mount_sources = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for mount_sources: {}", e));
            self
        }
        pub fn source_mapping<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.source_mapping = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for source_mapping: {}", e));
            self
        }        pub fn volume_mounts < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: vec :: Vec < super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerVolumeMountsItem > > , T :: Error : :: std :: fmt :: Display ,{
            self.volume_mounts = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for volume_mounts: {}", e));
            self
        }
    }
    impl
        ::std::convert::TryFrom<
            DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0Container,
        > for super::DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0Container
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0Container,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                annotation: value.annotation?,
                args: value.args?,
                command: value.command?,
                cpu_limit: value.cpu_limit?,
                cpu_request: value.cpu_request?,
                dedicated_pod: value.dedicated_pod?,
                endpoints: value.endpoints?,
                env: value.env?,
                image: value.image?,
                memory_limit: value.memory_limit?,
                memory_request: value.memory_request?,
                mount_sources: value.mount_sources?,
                source_mapping: value.source_mapping?,
                volume_mounts: value.volume_mounts?,
            })
        }
    }
    impl
        ::std::convert::From<
            super::DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0Container,
        > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0Container
    {
        fn from(
            value: super::DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0Container,
        ) -> Self {
            Self {
                annotation: Ok(value.annotation),
                args: Ok(value.args),
                command: Ok(value.command),
                cpu_limit: Ok(value.cpu_limit),
                cpu_request: Ok(value.cpu_request),
                dedicated_pod: Ok(value.dedicated_pod),
                endpoints: Ok(value.endpoints),
                env: Ok(value.env),
                image: Ok(value.image),
                memory_limit: Ok(value.memory_limit),
                memory_request: Ok(value.memory_request),
                mount_sources: Ok(value.mount_sources),
                source_mapping: Ok(value.source_mapping),
                volume_mounts: Ok(value.volume_mounts),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerAnnotation {
        deployment: ::std::result::Result<
            ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            ::std::string::String,
        >,
        service: ::std::result::Result<
            ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default
        for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerAnnotation
    {
        fn default() -> Self {
            Self {
                deployment: Ok(Default::default()),
                service: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerAnnotation {
        pub fn deployment<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.deployment = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for deployment: {}", e));
            self
        }
        pub fn service<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.service = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for service: {}", e));
            self
        }
    }
    impl
        ::std::convert::TryFrom<
            DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerAnnotation,
        >
        for super::DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerAnnotation
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerAnnotation,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                deployment: value.deployment?,
                service: value.service?,
            })
        }
    }
    impl
        ::std::convert::From<
            super::DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerAnnotation,
        > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerAnnotation
    {
        fn from(
            value : super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerAnnotation,
        ) -> Self {
            Self {
                deployment: Ok(value.deployment),
                service: Ok(value.service),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEndpointsItem { annotation : :: std :: result :: Result < :: std :: collections :: HashMap < :: std :: string :: String , :: std :: string :: String > , :: std :: string :: String > , attributes : :: std :: result :: Result < :: serde_json :: Map < :: std :: string :: String , :: serde_json :: Value > , :: std :: string :: String > , exposure : :: std :: result :: Result < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEndpointsItemExposure > , :: std :: string :: String > , name : :: std :: result :: Result < super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEndpointsItemName , :: std :: string :: String > , path : :: std :: result :: Result < :: std :: option :: Option < :: std :: string :: String > , :: std :: string :: String > , protocol : :: std :: result :: Result < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEndpointsItemProtocol > , :: std :: string :: String > , secure : :: std :: result :: Result < :: std :: option :: Option < bool > , :: std :: string :: String > , target_port : :: std :: result :: Result < :: std :: option :: Option < i64 > , :: std :: string :: String > , }
    impl ::std::default::Default
        for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEndpointsItem
    {
        fn default() -> Self {
            Self {
                annotation: Ok(Default::default()),
                attributes: Ok(Default::default()),
                exposure: Ok(Default::default()),
                name: Err("no value supplied for name".to_string()),
                path: Ok(Default::default()),
                protocol: Ok(Default::default()),
                secure: Ok(Default::default()),
                target_port: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEndpointsItem {
        pub fn annotation<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.annotation = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for annotation: {}", e));
            self
        }
        pub fn attributes<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::serde_json::Map<::std::string::String, ::serde_json::Value>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.attributes = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for attributes: {}", e));
            self
        }        pub fn exposure < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEndpointsItemExposure > > , T :: Error : :: std :: fmt :: Display ,{
            self.exposure = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for exposure: {}", e));
            self
        }        pub fn name < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEndpointsItemName > , T :: Error : :: std :: fmt :: Display ,{
            self.name = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for name: {}", e));
            self
        }
        pub fn path<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.path = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for path: {}", e));
            self
        }        pub fn protocol < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEndpointsItemProtocol > > , T :: Error : :: std :: fmt :: Display ,{
            self.protocol = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for protocol: {}", e));
            self
        }
        pub fn secure<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<bool>>,
            T::Error: ::std::fmt::Display,
        {
            self.secure = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for secure: {}", e));
            self
        }
        pub fn target_port<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<i64>>,
            T::Error: ::std::fmt::Display,
        {
            self.target_port = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for target_port: {}", e));
            self
        }
    }
    impl
        ::std::convert::TryFrom<
            DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEndpointsItem,
        >
        for super::DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEndpointsItem
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value : DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEndpointsItem,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                annotation: value.annotation?,
                attributes: value.attributes?,
                exposure: value.exposure?,
                name: value.name?,
                path: value.path?,
                protocol: value.protocol?,
                secure: value.secure?,
                target_port: value.target_port?,
            })
        }
    }
    impl :: std :: convert :: From < super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEndpointsItem > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEndpointsItem { fn from (value : super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEndpointsItem) -> Self { Self { annotation : Ok (value . annotation) , attributes : Ok (value . attributes) , exposure : Ok (value . exposure) , name : Ok (value . name) , path : Ok (value . path) , protocol : Ok (value . protocol) , secure : Ok (value . secure) , target_port : Ok (value . target_port) , } } }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEnvItem {
        name: ::std::result::Result<::std::string::String, ::std::string::String>,
        value: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default
        for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEnvItem
    {
        fn default() -> Self {
            Self {
                name: Err("no value supplied for name".to_string()),
                value: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEnvItem {
        pub fn name<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::string::String>,
            T::Error: ::std::fmt::Display,
        {
            self.name = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for name: {}", e));
            self
        }
        pub fn value<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.value = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for value: {}", e));
            self
        }
    }
    impl
        ::std::convert::TryFrom<
            DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEnvItem,
        > for super::DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEnvItem
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEnvItem,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                name: value.name?,
                value: value.value?,
            })
        }
    }
    impl
        ::std::convert::From<
            super::DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEnvItem,
        > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEnvItem
    {
        fn from(
            value : super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerEnvItem,
        ) -> Self {
            Self {
                name: Ok(value.name),
                value: Ok(value.value),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerVolumeMountsItem { name : :: std :: result :: Result < super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerVolumeMountsItemName , :: std :: string :: String > , path : :: std :: result :: Result < :: std :: option :: Option < :: std :: string :: String > , :: std :: string :: String > , }
    impl ::std::default::Default
        for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerVolumeMountsItem
    {
        fn default() -> Self {
            Self {
                name: Err("no value supplied for name".to_string()),
                path: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerVolumeMountsItem {
        pub fn name < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerVolumeMountsItemName > , T :: Error : :: std :: fmt :: Display ,{
            self.name = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for name: {}", e));
            self
        }
        pub fn path<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.path = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for path: {}", e));
            self
        }
    }
    impl :: std :: convert :: TryFrom < DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerVolumeMountsItem > for super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerVolumeMountsItem { type Error = super :: error :: ConversionError ; fn try_from (value : DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerVolumeMountsItem) -> :: std :: result :: Result < Self , super :: error :: ConversionError > { Ok (Self { name : value . name ? , path : value . path ? , }) } }
    impl :: std :: convert :: From < super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerVolumeMountsItem > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerVolumeMountsItem { fn from (value : super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant0ContainerVolumeMountsItem) -> Self { Self { name : Ok (value . name) , path : Ok (value . path) , } } }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant0EndpointsItem { annotation : :: std :: result :: Result < :: std :: collections :: HashMap < :: std :: string :: String , :: std :: string :: String > , :: std :: string :: String > , attributes : :: std :: result :: Result < :: serde_json :: Map < :: std :: string :: String , :: serde_json :: Value > , :: std :: string :: String > , exposure : :: std :: result :: Result < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant0EndpointsItemExposure > , :: std :: string :: String > , name : :: std :: result :: Result < super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant0EndpointsItemName , :: std :: string :: String > , path : :: std :: result :: Result < :: std :: option :: Option < :: std :: string :: String > , :: std :: string :: String > , protocol : :: std :: result :: Result < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant0EndpointsItemProtocol > , :: std :: string :: String > , secure : :: std :: result :: Result < :: std :: option :: Option < bool > , :: std :: string :: String > , target_port : :: std :: result :: Result < :: std :: option :: Option < i64 > , :: std :: string :: String > , }
    impl :: std :: default :: Default for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant0EndpointsItem { fn default () -> Self { Self { annotation : Ok (Default :: default ()) , attributes : Ok (Default :: default ()) , exposure : Ok (Default :: default ()) , name : Err ("no value supplied for name" . to_string ()) , path : Ok (Default :: default ()) , protocol : Ok (Default :: default ()) , secure : Ok (Default :: default ()) , target_port : Ok (Default :: default ()) , } } }
    impl DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant0EndpointsItem {
        pub fn annotation<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.annotation = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for annotation: {}", e));
            self
        }
        pub fn attributes<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::serde_json::Map<::std::string::String, ::serde_json::Value>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.attributes = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for attributes: {}", e));
            self
        }        pub fn exposure < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant0EndpointsItemExposure > > , T :: Error : :: std :: fmt :: Display ,{
            self.exposure = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for exposure: {}", e));
            self
        }        pub fn name < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant0EndpointsItemName > , T :: Error : :: std :: fmt :: Display ,{
            self.name = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for name: {}", e));
            self
        }
        pub fn path<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.path = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for path: {}", e));
            self
        }        pub fn protocol < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant0EndpointsItemProtocol > > , T :: Error : :: std :: fmt :: Display ,{
            self.protocol = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for protocol: {}", e));
            self
        }
        pub fn secure<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<bool>>,
            T::Error: ::std::fmt::Display,
        {
            self.secure = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for secure: {}", e));
            self
        }
        pub fn target_port<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<i64>>,
            T::Error: ::std::fmt::Display,
        {
            self.target_port = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for target_port: {}", e));
            self
        }
    }
    impl :: std :: convert :: TryFrom < DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant0EndpointsItem > for super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant0EndpointsItem { type Error = super :: error :: ConversionError ; fn try_from (value : DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant0EndpointsItem) -> :: std :: result :: Result < Self , super :: error :: ConversionError > { Ok (Self { annotation : value . annotation ? , attributes : value . attributes ? , exposure : value . exposure ? , name : value . name ? , path : value . path ? , protocol : value . protocol ? , secure : value . secure ? , target_port : value . target_port ? , }) } }
    impl :: std :: convert :: From < super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant0EndpointsItem > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant0EndpointsItem { fn from (value : super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant0EndpointsItem) -> Self { Self { annotation : Ok (value . annotation) , attributes : Ok (value . attributes) , exposure : Ok (value . exposure) , name : Ok (value . name) , path : Ok (value . path) , protocol : Ok (value . protocol) , secure : Ok (value . secure) , target_port : Ok (value . target_port) , } } }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant1EndpointsItem { annotation : :: std :: result :: Result < :: std :: collections :: HashMap < :: std :: string :: String , :: std :: string :: String > , :: std :: string :: String > , attributes : :: std :: result :: Result < :: serde_json :: Map < :: std :: string :: String , :: serde_json :: Value > , :: std :: string :: String > , exposure : :: std :: result :: Result < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant1EndpointsItemExposure > , :: std :: string :: String > , name : :: std :: result :: Result < super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant1EndpointsItemName , :: std :: string :: String > , path : :: std :: result :: Result < :: std :: option :: Option < :: std :: string :: String > , :: std :: string :: String > , protocol : :: std :: result :: Result < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant1EndpointsItemProtocol > , :: std :: string :: String > , secure : :: std :: result :: Result < :: std :: option :: Option < bool > , :: std :: string :: String > , target_port : :: std :: result :: Result < :: std :: option :: Option < i64 > , :: std :: string :: String > , }
    impl :: std :: default :: Default for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant1EndpointsItem { fn default () -> Self { Self { annotation : Ok (Default :: default ()) , attributes : Ok (Default :: default ()) , exposure : Ok (Default :: default ()) , name : Err ("no value supplied for name" . to_string ()) , path : Ok (Default :: default ()) , protocol : Ok (Default :: default ()) , secure : Ok (Default :: default ()) , target_port : Ok (Default :: default ()) , } } }
    impl DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant1EndpointsItem {
        pub fn annotation<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.annotation = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for annotation: {}", e));
            self
        }
        pub fn attributes<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::serde_json::Map<::std::string::String, ::serde_json::Value>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.attributes = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for attributes: {}", e));
            self
        }        pub fn exposure < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant1EndpointsItemExposure > > , T :: Error : :: std :: fmt :: Display ,{
            self.exposure = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for exposure: {}", e));
            self
        }        pub fn name < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant1EndpointsItemName > , T :: Error : :: std :: fmt :: Display ,{
            self.name = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for name: {}", e));
            self
        }
        pub fn path<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.path = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for path: {}", e));
            self
        }        pub fn protocol < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant1EndpointsItemProtocol > > , T :: Error : :: std :: fmt :: Display ,{
            self.protocol = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for protocol: {}", e));
            self
        }
        pub fn secure<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<bool>>,
            T::Error: ::std::fmt::Display,
        {
            self.secure = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for secure: {}", e));
            self
        }
        pub fn target_port<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<i64>>,
            T::Error: ::std::fmt::Display,
        {
            self.target_port = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for target_port: {}", e));
            self
        }
    }
    impl :: std :: convert :: TryFrom < DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant1EndpointsItem > for super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant1EndpointsItem { type Error = super :: error :: ConversionError ; fn try_from (value : DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant1EndpointsItem) -> :: std :: result :: Result < Self , super :: error :: ConversionError > { Ok (Self { annotation : value . annotation ? , attributes : value . attributes ? , exposure : value . exposure ? , name : value . name ? , path : value . path ? , protocol : value . protocol ? , secure : value . secure ? , target_port : value . target_port ? , }) } }
    impl :: std :: convert :: From < super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant1EndpointsItem > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant1EndpointsItem { fn from (value : super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant1KubernetesVariant1EndpointsItem) -> Self { Self { annotation : Ok (value . annotation) , attributes : Ok (value . attributes) , exposure : Ok (value . exposure) , name : Ok (value . name) , path : Ok (value . path) , protocol : Ok (value . protocol) , secure : Ok (value . secure) , target_port : Ok (value . target_port) , } } }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant0EndpointsItem { annotation : :: std :: result :: Result < :: std :: collections :: HashMap < :: std :: string :: String , :: std :: string :: String > , :: std :: string :: String > , attributes : :: std :: result :: Result < :: serde_json :: Map < :: std :: string :: String , :: serde_json :: Value > , :: std :: string :: String > , exposure : :: std :: result :: Result < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant0EndpointsItemExposure > , :: std :: string :: String > , name : :: std :: result :: Result < super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant0EndpointsItemName , :: std :: string :: String > , path : :: std :: result :: Result < :: std :: option :: Option < :: std :: string :: String > , :: std :: string :: String > , protocol : :: std :: result :: Result < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant0EndpointsItemProtocol > , :: std :: string :: String > , secure : :: std :: result :: Result < :: std :: option :: Option < bool > , :: std :: string :: String > , target_port : :: std :: result :: Result < :: std :: option :: Option < i64 > , :: std :: string :: String > , }
    impl :: std :: default :: Default for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant0EndpointsItem { fn default () -> Self { Self { annotation : Ok (Default :: default ()) , attributes : Ok (Default :: default ()) , exposure : Ok (Default :: default ()) , name : Err ("no value supplied for name" . to_string ()) , path : Ok (Default :: default ()) , protocol : Ok (Default :: default ()) , secure : Ok (Default :: default ()) , target_port : Ok (Default :: default ()) , } } }
    impl DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant0EndpointsItem {
        pub fn annotation<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.annotation = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for annotation: {}", e));
            self
        }
        pub fn attributes<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::serde_json::Map<::std::string::String, ::serde_json::Value>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.attributes = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for attributes: {}", e));
            self
        }        pub fn exposure < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant0EndpointsItemExposure > > , T :: Error : :: std :: fmt :: Display ,{
            self.exposure = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for exposure: {}", e));
            self
        }        pub fn name < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant0EndpointsItemName > , T :: Error : :: std :: fmt :: Display ,{
            self.name = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for name: {}", e));
            self
        }
        pub fn path<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.path = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for path: {}", e));
            self
        }        pub fn protocol < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant0EndpointsItemProtocol > > , T :: Error : :: std :: fmt :: Display ,{
            self.protocol = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for protocol: {}", e));
            self
        }
        pub fn secure<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<bool>>,
            T::Error: ::std::fmt::Display,
        {
            self.secure = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for secure: {}", e));
            self
        }
        pub fn target_port<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<i64>>,
            T::Error: ::std::fmt::Display,
        {
            self.target_port = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for target_port: {}", e));
            self
        }
    }
    impl :: std :: convert :: TryFrom < DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant0EndpointsItem > for super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant0EndpointsItem { type Error = super :: error :: ConversionError ; fn try_from (value : DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant0EndpointsItem) -> :: std :: result :: Result < Self , super :: error :: ConversionError > { Ok (Self { annotation : value . annotation ? , attributes : value . attributes ? , exposure : value . exposure ? , name : value . name ? , path : value . path ? , protocol : value . protocol ? , secure : value . secure ? , target_port : value . target_port ? , }) } }
    impl :: std :: convert :: From < super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant0EndpointsItem > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant0EndpointsItem { fn from (value : super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant0EndpointsItem) -> Self { Self { annotation : Ok (value . annotation) , attributes : Ok (value . attributes) , exposure : Ok (value . exposure) , name : Ok (value . name) , path : Ok (value . path) , protocol : Ok (value . protocol) , secure : Ok (value . secure) , target_port : Ok (value . target_port) , } } }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant1EndpointsItem { annotation : :: std :: result :: Result < :: std :: collections :: HashMap < :: std :: string :: String , :: std :: string :: String > , :: std :: string :: String > , attributes : :: std :: result :: Result < :: serde_json :: Map < :: std :: string :: String , :: serde_json :: Value > , :: std :: string :: String > , exposure : :: std :: result :: Result < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant1EndpointsItemExposure > , :: std :: string :: String > , name : :: std :: result :: Result < super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant1EndpointsItemName , :: std :: string :: String > , path : :: std :: result :: Result < :: std :: option :: Option < :: std :: string :: String > , :: std :: string :: String > , protocol : :: std :: result :: Result < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant1EndpointsItemProtocol > , :: std :: string :: String > , secure : :: std :: result :: Result < :: std :: option :: Option < bool > , :: std :: string :: String > , target_port : :: std :: result :: Result < :: std :: option :: Option < i64 > , :: std :: string :: String > , }
    impl :: std :: default :: Default for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant1EndpointsItem { fn default () -> Self { Self { annotation : Ok (Default :: default ()) , attributes : Ok (Default :: default ()) , exposure : Ok (Default :: default ()) , name : Err ("no value supplied for name" . to_string ()) , path : Ok (Default :: default ()) , protocol : Ok (Default :: default ()) , secure : Ok (Default :: default ()) , target_port : Ok (Default :: default ()) , } } }
    impl DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant1EndpointsItem {
        pub fn annotation<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.annotation = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for annotation: {}", e));
            self
        }
        pub fn attributes<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::serde_json::Map<::std::string::String, ::serde_json::Value>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.attributes = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for attributes: {}", e));
            self
        }        pub fn exposure < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant1EndpointsItemExposure > > , T :: Error : :: std :: fmt :: Display ,{
            self.exposure = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for exposure: {}", e));
            self
        }        pub fn name < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant1EndpointsItemName > , T :: Error : :: std :: fmt :: Display ,{
            self.name = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for name: {}", e));
            self
        }
        pub fn path<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.path = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for path: {}", e));
            self
        }        pub fn protocol < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant1EndpointsItemProtocol > > , T :: Error : :: std :: fmt :: Display ,{
            self.protocol = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for protocol: {}", e));
            self
        }
        pub fn secure<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<bool>>,
            T::Error: ::std::fmt::Display,
        {
            self.secure = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for secure: {}", e));
            self
        }
        pub fn target_port<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<i64>>,
            T::Error: ::std::fmt::Display,
        {
            self.target_port = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for target_port: {}", e));
            self
        }
    }
    impl :: std :: convert :: TryFrom < DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant1EndpointsItem > for super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant1EndpointsItem { type Error = super :: error :: ConversionError ; fn try_from (value : DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant1EndpointsItem) -> :: std :: result :: Result < Self , super :: error :: ConversionError > { Ok (Self { annotation : value . annotation ? , attributes : value . attributes ? , exposure : value . exposure ? , name : value . name ? , path : value . path ? , protocol : value . protocol ? , secure : value . secure ? , target_port : value . target_port ? , }) } }
    impl :: std :: convert :: From < super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant1EndpointsItem > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant1EndpointsItem { fn from (value : super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant2OpenshiftVariant1EndpointsItem) -> Self { Self { annotation : Ok (value . annotation) , attributes : Ok (value . attributes) , exposure : Ok (value . exposure) , name : Ok (value . name) , path : Ok (value . path) , protocol : Ok (value . protocol) , secure : Ok (value . secure) , target_port : Ok (value . target_port) , } } }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant1ComponentsItemVariant3Volume {
        ephemeral: ::std::result::Result<::std::option::Option<bool>, ::std::string::String>,
        size: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant3Volume {
        fn default() -> Self {
            Self {
                ephemeral: Ok(Default::default()),
                size: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant1ComponentsItemVariant3Volume {
        pub fn ephemeral<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<bool>>,
            T::Error: ::std::fmt::Display,
        {
            self.ephemeral = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for ephemeral: {}", e));
            self
        }
        pub fn size<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.size = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for size: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<DevfileSchemaVersion222ParentVariant1ComponentsItemVariant3Volume>
        for super::DevfileSchemaVersion222ParentVariant1ComponentsItemVariant3Volume
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant3Volume,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                ephemeral: value.ephemeral?,
                size: value.size?,
            })
        }
    }
    impl
        ::std::convert::From<
            super::DevfileSchemaVersion222ParentVariant1ComponentsItemVariant3Volume,
        > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant3Volume
    {
        fn from(
            value: super::DevfileSchemaVersion222ParentVariant1ComponentsItemVariant3Volume,
        ) -> Self {
            Self {
                ephemeral: Ok(value.ephemeral),
                size: Ok(value.size),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4ImageVariant0DockerfileVariant1DevfileRegistry
    {
        id: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
        registry_url: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
    }
    impl :: std :: default :: Default for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4ImageVariant0DockerfileVariant1DevfileRegistry { fn default () -> Self { Self { id : Ok (Default :: default ()) , registry_url : Ok (Default :: default ()) , } } }
    impl DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4ImageVariant0DockerfileVariant1DevfileRegistry { pub fn id < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: option :: Option < :: std :: string :: String > > , T :: Error : :: std :: fmt :: Display , { self . id = value . try_into () . map_err (| e | format ! ("error converting supplied value for id: {}" , e)) ; self } pub fn registry_url < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: option :: Option < :: std :: string :: String > > , T :: Error : :: std :: fmt :: Display , { self . registry_url = value . try_into () . map_err (| e | format ! ("error converting supplied value for registry_url: {}" , e)) ; self } }
    impl :: std :: convert :: TryFrom < DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4ImageVariant0DockerfileVariant1DevfileRegistry > for super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4ImageVariant0DockerfileVariant1DevfileRegistry { type Error = super :: error :: ConversionError ; fn try_from (value : DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4ImageVariant0DockerfileVariant1DevfileRegistry) -> :: std :: result :: Result < Self , super :: error :: ConversionError > { Ok (Self { id : value . id ? , registry_url : value . registry_url ? , }) } }
    impl :: std :: convert :: From < super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4ImageVariant0DockerfileVariant1DevfileRegistry > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4ImageVariant0DockerfileVariant1DevfileRegistry { fn from (value : super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4ImageVariant0DockerfileVariant1DevfileRegistry) -> Self { Self { id : Ok (value . id) , registry_url : Ok (value . registry_url) , } } }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4ImageVariant0DockerfileVariant2Git { checkout_from : :: std :: result :: Result < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4ImageVariant0DockerfileVariant2GitCheckoutFrom > , :: std :: string :: String > , file_location : :: std :: result :: Result < :: std :: option :: Option < :: std :: string :: String > , :: std :: string :: String > , remotes : :: std :: result :: Result < :: std :: collections :: HashMap < :: std :: string :: String , :: std :: string :: String > , :: std :: string :: String > , }
    impl :: std :: default :: Default for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4ImageVariant0DockerfileVariant2Git { fn default () -> Self { Self { checkout_from : Ok (Default :: default ()) , file_location : Ok (Default :: default ()) , remotes : Ok (Default :: default ()) , } } }
    impl DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4ImageVariant0DockerfileVariant2Git {
        pub fn checkout_from < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4ImageVariant0DockerfileVariant2GitCheckoutFrom > > , T :: Error : :: std :: fmt :: Display ,{
            self.checkout_from = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for checkout_from: {}", e));
            self
        }
        pub fn file_location<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.file_location = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for file_location: {}", e));
            self
        }
        pub fn remotes<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.remotes = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for remotes: {}", e));
            self
        }
    }
    impl :: std :: convert :: TryFrom < DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4ImageVariant0DockerfileVariant2Git > for super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4ImageVariant0DockerfileVariant2Git { type Error = super :: error :: ConversionError ; fn try_from (value : DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4ImageVariant0DockerfileVariant2Git) -> :: std :: result :: Result < Self , super :: error :: ConversionError > { Ok (Self { checkout_from : value . checkout_from ? , file_location : value . file_location ? , remotes : value . remotes ? , }) } }
    impl :: std :: convert :: From < super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4ImageVariant0DockerfileVariant2Git > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4ImageVariant0DockerfileVariant2Git { fn from (value : super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4ImageVariant0DockerfileVariant2Git) -> Self { Self { checkout_from : Ok (value . checkout_from) , file_location : Ok (value . file_location) , remotes : Ok (value . remotes) , } } }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4ImageVariant0DockerfileVariant2GitCheckoutFrom
    {
        remote: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
        revision: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
    }
    impl :: std :: default :: Default for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4ImageVariant0DockerfileVariant2GitCheckoutFrom { fn default () -> Self { Self { remote : Ok (Default :: default ()) , revision : Ok (Default :: default ()) , } } }
    impl DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4ImageVariant0DockerfileVariant2GitCheckoutFrom { pub fn remote < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: option :: Option < :: std :: string :: String > > , T :: Error : :: std :: fmt :: Display , { self . remote = value . try_into () . map_err (| e | format ! ("error converting supplied value for remote: {}" , e)) ; self } pub fn revision < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: option :: Option < :: std :: string :: String > > , T :: Error : :: std :: fmt :: Display , { self . revision = value . try_into () . map_err (| e | format ! ("error converting supplied value for revision: {}" , e)) ; self } }
    impl :: std :: convert :: TryFrom < DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4ImageVariant0DockerfileVariant2GitCheckoutFrom > for super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4ImageVariant0DockerfileVariant2GitCheckoutFrom { type Error = super :: error :: ConversionError ; fn try_from (value : DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4ImageVariant0DockerfileVariant2GitCheckoutFrom) -> :: std :: result :: Result < Self , super :: error :: ConversionError > { Ok (Self { remote : value . remote ? , revision : value . revision ? , }) } }
    impl :: std :: convert :: From < super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4ImageVariant0DockerfileVariant2GitCheckoutFrom > for DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4ImageVariant0DockerfileVariant2GitCheckoutFrom { fn from (value : super :: DevfileSchemaVersion222ParentVariant1ComponentsItemVariant4ImageVariant0DockerfileVariant2GitCheckoutFrom) -> Self { Self { remote : Ok (value . remote) , revision : Ok (value . revision) , } } }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant0Git { checkout_from : :: std :: result :: Result < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant0GitCheckoutFrom > , :: std :: string :: String > , remotes : :: std :: result :: Result < :: std :: collections :: HashMap < :: std :: string :: String , :: std :: string :: String > , :: std :: string :: String > , }
    impl ::std::default::Default
        for DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant0Git
    {
        fn default() -> Self {
            Self {
                checkout_from: Ok(Default::default()),
                remotes: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant0Git {
        pub fn checkout_from < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant0GitCheckoutFrom > > , T :: Error : :: std :: fmt :: Display ,{
            self.checkout_from = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for checkout_from: {}", e));
            self
        }
        pub fn remotes<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.remotes = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for remotes: {}", e));
            self
        }
    }
    impl
        ::std::convert::TryFrom<
            DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant0Git,
        > for super::DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant0Git
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant0Git,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                checkout_from: value.checkout_from?,
                remotes: value.remotes?,
            })
        }
    }
    impl
        ::std::convert::From<
            super::DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant0Git,
        > for DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant0Git
    {
        fn from(
            value: super::DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant0Git,
        ) -> Self {
            Self {
                checkout_from: Ok(value.checkout_from),
                remotes: Ok(value.remotes),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant0GitCheckoutFrom {
        remote: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
        revision: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default
        for DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant0GitCheckoutFrom
    {
        fn default() -> Self {
            Self {
                remote: Ok(Default::default()),
                revision: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant0GitCheckoutFrom {
        pub fn remote<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.remote = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for remote: {}", e));
            self
        }
        pub fn revision<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.revision = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for revision: {}", e));
            self
        }
    }
    impl
        ::std::convert::TryFrom<
            DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant0GitCheckoutFrom,
        >
        for super::DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant0GitCheckoutFrom
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value : DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant0GitCheckoutFrom,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                remote: value.remote?,
                revision: value.revision?,
            })
        }
    }
    impl :: std :: convert :: From < super :: DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant0GitCheckoutFrom > for DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant0GitCheckoutFrom { fn from (value : super :: DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant0GitCheckoutFrom) -> Self { Self { remote : Ok (value . remote) , revision : Ok (value . revision) , } } }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant1Zip {
        location: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default
        for DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant1Zip
    {
        fn default() -> Self {
            Self {
                location: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant1Zip {
        pub fn location<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.location = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for location: {}", e));
            self
        }
    }
    impl
        ::std::convert::TryFrom<
            DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant1Zip,
        > for super::DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant1Zip
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant1Zip,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                location: value.location?,
            })
        }
    }
    impl
        ::std::convert::From<
            super::DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant1Zip,
        > for DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant1Zip
    {
        fn from(
            value: super::DevfileSchemaVersion222ParentVariant1DependentProjectsItemVariant1Zip,
        ) -> Self {
            Self {
                location: Ok(value.location),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant1ProjectsItemVariant0Git {
        checkout_from: ::std::result::Result<
            ::std::option::Option<
                super::DevfileSchemaVersion222ParentVariant1ProjectsItemVariant0GitCheckoutFrom,
            >,
            ::std::string::String,
        >,
        remotes: ::std::result::Result<
            ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default for DevfileSchemaVersion222ParentVariant1ProjectsItemVariant0Git {
        fn default() -> Self {
            Self {
                checkout_from: Ok(Default::default()),
                remotes: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant1ProjectsItemVariant0Git {
        pub fn checkout_from<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::option::Option<
                    super::DevfileSchemaVersion222ParentVariant1ProjectsItemVariant0GitCheckoutFrom,
                >,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.checkout_from = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for checkout_from: {}", e));
            self
        }
        pub fn remotes<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.remotes = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for remotes: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<DevfileSchemaVersion222ParentVariant1ProjectsItemVariant0Git>
        for super::DevfileSchemaVersion222ParentVariant1ProjectsItemVariant0Git
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ParentVariant1ProjectsItemVariant0Git,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                checkout_from: value.checkout_from?,
                remotes: value.remotes?,
            })
        }
    }
    impl ::std::convert::From<super::DevfileSchemaVersion222ParentVariant1ProjectsItemVariant0Git>
        for DevfileSchemaVersion222ParentVariant1ProjectsItemVariant0Git
    {
        fn from(
            value: super::DevfileSchemaVersion222ParentVariant1ProjectsItemVariant0Git,
        ) -> Self {
            Self {
                checkout_from: Ok(value.checkout_from),
                remotes: Ok(value.remotes),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant1ProjectsItemVariant0GitCheckoutFrom {
        remote: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
        revision: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default
        for DevfileSchemaVersion222ParentVariant1ProjectsItemVariant0GitCheckoutFrom
    {
        fn default() -> Self {
            Self {
                remote: Ok(Default::default()),
                revision: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant1ProjectsItemVariant0GitCheckoutFrom {
        pub fn remote<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.remote = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for remote: {}", e));
            self
        }
        pub fn revision<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.revision = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for revision: {}", e));
            self
        }
    }
    impl
        ::std::convert::TryFrom<
            DevfileSchemaVersion222ParentVariant1ProjectsItemVariant0GitCheckoutFrom,
        > for super::DevfileSchemaVersion222ParentVariant1ProjectsItemVariant0GitCheckoutFrom
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ParentVariant1ProjectsItemVariant0GitCheckoutFrom,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                remote: value.remote?,
                revision: value.revision?,
            })
        }
    }
    impl
        ::std::convert::From<
            super::DevfileSchemaVersion222ParentVariant1ProjectsItemVariant0GitCheckoutFrom,
        > for DevfileSchemaVersion222ParentVariant1ProjectsItemVariant0GitCheckoutFrom
    {
        fn from(
            value: super::DevfileSchemaVersion222ParentVariant1ProjectsItemVariant0GitCheckoutFrom,
        ) -> Self {
            Self {
                remote: Ok(value.remote),
                revision: Ok(value.revision),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant1ProjectsItemVariant1Zip {
        location: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default for DevfileSchemaVersion222ParentVariant1ProjectsItemVariant1Zip {
        fn default() -> Self {
            Self {
                location: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant1ProjectsItemVariant1Zip {
        pub fn location<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.location = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for location: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<DevfileSchemaVersion222ParentVariant1ProjectsItemVariant1Zip>
        for super::DevfileSchemaVersion222ParentVariant1ProjectsItemVariant1Zip
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ParentVariant1ProjectsItemVariant1Zip,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                location: value.location?,
            })
        }
    }
    impl ::std::convert::From<super::DevfileSchemaVersion222ParentVariant1ProjectsItemVariant1Zip>
        for DevfileSchemaVersion222ParentVariant1ProjectsItemVariant1Zip
    {
        fn from(
            value: super::DevfileSchemaVersion222ParentVariant1ProjectsItemVariant1Zip,
        ) -> Self {
            Self {
                location: Ok(value.location),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant0Git { checkout_from : :: std :: result :: Result < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant0GitCheckoutFrom > , :: std :: string :: String > , remotes : :: std :: result :: Result < :: std :: collections :: HashMap < :: std :: string :: String , :: std :: string :: String > , :: std :: string :: String > , }
    impl ::std::default::Default
        for DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant0Git
    {
        fn default() -> Self {
            Self {
                checkout_from: Ok(Default::default()),
                remotes: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant0Git {
        pub fn checkout_from < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant0GitCheckoutFrom > > , T :: Error : :: std :: fmt :: Display ,{
            self.checkout_from = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for checkout_from: {}", e));
            self
        }
        pub fn remotes<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.remotes = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for remotes: {}", e));
            self
        }
    }
    impl
        ::std::convert::TryFrom<DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant0Git>
        for super::DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant0Git
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant0Git,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                checkout_from: value.checkout_from?,
                remotes: value.remotes?,
            })
        }
    }
    impl
        ::std::convert::From<
            super::DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant0Git,
        > for DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant0Git
    {
        fn from(
            value: super::DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant0Git,
        ) -> Self {
            Self {
                checkout_from: Ok(value.checkout_from),
                remotes: Ok(value.remotes),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant0GitCheckoutFrom {
        remote: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
        revision: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default
        for DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant0GitCheckoutFrom
    {
        fn default() -> Self {
            Self {
                remote: Ok(Default::default()),
                revision: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant0GitCheckoutFrom {
        pub fn remote<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.remote = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for remote: {}", e));
            self
        }
        pub fn revision<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.revision = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for revision: {}", e));
            self
        }
    }
    impl
        ::std::convert::TryFrom<
            DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant0GitCheckoutFrom,
        >
        for super::DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant0GitCheckoutFrom
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant0GitCheckoutFrom,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                remote: value.remote?,
                revision: value.revision?,
            })
        }
    }
    impl
        ::std::convert::From<
            super::DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant0GitCheckoutFrom,
        > for DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant0GitCheckoutFrom
    {
        fn from(
            value : super :: DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant0GitCheckoutFrom,
        ) -> Self {
            Self {
                remote: Ok(value.remote),
                revision: Ok(value.revision),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant1Zip {
        location: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default
        for DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant1Zip
    {
        fn default() -> Self {
            Self {
                location: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant1Zip {
        pub fn location<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.location = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for location: {}", e));
            self
        }
    }
    impl
        ::std::convert::TryFrom<DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant1Zip>
        for super::DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant1Zip
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant1Zip,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                location: value.location?,
            })
        }
    }
    impl
        ::std::convert::From<
            super::DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant1Zip,
        > for DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant1Zip
    {
        fn from(
            value: super::DevfileSchemaVersion222ParentVariant1StarterProjectsItemVariant1Zip,
        ) -> Self {
            Self {
                location: Ok(value.location),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant2CommandsItemVariant0Exec {
        command_line: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
        component: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
        env: ::std::result::Result<
            ::std::vec::Vec<
                super::DevfileSchemaVersion222ParentVariant2CommandsItemVariant0ExecEnvItem,
            >,
            ::std::string::String,
        >,
        group: ::std::result::Result<
            ::std::option::Option<
                super::DevfileSchemaVersion222ParentVariant2CommandsItemVariant0ExecGroup,
            >,
            ::std::string::String,
        >,
        hot_reload_capable:
            ::std::result::Result<::std::option::Option<bool>, ::std::string::String>,
        label: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
        working_dir: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default for DevfileSchemaVersion222ParentVariant2CommandsItemVariant0Exec {
        fn default() -> Self {
            Self {
                command_line: Ok(Default::default()),
                component: Ok(Default::default()),
                env: Ok(Default::default()),
                group: Ok(Default::default()),
                hot_reload_capable: Ok(Default::default()),
                label: Ok(Default::default()),
                working_dir: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant2CommandsItemVariant0Exec {
        pub fn command_line<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.command_line = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for command_line: {}", e));
            self
        }
        pub fn component<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.component = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for component: {}", e));
            self
        }
        pub fn env<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::vec::Vec<
                    super::DevfileSchemaVersion222ParentVariant2CommandsItemVariant0ExecEnvItem,
                >,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.env = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for env: {}", e));
            self
        }
        pub fn group<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::option::Option<
                    super::DevfileSchemaVersion222ParentVariant2CommandsItemVariant0ExecGroup,
                >,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.group = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for group: {}", e));
            self
        }
        pub fn hot_reload_capable<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<bool>>,
            T::Error: ::std::fmt::Display,
        {
            self.hot_reload_capable = value.try_into().map_err(|e| {
                format!(
                    "error converting supplied value for hot_reload_capable: {}",
                    e
                )
            });
            self
        }
        pub fn label<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.label = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for label: {}", e));
            self
        }
        pub fn working_dir<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.working_dir = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for working_dir: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<DevfileSchemaVersion222ParentVariant2CommandsItemVariant0Exec>
        for super::DevfileSchemaVersion222ParentVariant2CommandsItemVariant0Exec
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ParentVariant2CommandsItemVariant0Exec,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                command_line: value.command_line?,
                component: value.component?,
                env: value.env?,
                group: value.group?,
                hot_reload_capable: value.hot_reload_capable?,
                label: value.label?,
                working_dir: value.working_dir?,
            })
        }
    }
    impl ::std::convert::From<super::DevfileSchemaVersion222ParentVariant2CommandsItemVariant0Exec>
        for DevfileSchemaVersion222ParentVariant2CommandsItemVariant0Exec
    {
        fn from(
            value: super::DevfileSchemaVersion222ParentVariant2CommandsItemVariant0Exec,
        ) -> Self {
            Self {
                command_line: Ok(value.command_line),
                component: Ok(value.component),
                env: Ok(value.env),
                group: Ok(value.group),
                hot_reload_capable: Ok(value.hot_reload_capable),
                label: Ok(value.label),
                working_dir: Ok(value.working_dir),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant2CommandsItemVariant0ExecEnvItem {
        name: ::std::result::Result<::std::string::String, ::std::string::String>,
        value: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default
        for DevfileSchemaVersion222ParentVariant2CommandsItemVariant0ExecEnvItem
    {
        fn default() -> Self {
            Self {
                name: Err("no value supplied for name".to_string()),
                value: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant2CommandsItemVariant0ExecEnvItem {
        pub fn name<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::string::String>,
            T::Error: ::std::fmt::Display,
        {
            self.name = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for name: {}", e));
            self
        }
        pub fn value<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.value = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for value: {}", e));
            self
        }
    }
    impl
        ::std::convert::TryFrom<
            DevfileSchemaVersion222ParentVariant2CommandsItemVariant0ExecEnvItem,
        > for super::DevfileSchemaVersion222ParentVariant2CommandsItemVariant0ExecEnvItem
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ParentVariant2CommandsItemVariant0ExecEnvItem,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                name: value.name?,
                value: value.value?,
            })
        }
    }
    impl
        ::std::convert::From<
            super::DevfileSchemaVersion222ParentVariant2CommandsItemVariant0ExecEnvItem,
        > for DevfileSchemaVersion222ParentVariant2CommandsItemVariant0ExecEnvItem
    {
        fn from(
            value: super::DevfileSchemaVersion222ParentVariant2CommandsItemVariant0ExecEnvItem,
        ) -> Self {
            Self {
                name: Ok(value.name),
                value: Ok(value.value),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant2CommandsItemVariant0ExecGroup {
        is_default: ::std::result::Result<::std::option::Option<bool>, ::std::string::String>,
        kind: ::std::result::Result<
            ::std::option::Option<
                super::DevfileSchemaVersion222ParentVariant2CommandsItemVariant0ExecGroupKind,
            >,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default
        for DevfileSchemaVersion222ParentVariant2CommandsItemVariant0ExecGroup
    {
        fn default() -> Self {
            Self {
                is_default: Ok(Default::default()),
                kind: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant2CommandsItemVariant0ExecGroup {
        pub fn is_default<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<bool>>,
            T::Error: ::std::fmt::Display,
        {
            self.is_default = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for is_default: {}", e));
            self
        }
        pub fn kind<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::option::Option<
                    super::DevfileSchemaVersion222ParentVariant2CommandsItemVariant0ExecGroupKind,
                >,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.kind = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for kind: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<DevfileSchemaVersion222ParentVariant2CommandsItemVariant0ExecGroup>
        for super::DevfileSchemaVersion222ParentVariant2CommandsItemVariant0ExecGroup
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ParentVariant2CommandsItemVariant0ExecGroup,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                is_default: value.is_default?,
                kind: value.kind?,
            })
        }
    }
    impl
        ::std::convert::From<
            super::DevfileSchemaVersion222ParentVariant2CommandsItemVariant0ExecGroup,
        > for DevfileSchemaVersion222ParentVariant2CommandsItemVariant0ExecGroup
    {
        fn from(
            value: super::DevfileSchemaVersion222ParentVariant2CommandsItemVariant0ExecGroup,
        ) -> Self {
            Self {
                is_default: Ok(value.is_default),
                kind: Ok(value.kind),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant2CommandsItemVariant1Apply {
        component: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
        group: ::std::result::Result<
            ::std::option::Option<
                super::DevfileSchemaVersion222ParentVariant2CommandsItemVariant1ApplyGroup,
            >,
            ::std::string::String,
        >,
        label: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default for DevfileSchemaVersion222ParentVariant2CommandsItemVariant1Apply {
        fn default() -> Self {
            Self {
                component: Ok(Default::default()),
                group: Ok(Default::default()),
                label: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant2CommandsItemVariant1Apply {
        pub fn component<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.component = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for component: {}", e));
            self
        }
        pub fn group<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::option::Option<
                    super::DevfileSchemaVersion222ParentVariant2CommandsItemVariant1ApplyGroup,
                >,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.group = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for group: {}", e));
            self
        }
        pub fn label<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.label = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for label: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<DevfileSchemaVersion222ParentVariant2CommandsItemVariant1Apply>
        for super::DevfileSchemaVersion222ParentVariant2CommandsItemVariant1Apply
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ParentVariant2CommandsItemVariant1Apply,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                component: value.component?,
                group: value.group?,
                label: value.label?,
            })
        }
    }
    impl ::std::convert::From<super::DevfileSchemaVersion222ParentVariant2CommandsItemVariant1Apply>
        for DevfileSchemaVersion222ParentVariant2CommandsItemVariant1Apply
    {
        fn from(
            value: super::DevfileSchemaVersion222ParentVariant2CommandsItemVariant1Apply,
        ) -> Self {
            Self {
                component: Ok(value.component),
                group: Ok(value.group),
                label: Ok(value.label),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant2CommandsItemVariant1ApplyGroup {
        is_default: ::std::result::Result<::std::option::Option<bool>, ::std::string::String>,
        kind: ::std::result::Result<
            ::std::option::Option<
                super::DevfileSchemaVersion222ParentVariant2CommandsItemVariant1ApplyGroupKind,
            >,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default
        for DevfileSchemaVersion222ParentVariant2CommandsItemVariant1ApplyGroup
    {
        fn default() -> Self {
            Self {
                is_default: Ok(Default::default()),
                kind: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant2CommandsItemVariant1ApplyGroup {
        pub fn is_default<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<bool>>,
            T::Error: ::std::fmt::Display,
        {
            self.is_default = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for is_default: {}", e));
            self
        }
        pub fn kind<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::option::Option<
                    super::DevfileSchemaVersion222ParentVariant2CommandsItemVariant1ApplyGroupKind,
                >,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.kind = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for kind: {}", e));
            self
        }
    }
    impl
        ::std::convert::TryFrom<DevfileSchemaVersion222ParentVariant2CommandsItemVariant1ApplyGroup>
        for super::DevfileSchemaVersion222ParentVariant2CommandsItemVariant1ApplyGroup
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ParentVariant2CommandsItemVariant1ApplyGroup,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                is_default: value.is_default?,
                kind: value.kind?,
            })
        }
    }
    impl
        ::std::convert::From<
            super::DevfileSchemaVersion222ParentVariant2CommandsItemVariant1ApplyGroup,
        > for DevfileSchemaVersion222ParentVariant2CommandsItemVariant1ApplyGroup
    {
        fn from(
            value: super::DevfileSchemaVersion222ParentVariant2CommandsItemVariant1ApplyGroup,
        ) -> Self {
            Self {
                is_default: Ok(value.is_default),
                kind: Ok(value.kind),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant2CommandsItemVariant2Composite {
        commands:
            ::std::result::Result<::std::vec::Vec<::std::string::String>, ::std::string::String>,
        group: ::std::result::Result<
            ::std::option::Option<
                super::DevfileSchemaVersion222ParentVariant2CommandsItemVariant2CompositeGroup,
            >,
            ::std::string::String,
        >,
        label: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
        parallel: ::std::result::Result<::std::option::Option<bool>, ::std::string::String>,
    }
    impl ::std::default::Default
        for DevfileSchemaVersion222ParentVariant2CommandsItemVariant2Composite
    {
        fn default() -> Self {
            Self {
                commands: Ok(Default::default()),
                group: Ok(Default::default()),
                label: Ok(Default::default()),
                parallel: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant2CommandsItemVariant2Composite {
        pub fn commands<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::vec::Vec<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.commands = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for commands: {}", e));
            self
        }
        pub fn group<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::option::Option<
                    super::DevfileSchemaVersion222ParentVariant2CommandsItemVariant2CompositeGroup,
                >,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.group = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for group: {}", e));
            self
        }
        pub fn label<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.label = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for label: {}", e));
            self
        }
        pub fn parallel<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<bool>>,
            T::Error: ::std::fmt::Display,
        {
            self.parallel = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for parallel: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<DevfileSchemaVersion222ParentVariant2CommandsItemVariant2Composite>
        for super::DevfileSchemaVersion222ParentVariant2CommandsItemVariant2Composite
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ParentVariant2CommandsItemVariant2Composite,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                commands: value.commands?,
                group: value.group?,
                label: value.label?,
                parallel: value.parallel?,
            })
        }
    }
    impl
        ::std::convert::From<
            super::DevfileSchemaVersion222ParentVariant2CommandsItemVariant2Composite,
        > for DevfileSchemaVersion222ParentVariant2CommandsItemVariant2Composite
    {
        fn from(
            value: super::DevfileSchemaVersion222ParentVariant2CommandsItemVariant2Composite,
        ) -> Self {
            Self {
                commands: Ok(value.commands),
                group: Ok(value.group),
                label: Ok(value.label),
                parallel: Ok(value.parallel),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant2CommandsItemVariant2CompositeGroup {
        is_default: ::std::result::Result<::std::option::Option<bool>, ::std::string::String>,
        kind: ::std::result::Result<
            ::std::option::Option<
                super::DevfileSchemaVersion222ParentVariant2CommandsItemVariant2CompositeGroupKind,
            >,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default
        for DevfileSchemaVersion222ParentVariant2CommandsItemVariant2CompositeGroup
    {
        fn default() -> Self {
            Self {
                is_default: Ok(Default::default()),
                kind: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant2CommandsItemVariant2CompositeGroup {
        pub fn is_default<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<bool>>,
            T::Error: ::std::fmt::Display,
        {
            self.is_default = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for is_default: {}", e));
            self
        }        pub fn kind < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant2CommandsItemVariant2CompositeGroupKind > > , T :: Error : :: std :: fmt :: Display ,{
            self.kind = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for kind: {}", e));
            self
        }
    }
    impl
        ::std::convert::TryFrom<
            DevfileSchemaVersion222ParentVariant2CommandsItemVariant2CompositeGroup,
        > for super::DevfileSchemaVersion222ParentVariant2CommandsItemVariant2CompositeGroup
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ParentVariant2CommandsItemVariant2CompositeGroup,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                is_default: value.is_default?,
                kind: value.kind?,
            })
        }
    }
    impl
        ::std::convert::From<
            super::DevfileSchemaVersion222ParentVariant2CommandsItemVariant2CompositeGroup,
        > for DevfileSchemaVersion222ParentVariant2CommandsItemVariant2CompositeGroup
    {
        fn from(
            value: super::DevfileSchemaVersion222ParentVariant2CommandsItemVariant2CompositeGroup,
        ) -> Self {
            Self {
                is_default: Ok(value.is_default),
                kind: Ok(value.kind),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0Container { annotation : :: std :: result :: Result < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerAnnotation > , :: std :: string :: String > , args : :: std :: result :: Result < :: std :: vec :: Vec < :: std :: string :: String > , :: std :: string :: String > , command : :: std :: result :: Result < :: std :: vec :: Vec < :: std :: string :: String > , :: std :: string :: String > , cpu_limit : :: std :: result :: Result < :: std :: option :: Option < :: std :: string :: String > , :: std :: string :: String > , cpu_request : :: std :: result :: Result < :: std :: option :: Option < :: std :: string :: String > , :: std :: string :: String > , dedicated_pod : :: std :: result :: Result < :: std :: option :: Option < bool > , :: std :: string :: String > , endpoints : :: std :: result :: Result < :: std :: vec :: Vec < super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEndpointsItem > , :: std :: string :: String > , env : :: std :: result :: Result < :: std :: vec :: Vec < super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEnvItem > , :: std :: string :: String > , image : :: std :: result :: Result < :: std :: option :: Option < :: std :: string :: String > , :: std :: string :: String > , memory_limit : :: std :: result :: Result < :: std :: option :: Option < :: std :: string :: String > , :: std :: string :: String > , memory_request : :: std :: result :: Result < :: std :: option :: Option < :: std :: string :: String > , :: std :: string :: String > , mount_sources : :: std :: result :: Result < :: std :: option :: Option < bool > , :: std :: string :: String > , source_mapping : :: std :: result :: Result < :: std :: option :: Option < :: std :: string :: String > , :: std :: string :: String > , volume_mounts : :: std :: result :: Result < :: std :: vec :: Vec < super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerVolumeMountsItem > , :: std :: string :: String > , }
    impl ::std::default::Default
        for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0Container
    {
        fn default() -> Self {
            Self {
                annotation: Ok(Default::default()),
                args: Ok(Default::default()),
                command: Ok(Default::default()),
                cpu_limit: Ok(Default::default()),
                cpu_request: Ok(Default::default()),
                dedicated_pod: Ok(Default::default()),
                endpoints: Ok(Default::default()),
                env: Ok(Default::default()),
                image: Ok(Default::default()),
                memory_limit: Ok(Default::default()),
                memory_request: Ok(Default::default()),
                mount_sources: Ok(Default::default()),
                source_mapping: Ok(Default::default()),
                volume_mounts: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0Container {
        pub fn annotation < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerAnnotation > > , T :: Error : :: std :: fmt :: Display ,{
            self.annotation = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for annotation: {}", e));
            self
        }
        pub fn args<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::vec::Vec<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.args = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for args: {}", e));
            self
        }
        pub fn command<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::vec::Vec<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.command = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for command: {}", e));
            self
        }
        pub fn cpu_limit<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.cpu_limit = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for cpu_limit: {}", e));
            self
        }
        pub fn cpu_request<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.cpu_request = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for cpu_request: {}", e));
            self
        }
        pub fn dedicated_pod<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<bool>>,
            T::Error: ::std::fmt::Display,
        {
            self.dedicated_pod = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for dedicated_pod: {}", e));
            self
        }        pub fn endpoints < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: vec :: Vec < super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEndpointsItem > > , T :: Error : :: std :: fmt :: Display ,{
            self.endpoints = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for endpoints: {}", e));
            self
        }        pub fn env < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: vec :: Vec < super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEnvItem > > , T :: Error : :: std :: fmt :: Display ,{
            self.env = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for env: {}", e));
            self
        }
        pub fn image<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.image = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for image: {}", e));
            self
        }
        pub fn memory_limit<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.memory_limit = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for memory_limit: {}", e));
            self
        }
        pub fn memory_request<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.memory_request = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for memory_request: {}", e));
            self
        }
        pub fn mount_sources<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<bool>>,
            T::Error: ::std::fmt::Display,
        {
            self.mount_sources = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for mount_sources: {}", e));
            self
        }
        pub fn source_mapping<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.source_mapping = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for source_mapping: {}", e));
            self
        }        pub fn volume_mounts < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: vec :: Vec < super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerVolumeMountsItem > > , T :: Error : :: std :: fmt :: Display ,{
            self.volume_mounts = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for volume_mounts: {}", e));
            self
        }
    }
    impl
        ::std::convert::TryFrom<
            DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0Container,
        > for super::DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0Container
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0Container,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                annotation: value.annotation?,
                args: value.args?,
                command: value.command?,
                cpu_limit: value.cpu_limit?,
                cpu_request: value.cpu_request?,
                dedicated_pod: value.dedicated_pod?,
                endpoints: value.endpoints?,
                env: value.env?,
                image: value.image?,
                memory_limit: value.memory_limit?,
                memory_request: value.memory_request?,
                mount_sources: value.mount_sources?,
                source_mapping: value.source_mapping?,
                volume_mounts: value.volume_mounts?,
            })
        }
    }
    impl
        ::std::convert::From<
            super::DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0Container,
        > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0Container
    {
        fn from(
            value: super::DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0Container,
        ) -> Self {
            Self {
                annotation: Ok(value.annotation),
                args: Ok(value.args),
                command: Ok(value.command),
                cpu_limit: Ok(value.cpu_limit),
                cpu_request: Ok(value.cpu_request),
                dedicated_pod: Ok(value.dedicated_pod),
                endpoints: Ok(value.endpoints),
                env: Ok(value.env),
                image: Ok(value.image),
                memory_limit: Ok(value.memory_limit),
                memory_request: Ok(value.memory_request),
                mount_sources: Ok(value.mount_sources),
                source_mapping: Ok(value.source_mapping),
                volume_mounts: Ok(value.volume_mounts),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerAnnotation {
        deployment: ::std::result::Result<
            ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            ::std::string::String,
        >,
        service: ::std::result::Result<
            ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default
        for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerAnnotation
    {
        fn default() -> Self {
            Self {
                deployment: Ok(Default::default()),
                service: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerAnnotation {
        pub fn deployment<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.deployment = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for deployment: {}", e));
            self
        }
        pub fn service<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.service = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for service: {}", e));
            self
        }
    }
    impl
        ::std::convert::TryFrom<
            DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerAnnotation,
        >
        for super::DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerAnnotation
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerAnnotation,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                deployment: value.deployment?,
                service: value.service?,
            })
        }
    }
    impl
        ::std::convert::From<
            super::DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerAnnotation,
        > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerAnnotation
    {
        fn from(
            value : super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerAnnotation,
        ) -> Self {
            Self {
                deployment: Ok(value.deployment),
                service: Ok(value.service),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEndpointsItem { annotation : :: std :: result :: Result < :: std :: collections :: HashMap < :: std :: string :: String , :: std :: string :: String > , :: std :: string :: String > , attributes : :: std :: result :: Result < :: serde_json :: Map < :: std :: string :: String , :: serde_json :: Value > , :: std :: string :: String > , exposure : :: std :: result :: Result < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEndpointsItemExposure > , :: std :: string :: String > , name : :: std :: result :: Result < super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEndpointsItemName , :: std :: string :: String > , path : :: std :: result :: Result < :: std :: option :: Option < :: std :: string :: String > , :: std :: string :: String > , protocol : :: std :: result :: Result < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEndpointsItemProtocol > , :: std :: string :: String > , secure : :: std :: result :: Result < :: std :: option :: Option < bool > , :: std :: string :: String > , target_port : :: std :: result :: Result < :: std :: option :: Option < i64 > , :: std :: string :: String > , }
    impl ::std::default::Default
        for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEndpointsItem
    {
        fn default() -> Self {
            Self {
                annotation: Ok(Default::default()),
                attributes: Ok(Default::default()),
                exposure: Ok(Default::default()),
                name: Err("no value supplied for name".to_string()),
                path: Ok(Default::default()),
                protocol: Ok(Default::default()),
                secure: Ok(Default::default()),
                target_port: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEndpointsItem {
        pub fn annotation<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.annotation = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for annotation: {}", e));
            self
        }
        pub fn attributes<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::serde_json::Map<::std::string::String, ::serde_json::Value>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.attributes = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for attributes: {}", e));
            self
        }        pub fn exposure < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEndpointsItemExposure > > , T :: Error : :: std :: fmt :: Display ,{
            self.exposure = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for exposure: {}", e));
            self
        }        pub fn name < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEndpointsItemName > , T :: Error : :: std :: fmt :: Display ,{
            self.name = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for name: {}", e));
            self
        }
        pub fn path<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.path = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for path: {}", e));
            self
        }        pub fn protocol < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEndpointsItemProtocol > > , T :: Error : :: std :: fmt :: Display ,{
            self.protocol = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for protocol: {}", e));
            self
        }
        pub fn secure<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<bool>>,
            T::Error: ::std::fmt::Display,
        {
            self.secure = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for secure: {}", e));
            self
        }
        pub fn target_port<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<i64>>,
            T::Error: ::std::fmt::Display,
        {
            self.target_port = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for target_port: {}", e));
            self
        }
    }
    impl
        ::std::convert::TryFrom<
            DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEndpointsItem,
        >
        for super::DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEndpointsItem
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value : DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEndpointsItem,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                annotation: value.annotation?,
                attributes: value.attributes?,
                exposure: value.exposure?,
                name: value.name?,
                path: value.path?,
                protocol: value.protocol?,
                secure: value.secure?,
                target_port: value.target_port?,
            })
        }
    }
    impl :: std :: convert :: From < super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEndpointsItem > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEndpointsItem { fn from (value : super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEndpointsItem) -> Self { Self { annotation : Ok (value . annotation) , attributes : Ok (value . attributes) , exposure : Ok (value . exposure) , name : Ok (value . name) , path : Ok (value . path) , protocol : Ok (value . protocol) , secure : Ok (value . secure) , target_port : Ok (value . target_port) , } } }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEnvItem {
        name: ::std::result::Result<::std::string::String, ::std::string::String>,
        value: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default
        for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEnvItem
    {
        fn default() -> Self {
            Self {
                name: Err("no value supplied for name".to_string()),
                value: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEnvItem {
        pub fn name<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::string::String>,
            T::Error: ::std::fmt::Display,
        {
            self.name = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for name: {}", e));
            self
        }
        pub fn value<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.value = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for value: {}", e));
            self
        }
    }
    impl
        ::std::convert::TryFrom<
            DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEnvItem,
        > for super::DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEnvItem
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEnvItem,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                name: value.name?,
                value: value.value?,
            })
        }
    }
    impl
        ::std::convert::From<
            super::DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEnvItem,
        > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEnvItem
    {
        fn from(
            value : super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerEnvItem,
        ) -> Self {
            Self {
                name: Ok(value.name),
                value: Ok(value.value),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerVolumeMountsItem { name : :: std :: result :: Result < super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerVolumeMountsItemName , :: std :: string :: String > , path : :: std :: result :: Result < :: std :: option :: Option < :: std :: string :: String > , :: std :: string :: String > , }
    impl ::std::default::Default
        for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerVolumeMountsItem
    {
        fn default() -> Self {
            Self {
                name: Err("no value supplied for name".to_string()),
                path: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerVolumeMountsItem {
        pub fn name < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerVolumeMountsItemName > , T :: Error : :: std :: fmt :: Display ,{
            self.name = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for name: {}", e));
            self
        }
        pub fn path<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.path = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for path: {}", e));
            self
        }
    }
    impl :: std :: convert :: TryFrom < DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerVolumeMountsItem > for super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerVolumeMountsItem { type Error = super :: error :: ConversionError ; fn try_from (value : DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerVolumeMountsItem) -> :: std :: result :: Result < Self , super :: error :: ConversionError > { Ok (Self { name : value . name ? , path : value . path ? , }) } }
    impl :: std :: convert :: From < super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerVolumeMountsItem > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerVolumeMountsItem { fn from (value : super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant0ContainerVolumeMountsItem) -> Self { Self { name : Ok (value . name) , path : Ok (value . path) , } } }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant0EndpointsItem { annotation : :: std :: result :: Result < :: std :: collections :: HashMap < :: std :: string :: String , :: std :: string :: String > , :: std :: string :: String > , attributes : :: std :: result :: Result < :: serde_json :: Map < :: std :: string :: String , :: serde_json :: Value > , :: std :: string :: String > , exposure : :: std :: result :: Result < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant0EndpointsItemExposure > , :: std :: string :: String > , name : :: std :: result :: Result < super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant0EndpointsItemName , :: std :: string :: String > , path : :: std :: result :: Result < :: std :: option :: Option < :: std :: string :: String > , :: std :: string :: String > , protocol : :: std :: result :: Result < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant0EndpointsItemProtocol > , :: std :: string :: String > , secure : :: std :: result :: Result < :: std :: option :: Option < bool > , :: std :: string :: String > , target_port : :: std :: result :: Result < :: std :: option :: Option < i64 > , :: std :: string :: String > , }
    impl :: std :: default :: Default for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant0EndpointsItem { fn default () -> Self { Self { annotation : Ok (Default :: default ()) , attributes : Ok (Default :: default ()) , exposure : Ok (Default :: default ()) , name : Err ("no value supplied for name" . to_string ()) , path : Ok (Default :: default ()) , protocol : Ok (Default :: default ()) , secure : Ok (Default :: default ()) , target_port : Ok (Default :: default ()) , } } }
    impl DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant0EndpointsItem {
        pub fn annotation<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.annotation = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for annotation: {}", e));
            self
        }
        pub fn attributes<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::serde_json::Map<::std::string::String, ::serde_json::Value>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.attributes = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for attributes: {}", e));
            self
        }        pub fn exposure < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant0EndpointsItemExposure > > , T :: Error : :: std :: fmt :: Display ,{
            self.exposure = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for exposure: {}", e));
            self
        }        pub fn name < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant0EndpointsItemName > , T :: Error : :: std :: fmt :: Display ,{
            self.name = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for name: {}", e));
            self
        }
        pub fn path<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.path = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for path: {}", e));
            self
        }        pub fn protocol < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant0EndpointsItemProtocol > > , T :: Error : :: std :: fmt :: Display ,{
            self.protocol = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for protocol: {}", e));
            self
        }
        pub fn secure<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<bool>>,
            T::Error: ::std::fmt::Display,
        {
            self.secure = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for secure: {}", e));
            self
        }
        pub fn target_port<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<i64>>,
            T::Error: ::std::fmt::Display,
        {
            self.target_port = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for target_port: {}", e));
            self
        }
    }
    impl :: std :: convert :: TryFrom < DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant0EndpointsItem > for super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant0EndpointsItem { type Error = super :: error :: ConversionError ; fn try_from (value : DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant0EndpointsItem) -> :: std :: result :: Result < Self , super :: error :: ConversionError > { Ok (Self { annotation : value . annotation ? , attributes : value . attributes ? , exposure : value . exposure ? , name : value . name ? , path : value . path ? , protocol : value . protocol ? , secure : value . secure ? , target_port : value . target_port ? , }) } }
    impl :: std :: convert :: From < super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant0EndpointsItem > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant0EndpointsItem { fn from (value : super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant0EndpointsItem) -> Self { Self { annotation : Ok (value . annotation) , attributes : Ok (value . attributes) , exposure : Ok (value . exposure) , name : Ok (value . name) , path : Ok (value . path) , protocol : Ok (value . protocol) , secure : Ok (value . secure) , target_port : Ok (value . target_port) , } } }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant1EndpointsItem { annotation : :: std :: result :: Result < :: std :: collections :: HashMap < :: std :: string :: String , :: std :: string :: String > , :: std :: string :: String > , attributes : :: std :: result :: Result < :: serde_json :: Map < :: std :: string :: String , :: serde_json :: Value > , :: std :: string :: String > , exposure : :: std :: result :: Result < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant1EndpointsItemExposure > , :: std :: string :: String > , name : :: std :: result :: Result < super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant1EndpointsItemName , :: std :: string :: String > , path : :: std :: result :: Result < :: std :: option :: Option < :: std :: string :: String > , :: std :: string :: String > , protocol : :: std :: result :: Result < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant1EndpointsItemProtocol > , :: std :: string :: String > , secure : :: std :: result :: Result < :: std :: option :: Option < bool > , :: std :: string :: String > , target_port : :: std :: result :: Result < :: std :: option :: Option < i64 > , :: std :: string :: String > , }
    impl :: std :: default :: Default for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant1EndpointsItem { fn default () -> Self { Self { annotation : Ok (Default :: default ()) , attributes : Ok (Default :: default ()) , exposure : Ok (Default :: default ()) , name : Err ("no value supplied for name" . to_string ()) , path : Ok (Default :: default ()) , protocol : Ok (Default :: default ()) , secure : Ok (Default :: default ()) , target_port : Ok (Default :: default ()) , } } }
    impl DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant1EndpointsItem {
        pub fn annotation<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.annotation = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for annotation: {}", e));
            self
        }
        pub fn attributes<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::serde_json::Map<::std::string::String, ::serde_json::Value>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.attributes = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for attributes: {}", e));
            self
        }        pub fn exposure < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant1EndpointsItemExposure > > , T :: Error : :: std :: fmt :: Display ,{
            self.exposure = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for exposure: {}", e));
            self
        }        pub fn name < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant1EndpointsItemName > , T :: Error : :: std :: fmt :: Display ,{
            self.name = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for name: {}", e));
            self
        }
        pub fn path<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.path = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for path: {}", e));
            self
        }        pub fn protocol < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant1EndpointsItemProtocol > > , T :: Error : :: std :: fmt :: Display ,{
            self.protocol = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for protocol: {}", e));
            self
        }
        pub fn secure<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<bool>>,
            T::Error: ::std::fmt::Display,
        {
            self.secure = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for secure: {}", e));
            self
        }
        pub fn target_port<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<i64>>,
            T::Error: ::std::fmt::Display,
        {
            self.target_port = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for target_port: {}", e));
            self
        }
    }
    impl :: std :: convert :: TryFrom < DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant1EndpointsItem > for super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant1EndpointsItem { type Error = super :: error :: ConversionError ; fn try_from (value : DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant1EndpointsItem) -> :: std :: result :: Result < Self , super :: error :: ConversionError > { Ok (Self { annotation : value . annotation ? , attributes : value . attributes ? , exposure : value . exposure ? , name : value . name ? , path : value . path ? , protocol : value . protocol ? , secure : value . secure ? , target_port : value . target_port ? , }) } }
    impl :: std :: convert :: From < super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant1EndpointsItem > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant1EndpointsItem { fn from (value : super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant1KubernetesVariant1EndpointsItem) -> Self { Self { annotation : Ok (value . annotation) , attributes : Ok (value . attributes) , exposure : Ok (value . exposure) , name : Ok (value . name) , path : Ok (value . path) , protocol : Ok (value . protocol) , secure : Ok (value . secure) , target_port : Ok (value . target_port) , } } }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant0EndpointsItem { annotation : :: std :: result :: Result < :: std :: collections :: HashMap < :: std :: string :: String , :: std :: string :: String > , :: std :: string :: String > , attributes : :: std :: result :: Result < :: serde_json :: Map < :: std :: string :: String , :: serde_json :: Value > , :: std :: string :: String > , exposure : :: std :: result :: Result < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant0EndpointsItemExposure > , :: std :: string :: String > , name : :: std :: result :: Result < super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant0EndpointsItemName , :: std :: string :: String > , path : :: std :: result :: Result < :: std :: option :: Option < :: std :: string :: String > , :: std :: string :: String > , protocol : :: std :: result :: Result < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant0EndpointsItemProtocol > , :: std :: string :: String > , secure : :: std :: result :: Result < :: std :: option :: Option < bool > , :: std :: string :: String > , target_port : :: std :: result :: Result < :: std :: option :: Option < i64 > , :: std :: string :: String > , }
    impl :: std :: default :: Default for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant0EndpointsItem { fn default () -> Self { Self { annotation : Ok (Default :: default ()) , attributes : Ok (Default :: default ()) , exposure : Ok (Default :: default ()) , name : Err ("no value supplied for name" . to_string ()) , path : Ok (Default :: default ()) , protocol : Ok (Default :: default ()) , secure : Ok (Default :: default ()) , target_port : Ok (Default :: default ()) , } } }
    impl DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant0EndpointsItem {
        pub fn annotation<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.annotation = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for annotation: {}", e));
            self
        }
        pub fn attributes<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::serde_json::Map<::std::string::String, ::serde_json::Value>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.attributes = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for attributes: {}", e));
            self
        }        pub fn exposure < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant0EndpointsItemExposure > > , T :: Error : :: std :: fmt :: Display ,{
            self.exposure = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for exposure: {}", e));
            self
        }        pub fn name < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant0EndpointsItemName > , T :: Error : :: std :: fmt :: Display ,{
            self.name = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for name: {}", e));
            self
        }
        pub fn path<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.path = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for path: {}", e));
            self
        }        pub fn protocol < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant0EndpointsItemProtocol > > , T :: Error : :: std :: fmt :: Display ,{
            self.protocol = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for protocol: {}", e));
            self
        }
        pub fn secure<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<bool>>,
            T::Error: ::std::fmt::Display,
        {
            self.secure = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for secure: {}", e));
            self
        }
        pub fn target_port<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<i64>>,
            T::Error: ::std::fmt::Display,
        {
            self.target_port = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for target_port: {}", e));
            self
        }
    }
    impl :: std :: convert :: TryFrom < DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant0EndpointsItem > for super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant0EndpointsItem { type Error = super :: error :: ConversionError ; fn try_from (value : DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant0EndpointsItem) -> :: std :: result :: Result < Self , super :: error :: ConversionError > { Ok (Self { annotation : value . annotation ? , attributes : value . attributes ? , exposure : value . exposure ? , name : value . name ? , path : value . path ? , protocol : value . protocol ? , secure : value . secure ? , target_port : value . target_port ? , }) } }
    impl :: std :: convert :: From < super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant0EndpointsItem > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant0EndpointsItem { fn from (value : super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant0EndpointsItem) -> Self { Self { annotation : Ok (value . annotation) , attributes : Ok (value . attributes) , exposure : Ok (value . exposure) , name : Ok (value . name) , path : Ok (value . path) , protocol : Ok (value . protocol) , secure : Ok (value . secure) , target_port : Ok (value . target_port) , } } }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant1EndpointsItem { annotation : :: std :: result :: Result < :: std :: collections :: HashMap < :: std :: string :: String , :: std :: string :: String > , :: std :: string :: String > , attributes : :: std :: result :: Result < :: serde_json :: Map < :: std :: string :: String , :: serde_json :: Value > , :: std :: string :: String > , exposure : :: std :: result :: Result < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant1EndpointsItemExposure > , :: std :: string :: String > , name : :: std :: result :: Result < super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant1EndpointsItemName , :: std :: string :: String > , path : :: std :: result :: Result < :: std :: option :: Option < :: std :: string :: String > , :: std :: string :: String > , protocol : :: std :: result :: Result < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant1EndpointsItemProtocol > , :: std :: string :: String > , secure : :: std :: result :: Result < :: std :: option :: Option < bool > , :: std :: string :: String > , target_port : :: std :: result :: Result < :: std :: option :: Option < i64 > , :: std :: string :: String > , }
    impl :: std :: default :: Default for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant1EndpointsItem { fn default () -> Self { Self { annotation : Ok (Default :: default ()) , attributes : Ok (Default :: default ()) , exposure : Ok (Default :: default ()) , name : Err ("no value supplied for name" . to_string ()) , path : Ok (Default :: default ()) , protocol : Ok (Default :: default ()) , secure : Ok (Default :: default ()) , target_port : Ok (Default :: default ()) , } } }
    impl DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant1EndpointsItem {
        pub fn annotation<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.annotation = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for annotation: {}", e));
            self
        }
        pub fn attributes<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::serde_json::Map<::std::string::String, ::serde_json::Value>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.attributes = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for attributes: {}", e));
            self
        }        pub fn exposure < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant1EndpointsItemExposure > > , T :: Error : :: std :: fmt :: Display ,{
            self.exposure = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for exposure: {}", e));
            self
        }        pub fn name < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant1EndpointsItemName > , T :: Error : :: std :: fmt :: Display ,{
            self.name = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for name: {}", e));
            self
        }
        pub fn path<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.path = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for path: {}", e));
            self
        }        pub fn protocol < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant1EndpointsItemProtocol > > , T :: Error : :: std :: fmt :: Display ,{
            self.protocol = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for protocol: {}", e));
            self
        }
        pub fn secure<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<bool>>,
            T::Error: ::std::fmt::Display,
        {
            self.secure = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for secure: {}", e));
            self
        }
        pub fn target_port<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<i64>>,
            T::Error: ::std::fmt::Display,
        {
            self.target_port = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for target_port: {}", e));
            self
        }
    }
    impl :: std :: convert :: TryFrom < DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant1EndpointsItem > for super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant1EndpointsItem { type Error = super :: error :: ConversionError ; fn try_from (value : DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant1EndpointsItem) -> :: std :: result :: Result < Self , super :: error :: ConversionError > { Ok (Self { annotation : value . annotation ? , attributes : value . attributes ? , exposure : value . exposure ? , name : value . name ? , path : value . path ? , protocol : value . protocol ? , secure : value . secure ? , target_port : value . target_port ? , }) } }
    impl :: std :: convert :: From < super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant1EndpointsItem > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant1EndpointsItem { fn from (value : super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant2OpenshiftVariant1EndpointsItem) -> Self { Self { annotation : Ok (value . annotation) , attributes : Ok (value . attributes) , exposure : Ok (value . exposure) , name : Ok (value . name) , path : Ok (value . path) , protocol : Ok (value . protocol) , secure : Ok (value . secure) , target_port : Ok (value . target_port) , } } }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant2ComponentsItemVariant3Volume {
        ephemeral: ::std::result::Result<::std::option::Option<bool>, ::std::string::String>,
        size: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant3Volume {
        fn default() -> Self {
            Self {
                ephemeral: Ok(Default::default()),
                size: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant2ComponentsItemVariant3Volume {
        pub fn ephemeral<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<bool>>,
            T::Error: ::std::fmt::Display,
        {
            self.ephemeral = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for ephemeral: {}", e));
            self
        }
        pub fn size<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.size = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for size: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<DevfileSchemaVersion222ParentVariant2ComponentsItemVariant3Volume>
        for super::DevfileSchemaVersion222ParentVariant2ComponentsItemVariant3Volume
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant3Volume,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                ephemeral: value.ephemeral?,
                size: value.size?,
            })
        }
    }
    impl
        ::std::convert::From<
            super::DevfileSchemaVersion222ParentVariant2ComponentsItemVariant3Volume,
        > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant3Volume
    {
        fn from(
            value: super::DevfileSchemaVersion222ParentVariant2ComponentsItemVariant3Volume,
        ) -> Self {
            Self {
                ephemeral: Ok(value.ephemeral),
                size: Ok(value.size),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4ImageVariant0DockerfileVariant1DevfileRegistry
    {
        id: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
        registry_url: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
    }
    impl :: std :: default :: Default for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4ImageVariant0DockerfileVariant1DevfileRegistry { fn default () -> Self { Self { id : Ok (Default :: default ()) , registry_url : Ok (Default :: default ()) , } } }
    impl DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4ImageVariant0DockerfileVariant1DevfileRegistry { pub fn id < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: option :: Option < :: std :: string :: String > > , T :: Error : :: std :: fmt :: Display , { self . id = value . try_into () . map_err (| e | format ! ("error converting supplied value for id: {}" , e)) ; self } pub fn registry_url < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: option :: Option < :: std :: string :: String > > , T :: Error : :: std :: fmt :: Display , { self . registry_url = value . try_into () . map_err (| e | format ! ("error converting supplied value for registry_url: {}" , e)) ; self } }
    impl :: std :: convert :: TryFrom < DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4ImageVariant0DockerfileVariant1DevfileRegistry > for super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4ImageVariant0DockerfileVariant1DevfileRegistry { type Error = super :: error :: ConversionError ; fn try_from (value : DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4ImageVariant0DockerfileVariant1DevfileRegistry) -> :: std :: result :: Result < Self , super :: error :: ConversionError > { Ok (Self { id : value . id ? , registry_url : value . registry_url ? , }) } }
    impl :: std :: convert :: From < super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4ImageVariant0DockerfileVariant1DevfileRegistry > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4ImageVariant0DockerfileVariant1DevfileRegistry { fn from (value : super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4ImageVariant0DockerfileVariant1DevfileRegistry) -> Self { Self { id : Ok (value . id) , registry_url : Ok (value . registry_url) , } } }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4ImageVariant0DockerfileVariant2Git { checkout_from : :: std :: result :: Result < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4ImageVariant0DockerfileVariant2GitCheckoutFrom > , :: std :: string :: String > , file_location : :: std :: result :: Result < :: std :: option :: Option < :: std :: string :: String > , :: std :: string :: String > , remotes : :: std :: result :: Result < :: std :: collections :: HashMap < :: std :: string :: String , :: std :: string :: String > , :: std :: string :: String > , }
    impl :: std :: default :: Default for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4ImageVariant0DockerfileVariant2Git { fn default () -> Self { Self { checkout_from : Ok (Default :: default ()) , file_location : Ok (Default :: default ()) , remotes : Ok (Default :: default ()) , } } }
    impl DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4ImageVariant0DockerfileVariant2Git {
        pub fn checkout_from < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4ImageVariant0DockerfileVariant2GitCheckoutFrom > > , T :: Error : :: std :: fmt :: Display ,{
            self.checkout_from = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for checkout_from: {}", e));
            self
        }
        pub fn file_location<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.file_location = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for file_location: {}", e));
            self
        }
        pub fn remotes<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.remotes = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for remotes: {}", e));
            self
        }
    }
    impl :: std :: convert :: TryFrom < DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4ImageVariant0DockerfileVariant2Git > for super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4ImageVariant0DockerfileVariant2Git { type Error = super :: error :: ConversionError ; fn try_from (value : DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4ImageVariant0DockerfileVariant2Git) -> :: std :: result :: Result < Self , super :: error :: ConversionError > { Ok (Self { checkout_from : value . checkout_from ? , file_location : value . file_location ? , remotes : value . remotes ? , }) } }
    impl :: std :: convert :: From < super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4ImageVariant0DockerfileVariant2Git > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4ImageVariant0DockerfileVariant2Git { fn from (value : super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4ImageVariant0DockerfileVariant2Git) -> Self { Self { checkout_from : Ok (value . checkout_from) , file_location : Ok (value . file_location) , remotes : Ok (value . remotes) , } } }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4ImageVariant0DockerfileVariant2GitCheckoutFrom
    {
        remote: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
        revision: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
    }
    impl :: std :: default :: Default for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4ImageVariant0DockerfileVariant2GitCheckoutFrom { fn default () -> Self { Self { remote : Ok (Default :: default ()) , revision : Ok (Default :: default ()) , } } }
    impl DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4ImageVariant0DockerfileVariant2GitCheckoutFrom { pub fn remote < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: option :: Option < :: std :: string :: String > > , T :: Error : :: std :: fmt :: Display , { self . remote = value . try_into () . map_err (| e | format ! ("error converting supplied value for remote: {}" , e)) ; self } pub fn revision < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: option :: Option < :: std :: string :: String > > , T :: Error : :: std :: fmt :: Display , { self . revision = value . try_into () . map_err (| e | format ! ("error converting supplied value for revision: {}" , e)) ; self } }
    impl :: std :: convert :: TryFrom < DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4ImageVariant0DockerfileVariant2GitCheckoutFrom > for super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4ImageVariant0DockerfileVariant2GitCheckoutFrom { type Error = super :: error :: ConversionError ; fn try_from (value : DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4ImageVariant0DockerfileVariant2GitCheckoutFrom) -> :: std :: result :: Result < Self , super :: error :: ConversionError > { Ok (Self { remote : value . remote ? , revision : value . revision ? , }) } }
    impl :: std :: convert :: From < super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4ImageVariant0DockerfileVariant2GitCheckoutFrom > for DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4ImageVariant0DockerfileVariant2GitCheckoutFrom { fn from (value : super :: DevfileSchemaVersion222ParentVariant2ComponentsItemVariant4ImageVariant0DockerfileVariant2GitCheckoutFrom) -> Self { Self { remote : Ok (value . remote) , revision : Ok (value . revision) , } } }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant0Git { checkout_from : :: std :: result :: Result < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant0GitCheckoutFrom > , :: std :: string :: String > , remotes : :: std :: result :: Result < :: std :: collections :: HashMap < :: std :: string :: String , :: std :: string :: String > , :: std :: string :: String > , }
    impl ::std::default::Default
        for DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant0Git
    {
        fn default() -> Self {
            Self {
                checkout_from: Ok(Default::default()),
                remotes: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant0Git {
        pub fn checkout_from < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant0GitCheckoutFrom > > , T :: Error : :: std :: fmt :: Display ,{
            self.checkout_from = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for checkout_from: {}", e));
            self
        }
        pub fn remotes<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.remotes = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for remotes: {}", e));
            self
        }
    }
    impl
        ::std::convert::TryFrom<
            DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant0Git,
        > for super::DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant0Git
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant0Git,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                checkout_from: value.checkout_from?,
                remotes: value.remotes?,
            })
        }
    }
    impl
        ::std::convert::From<
            super::DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant0Git,
        > for DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant0Git
    {
        fn from(
            value: super::DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant0Git,
        ) -> Self {
            Self {
                checkout_from: Ok(value.checkout_from),
                remotes: Ok(value.remotes),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant0GitCheckoutFrom {
        remote: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
        revision: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default
        for DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant0GitCheckoutFrom
    {
        fn default() -> Self {
            Self {
                remote: Ok(Default::default()),
                revision: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant0GitCheckoutFrom {
        pub fn remote<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.remote = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for remote: {}", e));
            self
        }
        pub fn revision<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.revision = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for revision: {}", e));
            self
        }
    }
    impl
        ::std::convert::TryFrom<
            DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant0GitCheckoutFrom,
        >
        for super::DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant0GitCheckoutFrom
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value : DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant0GitCheckoutFrom,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                remote: value.remote?,
                revision: value.revision?,
            })
        }
    }
    impl :: std :: convert :: From < super :: DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant0GitCheckoutFrom > for DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant0GitCheckoutFrom { fn from (value : super :: DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant0GitCheckoutFrom) -> Self { Self { remote : Ok (value . remote) , revision : Ok (value . revision) , } } }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant1Zip {
        location: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default
        for DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant1Zip
    {
        fn default() -> Self {
            Self {
                location: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant1Zip {
        pub fn location<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.location = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for location: {}", e));
            self
        }
    }
    impl
        ::std::convert::TryFrom<
            DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant1Zip,
        > for super::DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant1Zip
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant1Zip,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                location: value.location?,
            })
        }
    }
    impl
        ::std::convert::From<
            super::DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant1Zip,
        > for DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant1Zip
    {
        fn from(
            value: super::DevfileSchemaVersion222ParentVariant2DependentProjectsItemVariant1Zip,
        ) -> Self {
            Self {
                location: Ok(value.location),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant2Kubernetes {
        name: ::std::result::Result<::std::string::String, ::std::string::String>,
        namespace: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default for DevfileSchemaVersion222ParentVariant2Kubernetes {
        fn default() -> Self {
            Self {
                name: Err("no value supplied for name".to_string()),
                namespace: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant2Kubernetes {
        pub fn name<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::string::String>,
            T::Error: ::std::fmt::Display,
        {
            self.name = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for name: {}", e));
            self
        }
        pub fn namespace<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.namespace = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for namespace: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<DevfileSchemaVersion222ParentVariant2Kubernetes>
        for super::DevfileSchemaVersion222ParentVariant2Kubernetes
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ParentVariant2Kubernetes,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                name: value.name?,
                namespace: value.namespace?,
            })
        }
    }
    impl ::std::convert::From<super::DevfileSchemaVersion222ParentVariant2Kubernetes>
        for DevfileSchemaVersion222ParentVariant2Kubernetes
    {
        fn from(value: super::DevfileSchemaVersion222ParentVariant2Kubernetes) -> Self {
            Self {
                name: Ok(value.name),
                namespace: Ok(value.namespace),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant2ProjectsItemVariant0Git {
        checkout_from: ::std::result::Result<
            ::std::option::Option<
                super::DevfileSchemaVersion222ParentVariant2ProjectsItemVariant0GitCheckoutFrom,
            >,
            ::std::string::String,
        >,
        remotes: ::std::result::Result<
            ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default for DevfileSchemaVersion222ParentVariant2ProjectsItemVariant0Git {
        fn default() -> Self {
            Self {
                checkout_from: Ok(Default::default()),
                remotes: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant2ProjectsItemVariant0Git {
        pub fn checkout_from<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::option::Option<
                    super::DevfileSchemaVersion222ParentVariant2ProjectsItemVariant0GitCheckoutFrom,
                >,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.checkout_from = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for checkout_from: {}", e));
            self
        }
        pub fn remotes<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.remotes = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for remotes: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<DevfileSchemaVersion222ParentVariant2ProjectsItemVariant0Git>
        for super::DevfileSchemaVersion222ParentVariant2ProjectsItemVariant0Git
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ParentVariant2ProjectsItemVariant0Git,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                checkout_from: value.checkout_from?,
                remotes: value.remotes?,
            })
        }
    }
    impl ::std::convert::From<super::DevfileSchemaVersion222ParentVariant2ProjectsItemVariant0Git>
        for DevfileSchemaVersion222ParentVariant2ProjectsItemVariant0Git
    {
        fn from(
            value: super::DevfileSchemaVersion222ParentVariant2ProjectsItemVariant0Git,
        ) -> Self {
            Self {
                checkout_from: Ok(value.checkout_from),
                remotes: Ok(value.remotes),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant2ProjectsItemVariant0GitCheckoutFrom {
        remote: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
        revision: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default
        for DevfileSchemaVersion222ParentVariant2ProjectsItemVariant0GitCheckoutFrom
    {
        fn default() -> Self {
            Self {
                remote: Ok(Default::default()),
                revision: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant2ProjectsItemVariant0GitCheckoutFrom {
        pub fn remote<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.remote = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for remote: {}", e));
            self
        }
        pub fn revision<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.revision = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for revision: {}", e));
            self
        }
    }
    impl
        ::std::convert::TryFrom<
            DevfileSchemaVersion222ParentVariant2ProjectsItemVariant0GitCheckoutFrom,
        > for super::DevfileSchemaVersion222ParentVariant2ProjectsItemVariant0GitCheckoutFrom
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ParentVariant2ProjectsItemVariant0GitCheckoutFrom,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                remote: value.remote?,
                revision: value.revision?,
            })
        }
    }
    impl
        ::std::convert::From<
            super::DevfileSchemaVersion222ParentVariant2ProjectsItemVariant0GitCheckoutFrom,
        > for DevfileSchemaVersion222ParentVariant2ProjectsItemVariant0GitCheckoutFrom
    {
        fn from(
            value: super::DevfileSchemaVersion222ParentVariant2ProjectsItemVariant0GitCheckoutFrom,
        ) -> Self {
            Self {
                remote: Ok(value.remote),
                revision: Ok(value.revision),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant2ProjectsItemVariant1Zip {
        location: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default for DevfileSchemaVersion222ParentVariant2ProjectsItemVariant1Zip {
        fn default() -> Self {
            Self {
                location: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant2ProjectsItemVariant1Zip {
        pub fn location<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.location = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for location: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<DevfileSchemaVersion222ParentVariant2ProjectsItemVariant1Zip>
        for super::DevfileSchemaVersion222ParentVariant2ProjectsItemVariant1Zip
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ParentVariant2ProjectsItemVariant1Zip,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                location: value.location?,
            })
        }
    }
    impl ::std::convert::From<super::DevfileSchemaVersion222ParentVariant2ProjectsItemVariant1Zip>
        for DevfileSchemaVersion222ParentVariant2ProjectsItemVariant1Zip
    {
        fn from(
            value: super::DevfileSchemaVersion222ParentVariant2ProjectsItemVariant1Zip,
        ) -> Self {
            Self {
                location: Ok(value.location),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant0Git { checkout_from : :: std :: result :: Result < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant0GitCheckoutFrom > , :: std :: string :: String > , remotes : :: std :: result :: Result < :: std :: collections :: HashMap < :: std :: string :: String , :: std :: string :: String > , :: std :: string :: String > , }
    impl ::std::default::Default
        for DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant0Git
    {
        fn default() -> Self {
            Self {
                checkout_from: Ok(Default::default()),
                remotes: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant0Git {
        pub fn checkout_from < T > (mut self , value : T) -> Self where T : :: std :: convert :: TryInto < :: std :: option :: Option < super :: DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant0GitCheckoutFrom > > , T :: Error : :: std :: fmt :: Display ,{
            self.checkout_from = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for checkout_from: {}", e));
            self
        }
        pub fn remotes<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.remotes = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for remotes: {}", e));
            self
        }
    }
    impl
        ::std::convert::TryFrom<DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant0Git>
        for super::DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant0Git
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant0Git,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                checkout_from: value.checkout_from?,
                remotes: value.remotes?,
            })
        }
    }
    impl
        ::std::convert::From<
            super::DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant0Git,
        > for DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant0Git
    {
        fn from(
            value: super::DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant0Git,
        ) -> Self {
            Self {
                checkout_from: Ok(value.checkout_from),
                remotes: Ok(value.remotes),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant0GitCheckoutFrom {
        remote: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
        revision: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default
        for DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant0GitCheckoutFrom
    {
        fn default() -> Self {
            Self {
                remote: Ok(Default::default()),
                revision: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant0GitCheckoutFrom {
        pub fn remote<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.remote = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for remote: {}", e));
            self
        }
        pub fn revision<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.revision = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for revision: {}", e));
            self
        }
    }
    impl
        ::std::convert::TryFrom<
            DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant0GitCheckoutFrom,
        >
        for super::DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant0GitCheckoutFrom
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant0GitCheckoutFrom,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                remote: value.remote?,
                revision: value.revision?,
            })
        }
    }
    impl
        ::std::convert::From<
            super::DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant0GitCheckoutFrom,
        > for DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant0GitCheckoutFrom
    {
        fn from(
            value : super :: DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant0GitCheckoutFrom,
        ) -> Self {
            Self {
                remote: Ok(value.remote),
                revision: Ok(value.revision),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant1Zip {
        location: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default
        for DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant1Zip
    {
        fn default() -> Self {
            Self {
                location: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant1Zip {
        pub fn location<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.location = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for location: {}", e));
            self
        }
    }
    impl
        ::std::convert::TryFrom<DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant1Zip>
        for super::DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant1Zip
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant1Zip,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                location: value.location?,
            })
        }
    }
    impl
        ::std::convert::From<
            super::DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant1Zip,
        > for DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant1Zip
    {
        fn from(
            value: super::DevfileSchemaVersion222ParentVariant2StarterProjectsItemVariant1Zip,
        ) -> Self {
            Self {
                location: Ok(value.location),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ProjectsItemVariant0Git {
        checkout_from: ::std::result::Result<
            ::std::option::Option<
                super::DevfileSchemaVersion222ProjectsItemVariant0GitCheckoutFrom,
            >,
            ::std::string::String,
        >,
        remotes: ::std::result::Result<
            ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default for DevfileSchemaVersion222ProjectsItemVariant0Git {
        fn default() -> Self {
            Self {
                checkout_from: Ok(Default::default()),
                remotes: Err("no value supplied for remotes".to_string()),
            }
        }
    }
    impl DevfileSchemaVersion222ProjectsItemVariant0Git {
        pub fn checkout_from<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::option::Option<
                    super::DevfileSchemaVersion222ProjectsItemVariant0GitCheckoutFrom,
                >,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.checkout_from = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for checkout_from: {}", e));
            self
        }
        pub fn remotes<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.remotes = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for remotes: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<DevfileSchemaVersion222ProjectsItemVariant0Git>
        for super::DevfileSchemaVersion222ProjectsItemVariant0Git
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ProjectsItemVariant0Git,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                checkout_from: value.checkout_from?,
                remotes: value.remotes?,
            })
        }
    }
    impl ::std::convert::From<super::DevfileSchemaVersion222ProjectsItemVariant0Git>
        for DevfileSchemaVersion222ProjectsItemVariant0Git
    {
        fn from(value: super::DevfileSchemaVersion222ProjectsItemVariant0Git) -> Self {
            Self {
                checkout_from: Ok(value.checkout_from),
                remotes: Ok(value.remotes),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ProjectsItemVariant0GitCheckoutFrom {
        remote: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
        revision: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default for DevfileSchemaVersion222ProjectsItemVariant0GitCheckoutFrom {
        fn default() -> Self {
            Self {
                remote: Ok(Default::default()),
                revision: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ProjectsItemVariant0GitCheckoutFrom {
        pub fn remote<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.remote = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for remote: {}", e));
            self
        }
        pub fn revision<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.revision = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for revision: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<DevfileSchemaVersion222ProjectsItemVariant0GitCheckoutFrom>
        for super::DevfileSchemaVersion222ProjectsItemVariant0GitCheckoutFrom
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ProjectsItemVariant0GitCheckoutFrom,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                remote: value.remote?,
                revision: value.revision?,
            })
        }
    }
    impl ::std::convert::From<super::DevfileSchemaVersion222ProjectsItemVariant0GitCheckoutFrom>
        for DevfileSchemaVersion222ProjectsItemVariant0GitCheckoutFrom
    {
        fn from(value: super::DevfileSchemaVersion222ProjectsItemVariant0GitCheckoutFrom) -> Self {
            Self {
                remote: Ok(value.remote),
                revision: Ok(value.revision),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222ProjectsItemVariant1Zip {
        location: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default for DevfileSchemaVersion222ProjectsItemVariant1Zip {
        fn default() -> Self {
            Self {
                location: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222ProjectsItemVariant1Zip {
        pub fn location<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.location = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for location: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<DevfileSchemaVersion222ProjectsItemVariant1Zip>
        for super::DevfileSchemaVersion222ProjectsItemVariant1Zip
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222ProjectsItemVariant1Zip,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                location: value.location?,
            })
        }
    }
    impl ::std::convert::From<super::DevfileSchemaVersion222ProjectsItemVariant1Zip>
        for DevfileSchemaVersion222ProjectsItemVariant1Zip
    {
        fn from(value: super::DevfileSchemaVersion222ProjectsItemVariant1Zip) -> Self {
            Self {
                location: Ok(value.location),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222StarterProjectsItemVariant0Git {
        checkout_from: ::std::result::Result<
            ::std::option::Option<
                super::DevfileSchemaVersion222StarterProjectsItemVariant0GitCheckoutFrom,
            >,
            ::std::string::String,
        >,
        remotes: ::std::result::Result<
            ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default for DevfileSchemaVersion222StarterProjectsItemVariant0Git {
        fn default() -> Self {
            Self {
                checkout_from: Ok(Default::default()),
                remotes: Err("no value supplied for remotes".to_string()),
            }
        }
    }
    impl DevfileSchemaVersion222StarterProjectsItemVariant0Git {
        pub fn checkout_from<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::option::Option<
                    super::DevfileSchemaVersion222StarterProjectsItemVariant0GitCheckoutFrom,
                >,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.checkout_from = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for checkout_from: {}", e));
            self
        }
        pub fn remotes<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::collections::HashMap<::std::string::String, ::std::string::String>,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.remotes = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for remotes: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<DevfileSchemaVersion222StarterProjectsItemVariant0Git>
        for super::DevfileSchemaVersion222StarterProjectsItemVariant0Git
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222StarterProjectsItemVariant0Git,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                checkout_from: value.checkout_from?,
                remotes: value.remotes?,
            })
        }
    }
    impl ::std::convert::From<super::DevfileSchemaVersion222StarterProjectsItemVariant0Git>
        for DevfileSchemaVersion222StarterProjectsItemVariant0Git
    {
        fn from(value: super::DevfileSchemaVersion222StarterProjectsItemVariant0Git) -> Self {
            Self {
                checkout_from: Ok(value.checkout_from),
                remotes: Ok(value.remotes),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222StarterProjectsItemVariant0GitCheckoutFrom {
        remote: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
        revision: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default for DevfileSchemaVersion222StarterProjectsItemVariant0GitCheckoutFrom {
        fn default() -> Self {
            Self {
                remote: Ok(Default::default()),
                revision: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222StarterProjectsItemVariant0GitCheckoutFrom {
        pub fn remote<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.remote = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for remote: {}", e));
            self
        }
        pub fn revision<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.revision = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for revision: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<DevfileSchemaVersion222StarterProjectsItemVariant0GitCheckoutFrom>
        for super::DevfileSchemaVersion222StarterProjectsItemVariant0GitCheckoutFrom
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222StarterProjectsItemVariant0GitCheckoutFrom,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                remote: value.remote?,
                revision: value.revision?,
            })
        }
    }
    impl
        ::std::convert::From<
            super::DevfileSchemaVersion222StarterProjectsItemVariant0GitCheckoutFrom,
        > for DevfileSchemaVersion222StarterProjectsItemVariant0GitCheckoutFrom
    {
        fn from(
            value: super::DevfileSchemaVersion222StarterProjectsItemVariant0GitCheckoutFrom,
        ) -> Self {
            Self {
                remote: Ok(value.remote),
                revision: Ok(value.revision),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct DevfileSchemaVersion222StarterProjectsItemVariant1Zip {
        location: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default for DevfileSchemaVersion222StarterProjectsItemVariant1Zip {
        fn default() -> Self {
            Self {
                location: Ok(Default::default()),
            }
        }
    }
    impl DevfileSchemaVersion222StarterProjectsItemVariant1Zip {
        pub fn location<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.location = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for location: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<DevfileSchemaVersion222StarterProjectsItemVariant1Zip>
        for super::DevfileSchemaVersion222StarterProjectsItemVariant1Zip
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: DevfileSchemaVersion222StarterProjectsItemVariant1Zip,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                location: value.location?,
            })
        }
    }
    impl ::std::convert::From<super::DevfileSchemaVersion222StarterProjectsItemVariant1Zip>
        for DevfileSchemaVersion222StarterProjectsItemVariant1Zip
    {
        fn from(value: super::DevfileSchemaVersion222StarterProjectsItemVariant1Zip) -> Self {
            Self {
                location: Ok(value.location),
            }
        }
    }
}
#[doc = r" Generation of default values for serde."]
pub mod defaults {
    pub(super) fn devfile_schema_version222_components_item_variant0_container_source_mapping(
    ) -> ::std::string::String {
        "/projects".to_string()
    }
    pub(super) fn devfile_schema_version222_components_item_variant0_container_endpoints_item_exposure(
    ) -> super::DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItemExposure {
        super::DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItemExposure::Public
    }
    pub(super) fn devfile_schema_version222_components_item_variant0_container_endpoints_item_protocol(
    ) -> super::DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItemProtocol {
        super::DevfileSchemaVersion222ComponentsItemVariant0ContainerEndpointsItemProtocol::Http
    }
    pub(super) fn devfile_schema_version222_components_item_variant1_kubernetes_variant0_endpoints_item_exposure(
    ) -> super::DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant0EndpointsItemExposure
    {
        super :: DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant0EndpointsItemExposure :: Public
    }
    pub(super) fn devfile_schema_version222_components_item_variant1_kubernetes_variant0_endpoints_item_protocol(
    ) -> super::DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant0EndpointsItemProtocol
    {
        super :: DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant0EndpointsItemProtocol :: Http
    }
    pub(super) fn devfile_schema_version222_components_item_variant1_kubernetes_variant1_endpoints_item_exposure(
    ) -> super::DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant1EndpointsItemExposure
    {
        super :: DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant1EndpointsItemExposure :: Public
    }
    pub(super) fn devfile_schema_version222_components_item_variant1_kubernetes_variant1_endpoints_item_protocol(
    ) -> super::DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant1EndpointsItemProtocol
    {
        super :: DevfileSchemaVersion222ComponentsItemVariant1KubernetesVariant1EndpointsItemProtocol :: Http
    }
    pub(super) fn devfile_schema_version222_components_item_variant2_openshift_variant0_endpoints_item_exposure(
    ) -> super::DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant0EndpointsItemExposure
    {
        super :: DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant0EndpointsItemExposure :: Public
    }
    pub(super) fn devfile_schema_version222_components_item_variant2_openshift_variant0_endpoints_item_protocol(
    ) -> super::DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant0EndpointsItemProtocol
    {
        super :: DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant0EndpointsItemProtocol :: Http
    }
    pub(super) fn devfile_schema_version222_components_item_variant2_openshift_variant1_endpoints_item_exposure(
    ) -> super::DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant1EndpointsItemExposure
    {
        super :: DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant1EndpointsItemExposure :: Public
    }
    pub(super) fn devfile_schema_version222_components_item_variant2_openshift_variant1_endpoints_item_protocol(
    ) -> super::DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant1EndpointsItemProtocol
    {
        super :: DevfileSchemaVersion222ComponentsItemVariant2OpenshiftVariant1EndpointsItemProtocol :: Http
    }
}
pub const JSON_TYPE_2_2_2: &str = include_str!("devfile.2.2.2.json");
